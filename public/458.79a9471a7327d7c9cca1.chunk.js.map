{"version":3,"file":"458.79a9471a7327d7c9cca1.chunk.js","mappings":"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","sources":["webpack://tweb/./src/components/inputField.ts","webpack://tweb/./src/helpers/dom/selectElementContents.ts","webpack://tweb/./src/components/singleTransition.ts","webpack://tweb/./src/helpers/dom/findUpAttribute.ts","webpack://tweb/./src/helpers/dom/getRichElementValue.ts","webpack://tweb/./src/helpers/dom/getRichValue.ts","webpack://tweb/./src/helpers/dom/isInputEmpty.ts","webpack://tweb/./src/helpers/dom/replaceContent.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport simulateEvent from \"../helpers/dom/dispatchEvent\";\r\nimport findUpAttribute from \"../helpers/dom/findUpAttribute\";\r\nimport getRichValue from \"../helpers/dom/getRichValue\";\r\nimport isInputEmpty from \"../helpers/dom/isInputEmpty\";\r\nimport selectElementContents from \"../helpers/dom/selectElementContents\";\r\nimport { MessageEntity } from \"../layer\";\r\nimport { i18n, LangPackKey, _i18n } from \"../lib/langPack\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\nimport SetTransition from \"./singleTransition\";\r\n\r\nlet init = () => {\r\n  document.addEventListener('paste', (e) => {\r\n    if(!findUpAttribute(e.target, 'contenteditable=\"true\"')) {\r\n      return;\r\n    }\r\n\r\n    e.preventDefault();\r\n    let text: string, entities: MessageEntity[];\r\n\r\n    // @ts-ignore\r\n    let plainText: string = (e.originalEvent || e).clipboardData.getData('text/plain');\r\n    let usePlainText = true;\r\n\r\n    // @ts-ignore\r\n    let html: string = (e.originalEvent || e).clipboardData.getData('text/html');\r\n    if(html.trim()) {\r\n      html = html.replace(/<style([\\s\\S]*)<\\/style>/, '');\r\n      html = html.replace(/<!--([\\s\\S]*)-->/, '');\r\n\r\n      const match = html.match(/<body>([\\s\\S]*)<\\/body>/);\r\n      if(match) {\r\n        html = match[1].trim();\r\n      }\r\n\r\n      let span: HTMLElement = document.createElement('span');\r\n      span.innerHTML = html;\r\n\r\n      let curChild = span.firstChild;\r\n      while(curChild) { // * fix whitespace between elements like <p>asd</p>\\n<p>zxc</p>\r\n        let nextSibling = curChild.nextSibling;\r\n        if(curChild.nodeType === 3) {\r\n          if(!curChild.nodeValue.trim()) {\r\n            curChild.remove();\r\n          }\r\n        }\r\n\r\n        curChild = nextSibling;\r\n      }\r\n\r\n      const richValue = getRichValue(span, true);\r\n      if(richValue.value.replace(/\\s/g, '').length === plainText.replace(/\\s/g, '').length) {\r\n        text = richValue.value;\r\n        entities = richValue.entities;\r\n        usePlainText = false;\r\n  \r\n        let entities2 = RichTextProcessor.parseEntities(text);\r\n        entities2 = entities2.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n        RichTextProcessor.mergeEntities(entities, entities2);\r\n      }\r\n    }\r\n    \r\n    if(usePlainText) {\r\n      text = plainText;\r\n      entities = RichTextProcessor.parseEntities(text);\r\n      entities = entities.filter(e => e._ === 'messageEntityEmoji' || e._ === 'messageEntityLinebreak');\r\n    }\r\n\r\n    text = RichTextProcessor.wrapDraftText(text, {entities});\r\n    \r\n    window.document.execCommand('insertHTML', false, text);\r\n  });\r\n\r\n  init = null;\r\n};\r\n\r\n// ! it doesn't respect symbols other than strongs\r\n/* const checkAndSetRTL = (input: HTMLElement) => {\r\n  //const isEmpty = isInputEmpty(input);\r\n  //console.log('input', isEmpty);\r\n\r\n  //const char = [...getRichValue(input)][0];\r\n  const char = (input instanceof HTMLInputElement ? input.value : input.innerText)[0];\r\n  let direction = 'ltr';\r\n  if(char && checkRTL(char)) {\r\n    direction = 'rtl';\r\n  }\r\n\r\n  //console.log('RTL', direction, char);\r\n\r\n  input.style.direction = direction;\r\n}; */\r\n\r\nexport enum InputState {\r\n  Neutral = 0,\r\n  Valid = 1,\r\n  Error = 2\r\n};\r\n\r\nexport type InputFieldOptions = {\r\n  placeholder?: LangPackKey, \r\n  label?: LangPackKey, \r\n  labelOptions?: any[],\r\n  labelText?: string,\r\n  name?: string, \r\n  maxLength?: number, \r\n  showLengthOn?: number,\r\n  plainText?: true,\r\n  animate?: boolean,\r\n  required?: boolean,\r\n  canBeEdited?: boolean,\r\n  validate?: () => boolean\r\n};\r\n\r\nclass InputField {\r\n  public container: HTMLElement;\r\n  public input: HTMLElement;\r\n  public inputFake: HTMLElement;\r\n  public label: HTMLLabelElement;\r\n\r\n  public originalValue: string;\r\n\r\n  public required: boolean;\r\n  public validate: () => boolean;\r\n\r\n  //public onLengthChange: (length: number, isOverflow: boolean) => void;\r\n  // protected wasInputFakeClientHeight: number;\r\n  // protected showScrollDebounced: () => void;\r\n\r\n  constructor(public options: InputFieldOptions = {}) {\r\n    this.container = document.createElement('div');\r\n    this.container.classList.add('input-field');\r\n\r\n    this.required = options.required;\r\n    this.validate = options.validate;\r\n\r\n    if(options.maxLength !== undefined && options.showLengthOn === undefined) {\r\n      options.showLengthOn = Math.min(40, Math.round(options.maxLength / 3));\r\n    }\r\n\r\n    const {placeholder, maxLength, showLengthOn, name, plainText, canBeEdited = true} = options;\r\n\r\n    let label = options.label || options.labelText;\r\n\r\n    let input: HTMLElement;\r\n    if(!plainText) {\r\n      if(init) {\r\n        init();\r\n      }\r\n\r\n      this.container.innerHTML = `\r\n      <div contenteditable=\"${String(!!canBeEdited)}\" class=\"input-field-input\"></div>\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      const observer = new MutationObserver(() => {\r\n        //checkAndSetRTL(input);\r\n\r\n        if(processInput) {\r\n          processInput();\r\n        }\r\n      });\r\n\r\n      // * because if delete all characters there will br left\r\n      input.addEventListener('input', () => {\r\n        if(isInputEmpty(input)) {\r\n          input.innerHTML = '';\r\n        }\r\n\r\n        if(this.inputFake) {\r\n          this.inputFake.innerHTML = input.innerHTML;\r\n          this.onFakeInput();\r\n        }\r\n      });\r\n      \r\n      // ! childList for paste first symbol\r\n      observer.observe(input, {characterData: true, childList: true, subtree: true});\r\n\r\n      if(options.animate) {\r\n        input.classList.add('scrollable', 'scrollable-y');\r\n        // this.wasInputFakeClientHeight = 0;\r\n        // this.showScrollDebounced = debounce(() => this.input.classList.remove('no-scrollbar'), 150, false, true);\r\n        this.inputFake = document.createElement('div');\r\n        this.inputFake.setAttribute('contenteditable', 'true');\r\n        this.inputFake.className = input.className + ' input-field-input-fake';\r\n      }\r\n    } else {\r\n      this.container.innerHTML = `\r\n      <input type=\"text\" ${name ? `name=\"${name}\"` : ''} autocomplete=\"off\" ${label ? 'required=\"\"' : ''} class=\"input-field-input\">\r\n      `;\r\n\r\n      input = this.container.firstElementChild as HTMLElement;\r\n      //input.addEventListener('input', () => checkAndSetRTL(input));\r\n    }\r\n\r\n    input.setAttribute('dir', 'auto');\r\n\r\n    if(placeholder) {\r\n      _i18n(input, placeholder, undefined, 'placeholder');\r\n\r\n      if(this.inputFake) {\r\n        _i18n(this.inputFake, placeholder, undefined, 'placeholder');\r\n      }\r\n    }\r\n\r\n    if(label || placeholder) {\r\n      const border = document.createElement('div');\r\n      border.classList.add('input-field-border');\r\n      this.container.append(border);\r\n    }\r\n\r\n    if(label) {\r\n      this.label = document.createElement('label');\r\n      this.setLabel();\r\n      this.container.append(this.label);\r\n    }\r\n\r\n    let processInput: () => void;\r\n    if(maxLength) {\r\n      const labelEl = this.container.lastElementChild as HTMLLabelElement;\r\n      let showingLength = false;\r\n\r\n      processInput = () => {\r\n        const wasError = input.classList.contains('error');\r\n        // * https://stackoverflow.com/a/54369605 #2 to count emoji as 1 symbol\r\n        const inputLength = plainText ? (input as HTMLInputElement).value.length : [...getRichValue(input, false).value].length;\r\n        const diff = maxLength - inputLength;\r\n        const isError = diff < 0;\r\n        input.classList.toggle('error', isError);\r\n\r\n        //this.onLengthChange && this.onLengthChange(inputLength, isError);\r\n\r\n        if(isError || diff <= showLengthOn) {\r\n          this.setLabel();\r\n          labelEl.append(` (${maxLength - inputLength})`);\r\n          if(!showingLength) showingLength = true;\r\n        } else if((wasError && !isError) || showingLength) {\r\n          this.setLabel();\r\n          showingLength = false;\r\n        }\r\n      };\r\n\r\n      input.addEventListener('input', processInput);\r\n    }\r\n\r\n    this.input = input;\r\n  }\r\n\r\n  public select() {\r\n    if(!this.value) { // * avoid selecting whole empty field on iOS devices\r\n      return;\r\n    }\r\n\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).select(); // * select text\r\n    } else {\r\n      selectElementContents(this.input);\r\n    }\r\n  }\r\n\r\n  public setLabel() {\r\n    this.label.textContent = '';\r\n    if(this.options.labelText) {\r\n      this.label.innerHTML = this.options.labelText;\r\n    } else {\r\n      this.label.append(i18n(this.options.label, this.options.labelOptions));\r\n    }\r\n  }\r\n\r\n  public onFakeInput(setHeight = true) {\r\n    const {scrollHeight: newHeight/* , clientHeight */} = this.inputFake;\r\n    /* if(this.wasInputFakeClientHeight && this.wasInputFakeClientHeight !== clientHeight) {\r\n      this.input.classList.add('no-scrollbar'); // ! в сафари может вообще не появиться скролл после анимации, так как ему нужен полный reflow блока с overflow.\r\n      this.showScrollDebounced();\r\n    } */\r\n\r\n    const currentHeight = +this.input.style.height.replace('px', '');\r\n    if(currentHeight === newHeight) {\r\n      return;\r\n    }\r\n\r\n    const TRANSITION_DURATION_FACTOR = 50;\r\n    const transitionDuration = Math.round(\r\n      TRANSITION_DURATION_FACTOR * Math.log(Math.abs(newHeight - currentHeight)),\r\n    );\r\n\r\n    // this.wasInputFakeClientHeight = clientHeight;\r\n    this.input.style.transitionDuration = `${transitionDuration}ms`;\r\n\r\n    if(setHeight) {\r\n      this.input.style.height = newHeight ? newHeight + 'px' : '';\r\n    }\r\n\r\n    const className = 'is-changing-height';\r\n    SetTransition(this.input, className, true, transitionDuration, () => {\r\n      this.input.classList.remove(className);\r\n    });\r\n  }\r\n\r\n  get value() {\r\n    return this.options.plainText ? (this.input as HTMLInputElement).value : getRichValue(this.input, false).value;\r\n    //return getRichValue(this.input);\r\n  }\r\n\r\n  set value(value: string) {\r\n    this.setValueSilently(value, false);\r\n\r\n    simulateEvent(this.input, 'input');\r\n  }\r\n\r\n  public setValueSilently(value: string, fireFakeInput = true) {\r\n    if(this.options.plainText) {\r\n      (this.input as HTMLInputElement).value = value;\r\n    } else {\r\n      this.input.innerHTML = value;\r\n      \r\n      if(this.inputFake) {\r\n        this.inputFake.innerHTML = value;\r\n\r\n        if(fireFakeInput) {\r\n          this.onFakeInput();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public isChanged() {\r\n    return this.value !== this.originalValue;\r\n  }\r\n\r\n  public isValid() {\r\n    return !this.input.classList.contains('error') && \r\n      (!this.validate || this.validate()) && \r\n      (!this.required || !isInputEmpty(this.input));\r\n  }\r\n\r\n  public isValidToChange() {\r\n    return this.isValid() && this.isChanged();\r\n  }\r\n\r\n  public setDraftValue(value = '', silent = false) {\r\n    if(!this.options.plainText) {\r\n      value = RichTextProcessor.wrapDraftText(value);\r\n    }\r\n\r\n    if(silent) {\r\n      this.setValueSilently(value, false); \r\n    } else {\r\n      this.value = value;\r\n    }\r\n  }\r\n\r\n  public setOriginalValue(value: InputField['originalValue'] = '', silent = false) {\r\n    this.originalValue = value;\r\n    this.setDraftValue(value, silent);\r\n  }\r\n\r\n  public setState(state: InputState, label?: LangPackKey) {\r\n    if(label) {\r\n      this.label.textContent = '';\r\n      this.label.append(i18n(label, this.options.labelOptions));\r\n    }\r\n\r\n    this.input.classList.toggle('error', !!(state & InputState.Error));\r\n    this.input.classList.toggle('valid', !!(state & InputState.Valid));\r\n  }\r\n\r\n  public setError(label?: LangPackKey) {\r\n    this.setState(InputState.Error, label);\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","// https://stackoverflow.com/a/6150060\nexport default function selectElementContents(el: HTMLElement) {\n  const range = document.createRange();\n  range.selectNodeContents(el);\n  const sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../lib/rootScope\";\r\n\r\nconst SetTransition = (\r\n  element: HTMLElement, \r\n  className: string, \r\n  forwards: boolean, \r\n  duration: number, \r\n  onTransitionEnd?: () => void, \r\n  useRafs?: number\r\n) => {\r\n  const {timeout, raf} = element.dataset;\r\n  if(timeout !== undefined) {\r\n    clearTimeout(+timeout);\r\n  }\r\n\r\n  if(raf !== undefined) {\r\n    window.cancelAnimationFrame(+raf);\r\n    if(!useRafs) {\r\n      delete element.dataset.raf;\r\n    }\r\n  }\r\n\r\n  // if(forwards && className && element.classList.contains(className) && !element.classList.contains('animating')) {\r\n  //   return;\r\n  // }\r\n\r\n  if(useRafs && rootScope.settings.animationsEnabled && duration) {\r\n    element.dataset.raf = '' + window.requestAnimationFrame(() => {\r\n      delete element.dataset.raf;\r\n      SetTransition(element, className, forwards, duration, onTransitionEnd, useRafs - 1);\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  if(forwards && className) {\r\n    element.classList.add(className);\r\n  }\r\n\r\n  const afterTimeout = () => {\r\n    delete element.dataset.timeout;\r\n    if(!forwards && className) {\r\n      element.classList.remove('backwards', className);\r\n    }\r\n\r\n    element.classList.remove('animating');\r\n    \r\n    onTransitionEnd && onTransitionEnd();\r\n  };\r\n\r\n  if(!rootScope.settings.animationsEnabled || !duration) {\r\n    element.classList.remove('animating', 'backwards');\r\n    afterTimeout();\r\n    return;\r\n  }\r\n\r\n  element.classList.add('animating');\r\n\r\n  element.classList.toggle('backwards', !forwards);\r\n  element.dataset.timeout = '' + setTimeout(afterTimeout, duration);\r\n};\r\n\r\nexport default SetTransition;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function findUpAttribute(el: any, attribute: string): HTMLElement {\r\n  return el.closest(`[${attribute}]`);\r\n  /* if(el.getAttribute(attribute) !== null) return el; // 03.02.2020\r\n\r\n  while(el.parentElement) {\r\n    el = el.parentElement;\r\n    if(el.getAttribute(attribute) !== null) \r\n      return el;\r\n  }\r\n  return null; */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MessageEntity } from \"../../layer\";\r\n\r\nexport type MarkdownType = 'bold' | 'italic' | 'underline' | 'strikethrough' | 'monospace' | 'link' | 'mentionName' | 'spoiler';\r\nexport type MarkdownTag = {\r\n  match: string,\r\n  entityName: Extract<MessageEntity['_'], 'messageEntityBold' | 'messageEntityUnderline' | 'messageEntityItalic' | 'messageEntityPre' | 'messageEntityStrike' | 'messageEntityTextUrl' | 'messageEntityMentionName' | 'messageEntitySpoiler'>;\r\n};\r\n\r\n// https://core.telegram.org/bots/api#html-style\r\nexport const markdownTags: {[type in MarkdownType]: MarkdownTag} = {\r\n  bold: {\r\n    match: '[style*=\"bold\"], [style*=\"font-weight: 700\"], [style*=\"font-weight: 600\"], [style*=\"font-weight:700\"], [style*=\"font-weight:600\"], b, strong',\r\n    entityName: 'messageEntityBold'\r\n  },\r\n  underline: {\r\n    match: '[style*=\"underline\"], u, ins',\r\n    entityName: 'messageEntityUnderline'\r\n  },\r\n  italic: {\r\n    match: '[style*=\"italic\"], i, em',\r\n    entityName: 'messageEntityItalic'\r\n  },\r\n  monospace: {\r\n    match: '[style*=\"monospace\"], [face=\"monospace\"], pre',\r\n    entityName: 'messageEntityPre'\r\n  },\r\n  strikethrough: {\r\n    match: '[style*=\"line-through\"], strike, del, s',\r\n    entityName: 'messageEntityStrike'\r\n  },\r\n  link: {\r\n    match: 'A:not(.follow)',\r\n    entityName: 'messageEntityTextUrl'\r\n  },\r\n  mentionName: {\r\n    match: 'A.follow',\r\n    entityName: 'messageEntityMentionName'\r\n  },\r\n  spoiler: {\r\n    match: '[style*=\"spoiler\"]',\r\n    entityName: 'messageEntitySpoiler'\r\n  }\r\n};\r\n\r\nconst tabulationMatch = '[style*=\"table-cell\"], th, td';\r\n\r\n/* export function getDepth(child: Node, container?: Node) {\r\n  let depth = 0;\r\n\r\n  do {\r\n    if(child === container) {\r\n      return depth;\r\n    }\r\n\r\n    ++depth;\r\n  } while((child = child.parentNode) !== null);\r\n\r\n  return depth;\r\n} */\r\n\r\nconst BLOCK_TAG_NAMES = new Set([\r\n  'DIV',\r\n  'P',\r\n  'BR',\r\n  'LI',\r\n  'SECTION',\r\n  'H6',\r\n  'H5',\r\n  'H4',\r\n  'H3',\r\n  'H2',\r\n  'H1',\r\n  'TR'\r\n]);\r\n\r\nexport default function getRichElementValue(node: HTMLElement, lines: string[], line: string[], selNode?: Node, selOffset?: number, entities?: MessageEntity[], offset = {offset: 0}) {\r\n  if(node.nodeType === 3) { // TEXT\r\n    let nodeValue = node.nodeValue;\r\n\r\n    /* const tabulation = node.parentElement?.closest(tabulationMatch + ', [contenteditable]');\r\n    if(tabulation?.getAttribute('contenteditable') === null) {\r\n      nodeValue += ' ';\r\n      // line.push('\\t');\r\n      // ++offset.offset;\r\n    } */\r\n\r\n    if(selNode === node) {\r\n      line.push(nodeValue.substr(0, selOffset) + '\\x01' + nodeValue.substr(selOffset));\r\n    } else {\r\n      line.push(nodeValue);\r\n    }\r\n\r\n    if(entities && nodeValue.length) {\r\n      if(node.parentNode) {\r\n        const parentElement = node.parentElement;\r\n        \r\n        // let closestTag: MarkdownTag, closestElementByTag: Element, closestDepth = Infinity;\r\n        for(const type in markdownTags) {\r\n          const tag = markdownTags[type as MarkdownType];\r\n          const closest = parentElement.closest(tag.match + ', [contenteditable]');\r\n          if(closest?.getAttribute('contenteditable') !== null) {\r\n            /* const depth = getDepth(closest, parentElement.closest('[contenteditable]'));\r\n            if(closestDepth > depth) {\r\n              closestDepth = depth;\r\n              closestTag = tag;\r\n              closestElementByTag = closest;\r\n            } */\r\n            continue;\r\n          }\r\n\r\n          if(tag.entityName === 'messageEntityTextUrl') {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              url: (closest as HTMLAnchorElement).href,\r\n              offset: offset.offset,\r\n              length: nodeValue.length\r\n            });\r\n          } else if(tag.entityName === 'messageEntityMentionName') {\r\n            entities.push({\r\n              _: tag.entityName,\r\n              offset: offset.offset,\r\n              length: nodeValue.length,\r\n              user_id: (closest as HTMLElement).dataset.follow.toUserId()\r\n            });\r\n          } else {\r\n            entities.push({\r\n              _: tag.entityName as any,\r\n              offset: offset.offset,\r\n              length: nodeValue.length\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    offset.offset += nodeValue.length;\r\n    return;\r\n  }\r\n\r\n  if(node.nodeType !== 1) { // NON-ELEMENT\r\n    return;\r\n  }\r\n\r\n  const isSelected = selNode === node;\r\n  const isBlock = BLOCK_TAG_NAMES.has(node.tagName);\r\n  if(isBlock && line.length) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, line.length);\r\n    ++offset.offset;\r\n  } else if(node instanceof HTMLImageElement) {\r\n    const alt = node.alt;\r\n    if(alt) {\r\n      line.push(alt);\r\n      offset.offset += alt.length;\r\n    }\r\n  }\r\n\r\n  if(isSelected && !selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  const isTableCell = node.matches(tabulationMatch);\r\n  const wasEntitiesLength = entities?.length;\r\n\r\n  let curChild = node.firstChild as HTMLElement;\r\n  while(curChild) {\r\n    getRichElementValue(curChild, lines, line, selNode, selOffset, entities, offset);\r\n    curChild = curChild.nextSibling as any;\r\n  }\r\n\r\n  if(isSelected && selOffset) {\r\n    line.push('\\x01');\r\n  }\r\n\r\n  if(isTableCell && node.nextSibling) {\r\n    line.push(' ');\r\n    ++offset.offset;\r\n\r\n    // * combine entities such as url after adding space\r\n    if(wasEntitiesLength !== undefined) {\r\n      for(let i = wasEntitiesLength, length = entities.length; i < length; ++i) {\r\n        ++entities[i].length;\r\n      }\r\n    }\r\n  }\r\n\r\n  const wasLength = line.length;\r\n  if(isBlock && wasLength) {\r\n    lines.push(line.join(''));\r\n    line.splice(0, wasLength);\r\n    ++offset.offset;\r\n  }\r\n\r\n  if(wasLength && node.tagName === 'P' && node.nextSibling) {\r\n    lines.push('');\r\n    ++offset.offset;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { MessageEntity } from \"../../layer\";\r\nimport RichTextProcessor from \"../../lib/richtextprocessor\";\r\nimport getRichElementValue from \"./getRichElementValue\";\r\n\r\nexport default function getRichValue(field: HTMLElement, withEntities = true) {\r\n  const lines: string[] = [];\r\n  const line: string[] = [];\r\n\r\n  const entities: MessageEntity[] = withEntities ? [] : undefined;\r\n  getRichElementValue(field, lines, line, undefined, undefined, entities);\r\n  if(line.length) {\r\n    lines.push(line.join(''));\r\n  }\r\n\r\n  let value = lines.join('\\n');\r\n  value = value.replace(/\\u00A0/g, ' ');\r\n\r\n  if(entities?.length) {\r\n    // ! cannot do that here because have the same check before the sending in RichTextProcessor.parseMarkdown\r\n    /* const entity = entities[entities.length - 1];\r\n    const length = value.length;\r\n    const trimmedLength = value.trimRight().length;\r\n    if(length !== trimmedLength) {\r\n      entity.length -= length - trimmedLength;\r\n    } */\r\n\r\n    RichTextProcessor.combineSameEntities(entities);\r\n    RichTextProcessor.sortEntities(entities);\r\n  }\r\n\r\n  //console.log('getRichValue:', value, entities);\r\n\r\n  return {value, entities};\r\n}\r\n\r\nMOUNT_CLASS_TO.getRichValue = getRichValue;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport getRichValue from \"./getRichValue\";\r\n\r\nexport default function isInputEmpty(element: HTMLElement) {\r\n  if(element.hasAttribute('contenteditable') || element.tagName !== 'INPUT') {\r\n    /* const value = element.innerText;\r\n\r\n    return !value.trim() && !serializeNodes(Array.from(element.childNodes)).trim(); */\r\n    return !getRichValue(element, false).value.trim();\r\n  } else {\r\n    return !(element as HTMLInputElement).value.trim();\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function replaceContent(elem: HTMLElement, node: string | Node) {\r\n  if(typeof(node) === 'string') {\r\n    elem.innerHTML = node;\r\n    return;\r\n  }\r\n\r\n  // * children.length doesn't count text nodes\r\n  const firstChild = elem.firstChild;\r\n  if(firstChild) {\r\n    if(elem.lastChild === firstChild) {\r\n      firstChild.replaceWith(node);\r\n    } else {\r\n      elem.textContent = '';\r\n      elem.append(node);\r\n    }\r\n  } else {\r\n    elem.append(node);\r\n  }\r\n}\r\n"],"names":["init","document","addEventListener","e","findUpAttribute","target","text","entities","preventDefault","plainText","originalEvent","clipboardData","getData","usePlainText","html","trim","replace","match","span","createElement","innerHTML","curChild","firstChild","nextSibling","nodeType","nodeValue","remove","richValue","getRichValue","value","length","entities2","filter","_","window","execCommand","InputState","constructor","options","this","container","classList","add","required","validate","undefined","maxLength","showLengthOn","Math","min","round","placeholder","name","canBeEdited","input","processInput","label","labelText","firstElementChild","String","observer","MutationObserver","isInputEmpty","inputFake","onFakeInput","observe","characterData","childList","subtree","animate","setAttribute","className","_i18n","border","append","setLabel","labelEl","lastElementChild","showingLength","wasError","contains","inputLength","diff","isError","toggle","select","el","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectElementContents","textContent","i18n","labelOptions","setHeight","scrollHeight","newHeight","currentHeight","style","height","transitionDuration","log","abs","setValueSilently","fireFakeInput","isChanged","originalValue","isValid","isValidToChange","setDraftValue","silent","setOriginalValue","setState","state","Error","Valid","setError","SetTransition","element","forwards","duration","onTransitionEnd","useRafs","timeout","raf","dataset","clearTimeout","cancelAnimationFrame","requestAnimationFrame","afterTimeout","setTimeout","attribute","closest","markdownTags","bold","entityName","underline","italic","monospace","strikethrough","link","mentionName","spoiler","BLOCK_TAG_NAMES","Set","getRichElementValue","node","lines","line","selNode","selOffset","offset","push","substr","parentNode","parentElement","type","tag","getAttribute","url","href","user_id","follow","toUserId","isSelected","isBlock","has","tagName","join","splice","HTMLImageElement","alt","isTableCell","matches","wasEntitiesLength","i","wasLength","field","withEntities","hasAttribute","replaceContent","elem","lastChild","replaceWith"],"sourceRoot":""}