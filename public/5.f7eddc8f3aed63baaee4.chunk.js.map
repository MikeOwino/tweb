{"version":3,"sources":["webpack:///./src/helpers/cleanUsername.ts","webpack:///./src/lib/appManagers/appUsersManager.ts","webpack:///./src/lib/storages/dialogs.ts","webpack:///./src/lib/storages/filters.ts","webpack:///./src/lib/appManagers/appMessagesManager.ts","webpack:///./src/lib/appManagers/appPeersManager.ts","webpack:///./src/lib/appManagers/appChatsManager.ts","webpack:///./src/components/peerTitle.ts","webpack:///./src/lib/appManagers/appPhotosManager.ts","webpack:///./src/lib/appManagers/appProfileManager.ts","webpack:///./src/lib/appManagers/appStickersManager.ts","webpack:///./src/lib/appManagers/apiUpdatesManager.ts","webpack:///./src/lib/appManagers/appDocsManager.ts","webpack:///./src/lib/mtproto/serverTimeManager.ts","webpack:///./src/helpers/assumeType.ts","webpack:///./src/components/visibilityIntersector.ts","webpack:///./src/components/lazyLoadQueue.ts","webpack:///./src/helpers/bytes.ts","webpack:///./src/helpers/formatPhoneNumber.ts","webpack:///./src/helpers/dom/htmlToSpan.ts","webpack:///./src/lib/appManagers/appMessagesIdsManager.ts","webpack:///./src/helpers/windowSize.ts","webpack:///./src/helpers/callbackifyAll.ts","webpack:///./src/lib/appManagers/appReactionsManager.ts","webpack:///./src/lib/appManagers/appNotificationsManager.ts","webpack:///./src/helpers/dom/renderImageFromUrl.ts","webpack:///./src/helpers/middleware.ts","webpack:///./src/helpers/fixBase64String.ts","webpack:///./src/components/preloader.ts","webpack:///./src/helpers/files.ts","webpack:///./src/lib/appManagers/appAvatarsManager.ts","webpack:///./src/lib/calls/groupCallState.ts","webpack:///./src/lib/searchIndex.ts","webpack:///./src/components/middleEllipsis.ts","webpack:///./src/lib/appManagers/appDraftsManager.ts","webpack:///./src/helpers/audioAssetPlayer.ts","webpack:///./src/lib/appManagers/appGroupCallsManager.ts","webpack:///./src/lib/calls/helpers/createMainStreamManager.ts","webpack:///./src/helpers/cleanSearchText.ts","webpack:///./src/helpers/slicedArray.ts","webpack:///./src/lib/appManagers/appPollsManager.ts","webpack:///./src/lib/calls/utils.ts","webpack:///./src/lib/calls/localConferenceDescription.ts","webpack:///./src/helpers/heavyQueue.ts","webpack:///./src/helpers/blur.ts","webpack:///./src/lib/mtproto/referenceDatabase.ts","webpack:///./src/helpers/dom/htmlToDocumentFragment.ts","webpack:///./src/lib/calls/helpers/getStream.ts","webpack:///./src/lib/calls/helpers/getVideoConstraints.ts","webpack:///./src/lib/calls/streamManager.ts","webpack:///./src/helpers/callbackify.ts","webpack:///./src/environment/vibrateSupport.ts","webpack:///./src/lib/opusDecodeController.ts","webpack:///./src/environment/webmSupport.ts","webpack:///./src/lib/appManagers/appWebPagesManager.ts","webpack:///./src/environment/imageMimeTypesSupport.ts","webpack:///./src/lib/calls/constants.ts","webpack:///./src/lib/calls/helpers/stopTrack.ts","webpack:///./src/lib/calls/helpers/getScreenStream.ts","webpack:///./src/lib/calls/helpers/getStreamCached.ts","webpack:///./src/lib/calls/callInstanceBase.ts","webpack:///./src/lib/calls/sdp/index.ts","webpack:///./src/helpers/string/splitStringByLimitWithRest.ts","webpack:///./src/helpers/uniqueNumberGenerator.ts","webpack:///./src/lib/calls/sdp/attributeSplitted.ts","webpack:///./src/lib/calls/sdp/mediaLineParts.ts","webpack:///./src/lib/calls/sdp/line.ts","webpack:///./src/lib/calls/sdp/attributeInner.ts","webpack:///./src/lib/calls/sdp/attributes.ts","webpack:///./src/lib/calls/sdp/mediaSection.ts","webpack:///./src/lib/calls/sdp/sessionSection.ts","webpack:///./src/lib/calls/sdp/utils.ts","webpack:///./src/lib/calls/helpers/parseMediaSectionInfo.ts","webpack:///./src/lib/calls/helpers/parseSourceGroups.ts","webpack:///./src/lib/calls/helpers/fixLocalOffer.ts","webpack:///./src/lib/calls/groupCallConnectionInstance.ts","webpack:///./src/lib/calls/callConnectionInstanceBase.ts","webpack:///./src/lib/calls/helpers/createPeerConnection.ts","webpack:///./src/lib/calls/helpers/createDataChannel.ts","webpack:///./src/lib/calls/helpers/processMediaSection.ts","webpack:///./src/lib/calls/helpers/filterServerCodecs.ts","webpack:///./src/lib/calls/groupCallInstance.ts","webpack:///./src/lib/calls/helpers/getScreenConstraints.ts","webpack:///./src/vendor/leemon.ts","webpack:///./src/lib/mtproto/bin_utils.ts","webpack:///./src/helpers/formatCallDuration.ts","webpack:///./src/helpers/formatDuration.ts","webpack:///./src/environment/movSupport.ts","webpack:///./src/environment/videoMimeTypesSupport.ts","webpack:///./src/lib/calls/helpers/getAudioConstraints.ts","webpack:///./src/environment/constraintSupport.ts","webpack:///./src/lib/calls/sdpBuilder.ts","webpack:///./src/lib/calls/stringFromLineBuilder.ts"],"names":["cleanUsername","username","toLowerCase","appUsersManager","storage","appStateManager","storages","users","updateUsersStatuses","timestampNow","i","this","user","updateUserStatus","clear","setInterval","rootScope","addEventListener","addMultipleEventsListeners","update","userId","user_id","status","expires","serverTimeManager","serverTimeOffset","was_online","dispatchEvent","setUserToStateIfNeeded","updateUserPhoto","photo","photo_id","forceUserOnline","date","_","toPeerId","console","warn","updateUserName","saveApiUser","Object","assign","first_name","last_name","e","getSelf","id","contactsIndex","indexObject","getUserSearchText","getState","then","state","storagesResults","length","setUserNameToCache","contactsList","Array","isArray","forEach","pushContact","contactsFillPromise","resolve","peerId","appPeersManager","isUser","toUserId","getFromCache","set","getUser","delete","init","usernames","isPeerNeeded","findAndSplice","getTopPeersPromises","createSearchIndex","undefined","Set","updatedContactsList","pushToState","cached","isFulfilled","promise","invokeApi","result","saveApiUsers","contacts","contact","onContactsModified","slice","Promise","resolvedPeer","appChatsManager","saveApiChats","chats","getPeer","getPeerId","peer","add","requestPeerSingle","releaseSinglePeer","phone","pFlags","self","format","filter","Boolean","join","query","includeSaved","sortBy","fillContacts","_contactsList","results","search","has","sort","userId1","userId2","sortName1","sortName","sortName2","localeCompare","status1","getUserStatusForSort","myUserId","myId","testSelfSearch","unshift","getContacts","userIds","map","block","invokeApiSingle","getInputPeerById","value","apiUpdatesManager","processLocalUpdate","peer_id","getOutputPeer","blocked","index","clearBadChars","ignoreCase","latinize","includeTag","apiUsers","override","saved","oldUser","oldSearchUsername","searchUsername","min","initials","fullName","deleted","cleanSearchText","getAbbreviation","changedPhoto","changedTitle","wasContact","newContact","onContactUpdated","formatPhoneNumber","formatted","access_hash","key","args","isBot","support","today","Date","diff","getTime","getDate","dateEl","timeEl","bot","isRegularUser","isContact","allowMin","phone_number","vcard","eventTimestamp","timestamp","updatesState","syncLoading","importContacts","phones","error","Error","type","inputContacts","j","push","client_id","toString","importedContactsResult","imported","importedContact","topPeersCache","cachedTime","now","peers","offset","limit","hash","topPeers","categories","topPeer","requestPeer","rating","contactsBlocked","count","peerIds","u","concat","c","lat","long","accuracy_radius","background","self_expires","geo_point","updates","processUpdateMessage","entities","parseEntities","trim","path","URL","wrapUrl","url","pathname","err","invokeApiCacheable","q","cacheSeconds","my_results","p","curIsContact","popContact","offline","showPhone","getUserInput","add_phone_privacy_exception","restrictionReasons","restriction_reason","restricted","appMessagesManager","appDraftsManager","appNotificationsManager","appMessagesIdsManager","folders","onUpdateFolderPeers","folder_peers","folderPeer","folder_id","dialog","dropDialog","pinned","handleDialogUnpinning","generateIndexForDialog","pushDialog","scheduleHandleNewDialogs","onUpdateDialogPinned","folderId","getDialogOnly","onUpdatePinnedDialogs","handleOrder","order","pinnedOrders","reverse","newPinned","dialogs","getFolderDialogs","dialogsResult","applyDialogs","d","getCache","peerText","getPeerSearchText","dialogsIndex","onFilterUpdate","getCachedDialogs","processDialogForFilter","filterId","processDialogForFilters","indexKey","orderIndex","chatId","chat","getChat","left","dropDialogOnDeletion","updateFolderPeers","updateDialogPinned","updatePinnedDialogs","freezeSaving","setDialogsFromState","bind","allDialogsLoaded","top_message","getServerMessageId","topMessage","saveMessages","saveDialog","getMessageByPeer","reloadConversation","loaded","0","1","setDialogsLoaded","savePinnedOrders","dialogsOffsetDate","dialogsNum","cachedResults","offsetDate","Math","getOffsetDate","unreadMessagesCount","unreadDialogsCount","skipMigrated","folder","getFolder","migratedTo","filtersStorage","testDialogForFilter","pinnedIndex","pinnedPeerIds","indexOf","generateDialogIndex","generateDialogPinnedDateByIndex","pinned_peers","skipped","isPinned","filters","getDialogIndexKey","wasIndex","findIndex","wasDialog","wasDialogIndex","newDialogIndex","setDialogIndexInFilter","prepareFolderUnreadCountModifyingByDialog","splice","callbacks","callback","toggle","wasUnreadCount","getDialogUnreadCount","newUnreadCount","addMessagesCount","addDialogsCount","modifyFolderUnreadCount","max","dispatchUnreadTimeout","ctx","setTimeout","justReturn","message","topDate","generateDialogPinnedDate","channelId","isChannel","toChatId","channel","draft","foundIndex","pts","historyStorage","getHistoryStorage","messagesStorage","getMessagesStorage","history","incomingMessage","mid","getMessageFromStorage","is_outgoing","fromId","viaBotId","isAnyChat","newPts","getChannelState","ignoreOffsetDate","saveGlobalOffset","pos","setDialogToState","getDialogOffsetDate","savedGlobalOffsetDate","savedOffsetDate","isDialogsLoaded","clearDialogFromState","foundDialog","getDialog","wasPinned","keepLocal","dropped","dropDialogWithEvent","idx","messages","updatedDialogs","topPendingMessage","pendingTopMsgs","maxId","newUpdatesAfterReloadToHandle","saveUpdate","size","keys","kicked","wasDialogBefore","generateMessageId","wasTopMessage","generateTempMessageId","from_id","out","isOutgoing","log","migrated_to","deactivated","migratedToPeer","migratedFromTo","migratedToFrom","read_inbox_max_id","read_outbox_max_id","saveDraft","isOut","unread","unread_count","isEnd","Bottom","insertSlice","setEnd","mergeReplyKeyboard","readMaxId","readOutboxMaxId","savePeerSettings","settings","notify_settings","addChannelState","getFilter","offsetIndex","ret","promises","fillContactsResult","reloadMissingDialogsPromise","reloadMissingPeerIds","all","getDialogs","realFolderId","curDialogStorage","indexStr","d1","d2","loadedAll","isEnoughDialogs","isTopEnd","getTopMessages","convertment","onUpdateDialogFilter","saveDialogFilter","onUpdateDialogFilterOrder","setOrderIndex","hasOwnProperty","updateDialogFilter","updateDialogFilters","oldFilters","getDialogFilters","_filterId","find","updateDialogFilterOrder","reloadedPeerIds","excludePeerIds","includes","includePeerIds","exclude_archived","exclude_read","isDialogUnread","exclude_muted","isPeerLocalMuted","unread_mentions_count","broadcasts","isBroadcast","groups","isAnyGroup","bots","non_contacts","config","pinned_infolder_count_max","reject","prepend","remove","flags","getOutputDialogFilter","bool","f","a","b","filterIncludedPinnedPeers","include_peers","reloadDialogs","inputPeer","reloadPromises","reloadPromise","overwrite","from","to","oldFilter","pendingByRandomId","pendingByMessageId","pendingAfterMsgs","tempFinalizeCallbacks","sendSmthLazyLoadQueue","needSingleMessages","Map","fetchSingleMessagesPromise","maxSeenId","newMessagesHandleTimeout","newMessagesToHandle","newDialogsToHandle","notificationsHandlePromise","notificationsToHandle","reloadConversationsPeers","logger","Debug","Log","Warn","groupedTempId","typings","unreadMentions","goToNextMentionPromises","handleNewMessages","clearTimeout","handleNewDialogs","newMaxSeenId","obj","dialogsStorage","incrementMaxSeenId","handleNotifications","window","_peerId","idle","isIDLE","notifyPeerToHandle","getNotifyPeerSettings","muted","peerTypeNotifySettings","notifyAboutMessage","fwdCount","onUpdateMessageId","randomId","random_id","pendingData","tempId","threadId","finalizePendingMessageCallbacks","onUpdateNewMessage","getMessagePeer","isLocalThreadUpdate","threadKey","getThreadKey","split","threadsStorage","good","isInChat","ignoreExisting","pendingMessage","checkPendingMessage","updateMessageRepliesIfNeeded","findSlice","firstSlice","first","action","channel_id","top_msg_id","chat_id","handleNewMessage","inboxUnread","releaseUnreadCount","prepareDialogUnreadCountModifying","mentioned","modifyCachedMentions","setDialogTopMessage","notifyPeer","fwd_from","onUpdateMessageReactions","msg_id","reactions","recentReactions","recent_reactions","recentReaction","previousReactions","previousRecentReactions","show_previews","userReaction","previousResults","changedResults","reactionCount","previousReactionCount","_reactionCount","reaction","chosen","local","setDialogToStateIfMessageIsTop","onUpdateDialogUnreadMark","unread_mark","onUpdateEditMessage","oldMessage","newMessage","handleEditedMessage","isTopMessage","clear_history","newReactions","grouped_id","onUpdateReadHistory","max_id","read_max_id","stillUnreadCount","still_unread_count","newUnreadMentionsCount","foundAffected","repliesKey","threadsToReplies","updateMessage","get","replyTo","reply_to","reply_to_top_id","reply_to_msg_id","cancel","setCount","getReadMaxIdIfUnread","threadKeyPart","onUpdateReadMessagesContents","mids","getMessageById","fixDialogUnreadMentionsIfNoMessage","media_unread","onUpdateChannelAvailableMessages","availableMinId","available_min_id","onUpdateDeleteMessages","clearCache","params","threadKeys","historyUpdated","handleDeletedMessages","threadsStorages","msgs","affected","onUpdateChannel","needDialog","historiesStorage","onUpdateChannelReload","onUpdateChannelMessageViews","views","onUpdateServiceNotification","messageId","inbox_date","media","hasUser","verified","pts_count","onUpdatePinnedMessages","missingMessages","wrapSingleMessage","finally","werePinned","pinnedMessages","hiddenPinnedMessages","onUpdateNotifySettings","onUpdateNewScheduledMessage","scheduledMessagesStorage","isScheduled","onUpdateDeleteScheduledMessages","updateMessageID","updateNewDiscussionMessage","updateNewMessage","updateNewChannelMessage","updateDialogUnreadMark","updateEditMessage","updateEditChannelMessage","updateMessageReactions","updateReadChannelDiscussionInbox","updateReadChannelDiscussionOutbox","updateReadHistoryInbox","updateReadHistoryOutbox","updateReadChannelInbox","updateReadChannelOutbox","updateChannelReadMessagesContents","updateReadMessagesContents","updateChannelAvailableMessages","updateDeleteMessages","updateDeleteChannelMessages","updateChannel","updateChannelReload","updateChannelMessageViews","updateServiceNotification","updatePinnedMessages","updatePinnedChannelMessages","updateNotifySettings","updateNewScheduledMessage","updateDeleteScheduledMessages","filterFunc","getScheduledMessagesStorage","webpage","appWebPagesManager","getWebPage","drop","poll","appPollsManager","pollToMessages","maxSeenMsgId","middleware","clean","messagesStorageByPeerId","groupedMessagesStorage","searchesStorage","threadsServiceMessagesIdsStorage","sendEntites","entity","callbackName","finalize","deferred","text","options","invokeAfterMessageIsSent","editMessage","parseMarkdown","schedule_date","scheduleDate","is_scheduled","newMedia","getInputEntities","no_webpage","noWebPage","handled","replyToMsgId","MAX_LENGTH","message_length_max","splitted","webPage","sendText","getPeerMigratedTo","generateOutgoingMessage","toggleError","on","send","sentRequestOptions","apiPromise","afterMessageId","invokeApiAfter","query_id","queryId","resultId","clear_draft","clearDraft","silent","wrapMessageEntities","seq","beforeMessageSending","file","attachType","apiFileName","fileType","mime_type","fileName","File","name","isDocument","Blob","caption","attributes","isPhoto","document","actionName","isVoiceMessage","attribute","voice","waveform","duration","isMedia","photoSize","w","width","h","height","location","sizes","cacheContext","appDownloadManager","getCacheContext","downloaded","objectURL","appPhotosManager","savePhoto","videoAttribute","round_message","isRoundMessage","supports_streaming","noSound","file_name","thumbs","thumb","blob","thumbCacheContext","appDocsManager","saveDoc","preloader","attachMethod","tryAgainOnFail","isUpload","sentDeferred","attachPromise","catch","uploaded","cancelPendingMessage","setTyping","uploadPromise","file_reference","inputMedia","load","thumbUploadPromise","upload","notifyAll","done","total","inputFile","force_file","addNotifyListener","progress","percents","floor","isGroupedItem","code","files","sendFile","sendFileDetails","groupId","details","o","invoke","multiMedia","multi_media","messageMedia","getMediaInput","doc","inputSingleMedia","inputs","contactPeerId","sendOther","getContactMediaInput","pollId","savePoll","total_voters","recent_voters","getPoll","getPhoto","getDoc","geo","geoPoint","title","address","provider","venue_id","venue_type","postAuthor","signatures","generateFromId","post_author","generateFlags","random","generateReplyHeader","via_bot_id","reply_markup","replyMarkup","replies","generateReplies","pending","replyToTopId","header","channelFull","appProfileManager","getCachedFullChat","linked_chat_id","comments","replies_pts","isAnonymousSending","post","originalMessage","fwdHeader","isUserHidden","from_name","userFull","getCachedFullUser","private_forward_name","channel_post","saved_from_msg_id","saved_from_peer","Number","MAX_SAFE_INTEGER","admin_rights","anonymous","chatHistoryStorage","offset_date","offset_id","offset_peer","offsetPeerId","noErrorBox","resetPinnedOrder","telegramMeWebManager","setAuthorized","maxSeenIdIncremented","hasPrepend","noIdsDialogs","setFolderId","folderDialogs","dialogsLength","slicedDialogs","fromPeerId","dropCaptions","dropAuthor","newMessages","generateForwardHeader","group","from_peer","to_peer","with_my_score","withMyScore","drop_author","drop_media_captions","generateEmptyMessage","createMessageStorage","inputDialogPeer","getInputDialogPeerById","reloadConversationsPromise","inputDialogPeers","fullfillLeft","just_clear","revoke","affectedHistory","doFlushHistory","justClear","getHistory","historyResult","getChannelInput","s","m","ss","getPinnedMessage","getSearch","inputFilter","unpin","pm_oneside","unpinAll","unpinAllMessages","totalEntities","foundMessages","minMid","getMidsByAlbum","verify","isMessage","reply_to_mid","overwriting","msgId","savedFromPeerId","savedFromMid","savedFrom","fwdFromId","mediaContext","unsupported","ttl_seconds","originalDoc","messageKey","getMessageKeyForPendingWebPage","saveWebPage","migrateFrom","migrateTo","suffix","video_sizes","appGroupCallsManager","saveGroupCall","call","video","reason","migrateChecks","saveMessage","apiEntities","fixEmoji","myEntities","mergeEntities","usingMids","plain","highlightWord","withoutMediaType","parts","hasAlbumKey","addPart","langKey","part","el","createElement","innerHTML","append","isRestricted","assumeType","usingFullAlbum","getMidsByMessage","albumText","getAlbumText","emoticon","wrapEmojiText","question","rReply","game","stickerEmojiRaw","stickerEmoji","performer","actionWrapped","wrapMessageActionTextNew","wrapPlainText","match","found","regExp","RegExp","exec","sortEntities","messageWrapped","wrapRichText","noLinebreaks","noLinks","noTextFormat","htmlToDocumentFragment","fragment","createDocumentFragment","senderTitle","classList","fromMe","getMessageSenderPeerIdOrName","element","peerTitle","fromName","onclick","href","setAttribute","unsafeMessage","langPackKey","getNameDivHTML","getPeerTitle","formatCallDuration","endsWith","wrapJoinVoiceChatAnchor","daysToStart","tomorrowDate","setDate","k","_args","IntlDateElement","day","month","year","t","pinnedMessage","fetchMessageReplyTo","isMessageIsTopMessage","dataset","dir","wrapMessageForReply","htmlToSpan","joined","anchorHTML","domain","langPack","wrapMessageActionTextNewUnsafe","botId","startParam","start_param","inviteToChannel","addChatUser","str","toggleDialogPin","pinned_dialogs_count_max","getPinnedOrders","getDialogPeer","read","hasChat","fromChat","kind","goodMedias","sticker","canMessageBeEdited","edit_time_limit","hasRights","messageReplyMarkup","lastReplyMarkup","selective","maxOutId","single_use","hidden","canCache","func","foundMsgs","filtering","neededContents","neededDocTypes","excludeDocTypes","goodEntities","matchUrl","nextRate","backLimit","minDate","maxDate","offset_id_offset","next_rate","filterMessagesByInputFilter","method","min_date","max_date","add_offset","min_id","offsetId","offsetMessage","offset_rate","searchResult","foundCount","getDiscussionMessage","maxMessageId","serviceStartMessage","is_single","filterMessages","generateThreadServiceStartMessage","newDialogsHandlePromise","localMessageIds","creator","delete_messages","affectedMessages","force","triedToReadMaxId","readPromise","soundReset","getPeerString","readHistory","slicedArray","Top","fixUnreadMentionsCountIfNeeded","loadNextPromise","loadNextMentions","last","getUnreadMentions","mergeHistoryResult","minId","messagesMessages","msgIds","getNotifyPeerTypeSettings","getNotifySettings","getInputNotifyPeerById","threadMessage","broadcastEventName","finalizePendingMessage","muteUntil","mute_until","mute","mutePeer","canSendToUser","finalMessage","tempMessage","newPhoto","newDoc","newPhotoSize","oldCacheContext","downloadOptions","getPhotoDownloadOptions","fakeDownload","getInputFileName","polls","handleReleasingMessage","skipReadParticipants","skipReactionsList","emptyMessageReactionsList","next_offset","canViewMessageReadParticipants","getMessageReadParticipants","appReactionsManager","getMessageReactionsList","messageReactionsList","readParticipantsPeerIds","filteredReadParticipants","arr","some","combined","readPeerId","reactionsCount","readParticipants","nextOffset","participants_count","appConfig","chat_read_mark_size_threshold","chat_read_mark_expire_period","increment","notification","peerString","notificationMessage","tag","peerPhoto","getPeerPhoto","appAvatarsManager","loadAvatar","loadPromise","image","notify","canSendToPeer","isFetchIntervalNeeded","unsetEnd","Both","offsetIdOffset","haveSlice","sliceMe","fulfilled","fillHistoryStorage","constructSlice","topWasMeantToLoad","isBottomEnd","isHistoryResultEnd","requestHistory","oldestMessage","foundSlice","_historyResult","requestPromises","after","getMessagesResult","fetchSingleMessages","replyToPeerId","reply_to_peer_id","typing","timeout","smth","referenceDatabase","deleteContext","deleteWebPageFromPending","updatePollToMessage","groupedId","groupedStorage","albums","peerMessagesToHandle","deletedMids","noforwards","noForwards","DialogColorsFg","DialogColors","DialogColorsMap","newMethod","originMethod","String","prototype","getUserPhoto","getChatPhoto","plainText","onlyFirstName","getUserString","getChatString","isPeerId","charAt","peerParams","substr","isMegagroup","ignorePeerId","getInputPeer","getUserInputPeer","pic","abs","getDialogType","getChatTyped","onChatUpdated","updateChannelParticipant","updateChatDefaultBannedRights","default_banned_rights","apiChats","saveApiChat","oldChat","rights","defaultRights","isThread","isCheckingRightsForSelf","megagroup","banned_rights","myFlags","post_messages","broadcast","until_date","getChannelInputPeer","getChatInputPeer","input","usersInputs","fwdLimit","fwd_limit","deleteChatUser","leaveChannel","leaveChat","deleteChannel","deleteChat","inputChatPhoto","about","participant","getParticipantPeerId","actor_id","qts","prev_participant","new_participant","kicked_by","editBanned","view_messages","kickFromChannel","messagesChats","enabled","migrateChat","available_reactions","weakMap","WeakMap","peerTitleWeakMap","querySelectorAll","PeerTitle","AppPhotosManager","photos","context","oldPhoto","saveContext","boxWidth","boxHeight","useBytes","pushDocumentSize","devicePixelRatio","bestPhotoSize","inputUser","photosResult","photoIds","bytes","isSticker","mimeType","Uint8Array","jpegHeader","jpegTail","createObjectURL","num","getPreviewURLFromBytes","useBlur","getPreviewURLFromThumb","Image","noZoom","choosePhotoSize","boxSize","aspect","isFit","aspectCovered","style","ignoreCache","getImageFromStrippedThumb","queueId","onlyCache","thumb_size","dcId","dc_id","photoId","fullWidth","fullHeight","download","getDownload","getInput","fullPhotoSize","downloadToDisc","AppProfileManager","usersFull","chatsFull","onUpdateUserTyping","typingsInPeer","cancelAction","getChatFull","onUpdatePeerBlocked","updateChatParticipants","participants","chatFull","updateChatParticipantAdd","_participants","inviter_id","version","updateChatParticipantDelete","updateUserTyping","updateChatUserTyping","updateChannelUserTyping","updatePeerBlocked","fullChat","updated","call_active","chat_photo","refreshFullPeer","invalidateChannelParticipants","invokeApiSingleProcess","processResult","usersUserFull","full_user","profile_photo","getProfile","profile","getProfileByPeerId","getChannelFull","full_chat","exported_invite","link","exportedInvite","channelParticipant","fullChannel","processError","getChannelParticipants","cP","getTopPeers","ratingMap","processUserIds","updateResult","previous","deletedList","reduce","acc","verifyParticipantForOnlineCount","chatInfo","channelParticipants","reduceParticipantsForOnlineCount","res","onlines","LOCAL_IDS_SET","appStickersManager","getStickerSetPromises","getStickersByEmoticonsPromises","sounds","getAnimatedEmojiStickerSet","updateNewStickerSet","stickerSet","stickerset","saveStickerSet","getGreetingStickersTimeout","getGreetingSticker","justPreload","getGreetingStickersPromise","getStickersByEmoticon","docs","greetingStickers","shift","downloadDoc","cachedSet","documents","refreshTime","useCache","saveStickers","getStickerSetInput","saveById","getStickerSet","getAnimatedEmojiSounds","emoji","animations","getAnimatedEmojiSoundsPromise","getAppConfig","emojies_sounds","sound","bytesStr","atob","file_reference_base64","charCodeAt","this_dc","invokeApiHashable","stickers","replace","isAnimation","cleanEmoji","pack","packs","preloadEmojiPromise","getAnimatedEmojiSticker","mediaSize","active","emojiSticker","toneIndex","animation","loadAnimationWorker","container","animationData","autoplay","loop","saveLottiePreview","canvas","once","preloadAnimatedEmojiStickerAnimation","soundDoc","getAnimatedEmojiSoundDocument","newSet","setToCache","needSave","installed_date","thumb_dc_id","isAnimated","animated","thumb_version","short_name","sets","covered","videos","archived","excludeFeatured","exclude_featured","foundSaved","cache","cover","allStickers","getAllStickers","includeOurStickers","preloadStickerSets","getRecentStickers","messagesStickers","installedSets","recentStickers","foundStickers","cachedStickersAnimated","cachedStickersStatic","iteratePacks","docId","docEmoticon","_doc","pendingPtsUpdates","pendingSeqUpdates","syncPending","channelStates","attached","debug","processOpts","seqStart","seq_start","forceGetDifference","processUpdate","toId","Proxy","target","saveUpdatesState","us","nextSeq","pendingUpdatesData","popPendingSeqUpdate","seqAwaiting","ptsAwaiting","curState","curPts","goodPts","goodIndex","getDifference","wasSyncing","pts_total_limit","differenceResult","other_updates","new_messages","apiMessage","nextState","intermediate_state","justAName","channelState","getChannelDifference","lastPtsUpdateTime","popPts","popSeq","popPendingPtsUpdate","newVersion","stateResult","setUpdatesProcessor","setProxy","fetch","ok","EXTENSION_MIME_TYPE_MAP","mov","gif","pdf","savingLottiePreview","downloading","onServiceWorkerFail","supportsStreaming","oldDoc","audioTitle","audioPerformer","alt","stickerSetInput","ext","pop","mappedMimeType","monthAsNumber","leadingZero","isServiceWorkerOnline","getFileURL","thumbSize","inputFileLocation","getFileDownloadOptions","preloadPhoto","tryNotToUseBytes","getThumbURL","originalPromise","isPlaySupported","reader","FileReader","onloadend","uint8","decode","readAsArrayBuffer","stickerCachedThumbs","toBlob","createDownloadAnchor","addTaskListener","task","payload","x","VisibilityIntersector","onVisibilityChange","items","locked","observer","IntersectionObserver","entries","changed","entry","isIntersecting","visible","getVisible","disconnect","targets","observe","unobserve","unlock","refresh","parallelLimit","queue","inProcess","lockPromise","unlockResolve","processQueue","throttle","_processQueue","item","loadItem","getItem","processItem","addElement","super","lock","intersector","unlockAndRefresh","div","intersectorTimeout","wasSeen","setProcessQueueTimeout","_queue","spliced","bytesToHex","bytesFromHex","hexString","len","ceil","start","parseInt","bytesToBase64","mod3","nLen","nUint24","nIdx","fromCharCode","uint6ToBase64","nUint6","bytesCmp","bytes1","bytes2","bufferConcats","v","byteLength","tmp","lastLength","ArrayBuffer","prefixes","maxPrefixLength","setPrefix","country","prefix","country_code","originalStr","countriesList","country_codes","prefixCountry","phoneCode","leftPattern","patterns","searchForPattern","pattern","mostMatchedPatternMatches","mostMatchedPattern","_pattern","patternMatches","symbol","html","span","AppMessagesIdsManager","tempNum","temp","MESSAGE_ID_OFFSET","MESSAGE_ID_INCREMENT","clearMessageId","toServer","l","used","windowSize","visualViewport","innerWidth","innerHeight","callbackifyAll","values","SAVE_DOC_KEYS","REFERENCE_CONTEXT","availableReactions","getAvailableReactions","sendReactionPromises","lastSendingTimes","availableReaction","around_animation","static_icon","appear_animation","center_icon","messagesAvailableReactions","callbackify","inactive","activeAvailableReactions","getActiveAvailableReactions","unshiftQuickReaction","getQuickReaction","quickReaction","filteredChatAvailableReactions","unshiftQuickReactionInner","getAvailableReactionsForPeer","reactions_default","getReactionCached","onlyLocal","lastSendingTimeKey","myPeerId","chosenReactionIdx","chosenReaction","can_see_list","reactionCountIdx","indexes","promiseKey","editMessageUpdateIdx","editMessageUpdate","sendReaction","notificationsShown","notificationIndex","notificationsCount","soundsPlayed","vibrateSupport","peerSettings","notifyUsers","notifyChats","notifyBroadcasts","faviconEl","head","querySelector","titleBackup","titleChanged","stopped","pushInited","updateLocalSettings","updSettings","nodesktop","volume","novibrate","nopreview","nopush","needPush","isAvailable","registeredDevice","subscribe","unsubscribe","setSettings","nosound","notifications","checkMuteUntil","checkMuteUntilTimeout","closestMuteUntil","peerNotifySettings","requestPermission","Notification","removeEventListener","navigator","vibrate","mozVibrate","webkitVibrate","notificationsUiSupport","topMessagesDeferred","notifySoundEl","body","checkMuteUntilThrottled","stop","newVal","toggleToggler","tokenData","unregisterDevice","registerDevice","notificationData","period","custom","enable","resetTitle","setFavicon","clearInterval","titleInterval","getContext","beginPath","arc","PI","fillStyle","fill","fontSize","font","textBaseline","textAlign","fillText","toDataURL","getNotifyPeerTypePromise","inputKey","compare_sound","notifyContactsSignUp","prevFavicon","cloneNode","parentNode","replaceChild","isMuted","respectType","n","notifySettings","inputNotify","typeNotifySettings","getPeerLocalSettings","permission","data","testSound","icon","setLocalNotificationsDisabled","close","focus","onclose","show","hide","nextSoundAt","prevSoundVolume","filename","audio","hidePushNotifications","token_type","tokenType","token","tokenValue","other_uids","app_sandbox","secret","loadedURLs","elem","HTMLImageElement","HTMLVideoElement","src","SVGImageElement","setAttributeNS","backgroundImage","renderImageFromUrl","isImage","loader","renderImageFromUrlPromise","getMiddleware","cleanupObj","cleaned","additionalCallback","_cleanupObj","fixBase64String","toUrl","ProgressivePreloader","detached","cancelable","streamable","onClick","contains","loadFunc","color","bold","constructContainer","construct","totalLength","downloadSvg","lastElementChild","cancelSvg","previousElementSibling","circle","firstElementChild","setProgress","startTime","onEnd","elapsedTime","delay","TRANSITION_TIME","detach","attach","parentElement","setManual","reset","useRafs","getTotalLength","strokeDasharray","createPosterFromMedia","videoWidth","videoHeight","naturalWidth","naturalHeight","quality","aspectFitted","drawImage","createPosterFromVideo","onseeked","currentTime","onerror","createPosterForVideo","preloadVideo","race","onMediaLoad","readyState","HAVE_METADATA","useCanplayOnIos","getFilesFromEvent","onlyTypes","scanFiles","isDirectory","directoryReader","createReader","readEntries","itemFile","getAsFile","DataTransferItem","DragEvent","dataTransfer","clipboardData","originalEvent","webkitGetAsEntry","requestFile","accept","display","click","savedAvatarURLs","getAvatarPromise","peerPhotoFileLocation","big","img","onlyThumb","renderThumbPromise","thumbImage","animate","animationsEnabled","putAvatar","stripped_thumb","childElementCount","mutateElement","renderPromise","isDialog","getPeerColorById","avatarAvailable","avatarRendered","abbr","GROUP_CALL_STATE","SearchIndex","minChars","fullTexts","searchText","newFoundObjs","queryWords","queryWordsLength","fullText","what","foundChars","word","fullTextLength","testQueue","fontFamily","timeoutId","setTestQueue","cancelAnimationFrame","requestAnimationFrame","testQueueElements","testElement","capture","passive","mapped","firstTime","textLength","multiplier","textWidth","elementWidth","textContent","fontWeight","getTextWidth","getBoundingClientRect","newElementWidth","widthChanged","smallerText","smallerWidth","smallerTextLength","half","half1","half2","removeAttribute","measureText","MiddleEllipsisElement","HTMLElement","customElements","define","drafts","getAllDraftPromise","updateDraftMessage","peerID","getKey","getAllDrafts","apiDraft","processApiDraft","draft1","draft2","rMessage","wrapDraftText","localDraft","saveOnServer","serverDraft","getDraft","draftsAreEqual","draftObj","isEmptyDraft","saveLocalDraft","emptyDraft","syncDraft","AudioAssetPlayer","assets","createAudio","play","Audio","pause","playSound","makeSsrcsFromParticipant","makeSsrcFromParticipant","source","audio_source","source_groups","endpoint","presentation","groupCalls","nextOffsets","updateGroupCall","updateGroupCallParticipants","groupCallId","saveApiParticipants","groupCall","currentGroupCall","hangUp","audioAsset","nextOffsetsMap","setNextOffset","newNextOffset","skipCounterUpdating","getCachedParticipants","oldParticipant","hasLeft","can_self_unmute","isCurrentGroupCall","onParticipantUpdate","doNotDispatchParticipantUpdate","getGroupCall","modified","just_joined","apiParticipants","saveApiParticipant","isUpdatingMeInCurrentCall","isSharingAudio","raiseHand","raise_hand_rating","videoStopped","generateSelfVideo","connections","main","sources","setMuted","getGroupCallInput","getInputPeerSelf","raise_hand","video_paused","videoPaused","video_stopped","presentation_paused","presentationPaused","participants_next_offset","oldCall","shouldUpdate","stopConnectingSound","playSoundWithTimeout","stopSound","cancelDelayedPlay","rejoin","joinVideo","streamManager","constraints","getAudioConstraints","getVideoConstraints","stream","getStream","addStream","inputStream","MediaStream","createMainStreamManager","joinGroupCallInternal","bindPrefix","fixSafariAudio","CLOSED","setCurrentGroupCall","getGroupCallFull","connectionInstance","createConnectionInstance","connection","createPeerConnection","negotiate","event","onTrack","iceConnectionState","startConnectingSound","getGroupCallParticipants","createDescription","createDataChannel","appendStreamToConference","handleUpdateGroupCallParticipants","updatingSdp","audioSource","sourceGroups","mainSources","presentationSources","tsNow","prepareToSavingNextOffset","ids","groupCallParticipants","discard","changeUserMuted","getParticipantByPeerId","editParticipant","badCharsRe","trimRe","clearBadCharsAndTrim","latinizeString","ch","latinizeCh","LatinizeMap","hasTag","processSearchText","SliceEnd","SlicedArray","sliceConstructor","getSliceConstructor","slices","end","None","side","deleteCount","flatten","lowerBound","upperBound","lowerIndex","upperIndex","foundSliceIndex","sliced","insertIndex","prevSlice","nextSlice","sliceOffset","findSliceOffset","sliceStart","sliceEnd","bottomWasMeantToLoad","topFulfilled","bottomFulfilled","updateMessagePoll","poll_id","saveResults","rQuestion","chosenIndexes","answer","correctAnswers","solution","solutionEntities","correct_answers","solution_entities","optionIds","answers","option","sendVote","votesList","closed","newPoll","getInputMediaPoll","toTelegramSource","fromTelegramSource","getAmplitude","array","scale","rms","sqrt","ConferenceEntry","port","direction","originalDirection","setDirection","transceiver","addTransceiver","isAnswer","generateSsrc","LocalConferenceDescription","sessionId","entriesByMid","entriesBySource","entriesByPeerId","setSource","setPeerId","isSending","sendEntry","recvEntry","createEntry","fromConference","conference","heavyQueue","processingQueue","addHeavyTask","processHeavyQueue","todo","performance","possiblePromise","process","apply","realResult","timedChunk","isFilterAvailable","requireBlurPromise","fastBlurFunc","processBlurNext","radius","iterations","alpha","default","blurPromises","dataUri","onload","contexts","links","originalPayload","refreshReference","postMessage","reference","getContexts","_context","getReferenceByLink","next","refreshEmojiesSoundsPromise","hex","newHex","newContext","template","content","mediaDevices","getUserMedia","getTracks","frameRate","AudioStreamAnalyser","streamSource","createMediaStreamSource","analyser","createAnalyser","gain","createGain","minDecibels","maxDecibels","smoothingTimeConstant","fftSize","connect","StreamManager","interval","streamAnalyser","track","frequencyBinCount","getByteFrequencyData","analyse","counter","amplitudes","AudioContext","webkitAudioContext","outputStream","canCreateConferenceEntry","addTrack","getSource","itemSource","removeTrack","finalizeAddingTrack","changeTimer","substring","oldTrack","timer","lol","transceiverInit","streams","types","tracks","findEntry","createTransceiver","sender","replaceTrack","IS_VIBRATE_SUPPORTED","opusDecodeController","sampleRate","tasks","keepAlive","isPlaySupportedResult","canPlayType","wavWorker","Worker","page","onTaskEnd","worker","command","buffers","typedArray","buffer","loadWorker","loadWavWorker","terminateWorkers","executeNewTask","kill","terminate","decoderSampleRate","outputBufferSampleRate","wavBitDepth","wavSampleRate","pages","withWaveform","pushDecodeTask","dataBlob","IS_WEBM_SUPPORTED","photoTypeSet","webpages","pendingWebPages","updateWebPage","apiWebPage","oldWebPage","isUpdated","siteName","site_name","shortTitle","author","rTitle","contextHashtag","matches","shortDescriptionText","description","rDescription","contextSite","pendingSet","IMAGE_MIME_TYPES_SUPPORTED","GROUP_CALL_AMPLITUDE_ANALYSE_COUNT_MAX","GROUP_CALL_AMPLITUDE_ANALYSE_INTERVAL_MS","stopTrack","getScreenStream","screenStream","getDisplayMedia","getVideoTracks","contentHint","getStreamCached","_cache","screen","isScreen","player","elements","hasInputTrackKind","noop","requestInputSource","isAudioGood","isVideoGood","isSharingVideo","saveInputVideoStream","onInputStream","cleanup","tryAddTrack","isOutput","tagName","isVideo","elementEndpoint","useStream","paused","srcObject","sinkId","outputDeviceId","setSinkId","appendChild","getAudioTracks","isClosing","appendToConference","SDP","session","mediaSections","lines","line","parsed","section","splitStringByLimitWithRest","separator","UniqueNumberGenerator","maxTries","_try","SDPAttributeSplitted","SDPMediaLineParts","protocol","missed","rest","nestedMap","makeAttributes","innerParts","fillAttributes","attributesMap","linesArray","mediaLineParts","exists","resultShouldBeArray","SDPSessionSection","parseSdp","createSection","sessionSection","lineStr","test","isIncorrectSdpLine","parseSdpLine","parseMediaSectionInfo","sdp","clientInfo","lookupAttributeKeys","fingerprint","setup","ssrc","telegramSourceGroups","sdpLines","semantics","parseSourceGroups","raw","ufrag","pwd","fixLocalOffer","offer","hasMunged","skipAddingMulticast","generator","mediaType","originalSsrcs","ssrcs","generate","ssrcs2","ssrcsStrLines","ssrc2","addSimulcast","mediaLine","localMLine","codecIds","sectionInfo","newData","transport","fingerprints","candidates","setPort","newChannel","addSsrcEntry","mungedSdp","RTCPeerConnection","signalingState","connectionState","dict","dataChannel","stopStream","closeConnection","negotiating","negotiateInternal","JSON","stringify","negotiateThrottled","iceServers","iceTransportPolicy","bundlePolicy","rtcpMuxPolicy","iceCandidatePoolSize","maybeUpdateRemoteVideoConstraints","updateConstraintsInterval","localSdp","mainChannels","processedChannels","processed","processMediaSection","audioChannel","videoChannel","useChannel","channels","setEntrySource","setEntryPeerId","parse","groupCallInput","request","join_as","setData","codec","extmap","performExtmap","uri","filterServerCodecs","isNewConnection","getEntryByMid","originalOffer","createOffer","iceRestart","setLocalDescription","invokeJoinGroupCall","entriesToDelete","bundle","shouldBeSkipped","answerDescription","generateSdp","deleteEntry","iceGatheringState","setRemoteDescription","updateConstraints","getTransceivers","setParameters","getParameters","degradationPreference","colibriClass","defaultConstraints","maxHeight","onStageEndpoints","minHeight","sendDataChannelData","isSpeakingMap","pinnedSources","participantsSsrcs","hadAutoPinnedSources","dispatchPinnedThrottled","pinnedSource","MUTED","UNMUTED","MUTED_BY_ADMIN","CONNECTING","requestAudioSource","toggleMuted","getElement","clone","raise","stopScreenSharing","addInputVideoStream","startScreenSharingPromise","startScreenSharingInternal","unpinSource","closeConnectionAndStream","isSharingScreen","startScreenSharing","startVideoSharingPromise","startVideoSharingInternal","stopVideoSharing","startVideoSharing","isDiscarded","getEntryBySource","oldSsrcs","pinSource","modifiedTypes","oldSsrc","oldSource","oldEntry","setEndpoint","bpe","mask","int2bigInt","bits","minSize","buff","copyInt_","isObject","object","CALL_DURATION_LANG_KEYS","showLast","modulus","formatDuration","strings","VIDEO_MIME_TYPES_SUPPORTED","channelCount","constraint","getSupportedConstraints","constraintSupported","WEBRTC_MEDIA_PORT","getConnectionTypeForMediaType","generateMediaFirstLine","payloadIds","joiner","newLine","strs","foundation","component","toUpperCase","priority","ip","generation","performCandidate","sId","bundleMids","skipCandidates","candidate","addCandidate","streamName","addSource","addMsid","ssrcGroup","isApplication","isInactive","payloadTypes","addTransport","hdrexts","hdrext","clockrate","parameters","fbs","fb","subtype","addSsrc","addHeader","addConference"],"mappings":"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","file":"5.f7eddc8f3aed63baaee4.chunk.js","sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport default function cleanUsername(username: string) {\r\n  return username && username.toLowerCase() || '';\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { filterUnique, indexOfAndSplice } from \"../../helpers/array\";\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\nimport cleanSearchText from \"../../helpers/cleanSearchText\";\nimport cleanUsername from \"../../helpers/cleanUsername\";\nimport { formatFullSentTimeRaw, tsNow } from \"../../helpers/date\";\nimport { formatPhoneNumber } from \"../../helpers/formatPhoneNumber\";\nimport { safeReplaceObject, isObject } from \"../../helpers/object\";\nimport { isRestricted } from \"../../helpers/restrictions\";\nimport { Chat, InputContact, InputMedia, InputPeer, InputUser, User as MTUser, UserProfilePhoto, UserStatus, InputGeoPoint } from \"../../layer\";\nimport I18n, { i18n, LangPackKey } from \"../langPack\";\n//import apiManager from '../mtproto/apiManager';\nimport apiManager from '../mtproto/mtprotoworker';\nimport { REPLIES_PEER_ID, SERVICE_PEER_ID } from \"../mtproto/mtproto_config\";\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport SearchIndex from \"../searchIndex\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\n\nexport type User = MTUser.user;\nexport type TopPeerType = 'correspondents' | 'bots_inline';\nexport type MyTopPeer = {id: PeerId, rating: number};\n\nexport class AppUsersManager {\n  private storage = appStateManager.storages.users;\n  \n  private users: {[userId: UserId]: User};\n  private usernames: {[username: string]: UserId};\n  private contactsIndex: SearchIndex<UserId>;\n  private contactsFillPromise: CancellablePromise<AppUsersManager['contactsList']>;\n  private contactsList: Set<UserId>;\n  private updatedContactsList: boolean;\n  \n  private getTopPeersPromises: {[type in TopPeerType]?: Promise<MyTopPeer[]>};\n\n  constructor() {\n    this.clear(true);\n\n    setInterval(this.updateUsersStatuses, 60000);\n\n    rootScope.addEventListener('state_synchronized', this.updateUsersStatuses);\n\n    rootScope.addMultipleEventsListeners({\n      updateUserStatus: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          user.status = update.status;\n          if(user.status) {\n            if('expires' in user.status) {\n              user.status.expires -= serverTimeManager.serverTimeOffset;\n            }\n\n            if('was_online' in user.status) {\n              user.status.was_online -= serverTimeManager.serverTimeOffset;\n            }\n          }\n\n          //user.sortStatus = this.getUserStatusForSort(user.status);\n          rootScope.dispatchEvent('user_update', userId);\n          this.setUserToStateIfNeeded(user);\n        } //////else console.warn('No user by id:', userId);\n      },\n\n      updateUserPhoto: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          if((user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id === (update.photo as UserProfilePhoto.userProfilePhoto).photo_id) {\n            return;\n          }\n\n          this.forceUserOnline(userId, update.date);\n\n          if(update.photo._ === 'userProfilePhotoEmpty') {\n            delete user.photo;\n          } else {\n            user.photo = safeReplaceObject(user.photo, update.photo);\n          }\n\n          this.setUserToStateIfNeeded(user);\n\n          rootScope.dispatchEvent('user_update', userId);\n          rootScope.dispatchEvent('avatar_update', userId.toPeerId());\n        } else console.warn('No user by id:', userId);\n      },\n\n      updateUserName: (update) => {\n        const userId = update.user_id;\n        const user = this.users[userId];\n        if(user) {\n          this.forceUserOnline(userId);\n          \n          this.saveApiUser(Object.assign({}, user, {\n            first_name: update.first_name,\n            last_name: update.last_name,\n            username: update.username\n          }), true);\n        }\n      }\n    });\n\n    /* case 'updateContactLink':\n    this.onContactUpdated(update.user_id, update.my_link._ === 'contactLinkContact');\n    break; */\n\n    rootScope.addEventListener('language_change', (e) => {\n      const userId = this.getSelf().id;\n      this.contactsIndex.indexObject(userId, this.getUserSearchText(userId));\n    });\n\n    appStateManager.getState().then((state) => {\n      const users = appStateManager.storagesResults.users;\n      if(users.length) {\n        for(let i = 0, length = users.length; i < length; ++i) {\n          const user = users[i];\n          if(user) {\n            this.users[user.id] = user;\n            this.setUserNameToCache(user);\n          }\n        }\n      }\n\n      const contactsList = state.contactsList;\n      if(contactsList && Array.isArray(contactsList)) {\n        contactsList.forEach(userId => {\n          this.pushContact(userId);\n        });\n\n        if(contactsList.length) {\n          this.contactsFillPromise = deferredPromise();\n          this.contactsFillPromise.resolve(this.contactsList);\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId) => {\n        if(!appPeersManager.isUser(peerId)) {\n          return;\n        }\n        \n        const userId = peerId.toUserId();\n        if(!this.storage.getFromCache(userId)) {\n          this.storage.set({\n            [userId]: this.getUser(userId)\n          });\n        }\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId) => {\n        if(!appPeersManager.isUser(peerId)) {\n          return;\n        }\n\n        const userId = peerId.toUserId();\n        if(this.storage.getFromCache(userId)) {\n          this.storage.delete(userId);\n        }\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const users = appStateManager.storagesResults.users;\n      for(const userId in this.users) {\n        // const userId = +userId;\n        if(!userId) continue;\n        const peerId = userId.toPeerId();\n        if(!appStateManager.isPeerNeeded(peerId)) {\n          const user = this.users[userId];\n          if(user.username) {\n            delete this.usernames[cleanUsername(user.username)];\n          }\n\n          users.findAndSplice((user) => user.id === userId);\n          this.storage.delete(userId);\n          delete this.users[userId];\n        }\n      }\n    } else {\n      this.users = {};\n      this.usernames = {};\n    }\n    \n    this.getTopPeersPromises = {};\n    this.contactsIndex = this.createSearchIndex();\n    this.contactsFillPromise = undefined;\n    this.contactsList = new Set();\n    this.updatedContactsList = false;\n  }\n\n  private onContactsModified() {\n    const contactsList = [...this.contactsList];\n    appStateManager.pushToState('contactsList', contactsList);\n  }\n\n  public fillContacts() {\n    if(this.contactsFillPromise && this.updatedContactsList) {\n      return {\n        cached: this.contactsFillPromise.isFulfilled,\n        promise: this.contactsFillPromise\n      };\n    }\n\n    this.updatedContactsList = true;\n\n    const promise = deferredPromise<Set<UserId>>();\n    apiManager.invokeApi('contacts.getContacts').then((result) => {\n      if(result._ === 'contacts.contacts') {\n        this.contactsList.clear();\n      \n        this.saveApiUsers(result.users);\n\n        result.contacts.forEach((contact) => {\n          this.pushContact(contact.user_id);\n        });\n\n        this.onContactsModified();\n\n        this.contactsFillPromise = promise;\n      }\n\n      promise.resolve(this.contactsList);\n    }, () => {\n      this.updatedContactsList = false;\n    });\n\n    return {\n      cached: this.contactsFillPromise?.isFulfilled,\n      promise: this.contactsFillPromise || (this.contactsFillPromise = promise)\n    };\n  }\n\n  public resolveUsername(username: string): Promise<Chat | User> {\n    if(username[0] === '@') {\n      username = username.slice(1);\n    }\n\n    username = username.toLowerCase();\n    if(this.usernames[username]) {\n      return Promise.resolve(this.users[this.usernames[username]]);\n    }\n\n    return apiManager.invokeApi('contacts.resolveUsername', {username}).then(resolvedPeer => {\n      this.saveApiUsers(resolvedPeer.users);\n      appChatsManager.saveApiChats(resolvedPeer.chats);\n\n      return appPeersManager.getPeer(appPeersManager.getPeerId(resolvedPeer.peer));\n    });\n  }\n\n  public pushContact(id: UserId) {\n    this.contactsList.add(id);\n    this.contactsIndex.indexObject(id, this.getUserSearchText(id));\n    appStateManager.requestPeerSingle(id.toPeerId(), 'contact');\n  }\n\n  public popContact(id: UserId) {\n    this.contactsList.delete(id);\n    this.contactsIndex.indexObject(id, ''); // delete search index\n    appStateManager.releaseSinglePeer(id.toPeerId(), 'contact');\n  }\n\n  public getUserSearchText(id: UserId) {\n    const user = this.users[id];\n    if(!user) {\n      return '';\n    }\n\n    const arr: string[] = [\n      user.first_name,\n      user.last_name,\n      user.phone,\n      user.username,\n      user.pFlags.self ? I18n.format('SavedMessages', true) : '',\n      user.pFlags.self ? 'Saved Messages' : ''\n    ];\n\n    return arr.filter(Boolean).join(' ');\n  }\n\n  public getContacts(query?: string, includeSaved = false, sortBy: 'name' | 'online' | 'none' = 'name') {\n    return this.fillContacts().promise.then(_contactsList => {\n      let contactsList = [..._contactsList];\n      if(query) {\n        const results = this.contactsIndex.search(query);\n        const filteredContactsList = [...contactsList].filter(id => results.has(id));\n\n        contactsList = filteredContactsList;\n      }\n\n      if(sortBy === 'name') {\n        contactsList.sort((userId1, userId2) => {\n          const sortName1 = (this.users[userId1] || {}).sortName || '';\n          const sortName2 = (this.users[userId2] || {}).sortName || '';\n          return sortName1.localeCompare(sortName2);\n        });\n      } else if(sortBy === 'online') {\n        contactsList.sort((userId1, userId2) => {\n          const status1 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId1).status);\n          const status2 = appUsersManager.getUserStatusForSort(appUsersManager.getUser(userId2).status);\n          return status2 - status1;\n        });\n      }\n\n      const myUserId = rootScope.myId.toUserId();\n      indexOfAndSplice(contactsList, myUserId);\n      if(includeSaved) {\n        if(this.testSelfSearch(query)) {\n          contactsList.unshift(myUserId);\n        }\n      }\n\n      return contactsList;\n    });\n  }\n\n  public getContactsPeerIds(\n    query?: Parameters<AppUsersManager['getContacts']>[0], \n    includeSaved?: Parameters<AppUsersManager['getContacts']>[1], \n    sortBy?: Parameters<AppUsersManager['getContacts']>[2]) {\n    return this.getContacts(query, includeSaved, sortBy).then(userIds => {\n      return userIds.map(userId => userId.toPeerId(false));\n    });\n  }\n\n  public toggleBlock(peerId: PeerId, block: boolean) {\n    return apiManager.invokeApiSingle(block ? 'contacts.block' : 'contacts.unblock', {\n      id: appPeersManager.getInputPeerById(peerId)\n    }).then(value => {\n      if(value) {\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updatePeerBlocked',\n          peer_id: appPeersManager.getOutputPeer(peerId),\n          blocked: block\n        });\n      }\n\n      return value;\n    });\n  }\n\n  public testSelfSearch(query: string) {\n    const user = this.getSelf();\n    const index = this.createSearchIndex();\n    index.indexObject(user.id, this.getUserSearchText(user.id));\n    return index.search(query).has(user.id);\n  }\n\n  private createSearchIndex() {\n    return new SearchIndex<UserId>({\n      clearBadChars: true,\n      ignoreCase: true,\n      latinize: true,\n      includeTag: true\n    });\n  }\n\n  public saveApiUsers(apiUsers: MTUser[], override?: boolean) {\n    if((apiUsers as any).saved) return;\n    (apiUsers as any).saved = true;\n    apiUsers.forEach((user) => this.saveApiUser(user, override));\n  }\n\n  private setUserNameToCache(user: MTUser.user, oldUser?: MTUser.user) {\n    if(!oldUser || oldUser.username !== user.username) {\n      if(oldUser?.username) {\n        const oldSearchUsername = cleanUsername(oldUser.username);\n        delete this.usernames[oldSearchUsername];\n      }\n\n      if(user.username) {\n        const searchUsername = cleanUsername(user.username);\n        this.usernames[searchUsername] = user.id;\n      }\n    }\n  }\n\n  public saveApiUser(user: MTUser, override?: boolean) {\n    if(user._ === 'userEmpty') return;\n\n    const userId = user.id;\n    const oldUser = this.users[userId];\n\n    // ! commented block can affect performance !\n    // if(oldUser && !override) {\n    //   console.log('saveApiUser same');\n    //   return;\n    // }\n\n    if(user.pFlags === undefined) {\n      user.pFlags = {};\n    }\n\n    if(user.pFlags.min && oldUser !== undefined) {\n      return;\n    }\n\n    // * exclude from state\n    // defineNotNumerableProperties(user, ['initials', 'num', 'rFirstName', 'rFullName', 'rPhone', 'sortName', 'sortStatus']);\n\n    this.setUserNameToCache(user, oldUser);\n\n    if(!oldUser \n      || oldUser.initials === undefined \n      || oldUser.sortName === undefined \n      || oldUser.first_name !== user.first_name \n      || oldUser.last_name !== user.last_name) {\n      const fullName = user.first_name + (user.last_name ? ' ' + user.last_name : '');\n\n      user.sortName = user.pFlags.deleted ? '' : cleanSearchText(fullName, false);  \n      user.initials = RichTextProcessor.getAbbreviation(fullName);\n    } else {\n      user.sortName = oldUser.sortName;\n      user.initials = oldUser.initials;\n    }\n\n    if(user.status) {\n      if((user.status as UserStatus.userStatusOnline).expires) {\n        (user.status as UserStatus.userStatusOnline).expires -= serverTimeManager.serverTimeOffset;\n      }\n\n      if((user.status as UserStatus.userStatusOffline).was_online) {\n        (user.status as UserStatus.userStatusOffline).was_online -= serverTimeManager.serverTimeOffset;\n      }\n    }\n\n    //user.sortStatus = user.pFlags.bot ? -1 : this.getUserStatusForSort(user.status);\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldUser === undefined) {\n      this.users[userId] = user;\n    } else {\n      if(user.first_name !== oldUser.first_name \n        || user.last_name !== oldUser.last_name \n        || user.username !== oldUser.username) {\n        changedTitle = true;\n      }\n\n      const oldPhotoId = (oldUser.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      const newPhotoId = (user.photo as UserProfilePhoto.userProfilePhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      /* if(user.pFlags.bot && user.bot_info_version !== oldUser.bot_info_version) {\n        \n      } */\n\n      const wasContact = !!oldUser.pFlags.contact;\n      const newContact = !!user.pFlags.contact;\n\n      safeReplaceObject(oldUser, user);\n      rootScope.dispatchEvent('user_update', userId);\n\n      if(wasContact !== newContact) {\n        this.onContactUpdated(userId, newContact, wasContact);\n      }\n    }\n\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', user.id.toPeerId());\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', user.id.toPeerId());\n    }\n\n    this.setUserToStateIfNeeded(user);\n  }\n\n  public setUserToStateIfNeeded(user: User) {\n    if(appStateManager.isPeerNeeded(user.id.toPeerId())) {\n      this.storage.set({\n        [user.id]: user\n      });\n    }\n  }\n\n  public formatUserPhone(phone: string) {\n    return '+' + formatPhoneNumber(phone).formatted;\n  }\n\n  public isUserOnlineVisible(id: UserId) {\n    return this.getUserStatusForSort(id) > 3;\n  }\n\n  public getUserStatusForSort(status: User['status'] | UserId) {\n    if(typeof(status) !== 'object') {\n      status = this.getUser(status).status;\n    }\n\n    if(status) {\n      const expires = status._ === 'userStatusOnline' ? status.expires : (status._ === 'userStatusOffline' ? status.was_online : 0);\n      if(expires) {\n        return expires;\n      }\n\n      /* const timeNow = tsNow(true);\n      switch(status._) {\n        case 'userStatusRecently':\n          return timeNow - 86400 * 3;\n        case 'userStatusLastWeek':\n          return timeNow - 86400 * 7;\n        case 'userStatusLastMonth':\n          return timeNow - 86400 * 30;\n      } */\n      switch(status._) {\n        case 'userStatusRecently':\n          return 3;\n        case 'userStatusLastWeek':\n          return 2;\n        case 'userStatusLastMonth':\n          return 1;\n      }\n    }\n\n    return 0;\n  }\n\n  public getUser(id: User | UserId) {\n    if(isObject<User>(id)) {\n      return id;\n    }\n\n    return this.users[id] || {id, pFlags: {deleted: true}, access_hash: ''} as User;\n  }\n\n  public getSelf() {\n    return this.getUser(rootScope.myId);\n  }\n\n  public getUserStatusString(id: UserId): HTMLElement {\n    let key: LangPackKey;\n    let args: any[];\n\n    switch(id) {\n      case REPLIES_PEER_ID:\n        key = 'Peer.RepliesNotifications';\n        break;\n      case SERVICE_PEER_ID:\n        key = 'Peer.ServiceNotifications';\n        break;\n      default: {\n        if(this.isBot(id)) {\n          key = 'Bot';\n          break;\n        }\n\n        const user = this.getUser(id);\n        if(!user) {\n          key = '' as any;\n          break;\n        }\n\n        if(user.pFlags.support) {\n          key = 'SupportStatus';\n          break;\n        }\n\n        switch(user.status?._) {\n          case 'userStatusRecently': {\n            key = 'Lately';\n            break;\n          }\n    \n          case 'userStatusLastWeek': {\n            key = 'WithinAWeek';\n            break;\n          }\n    \n          case 'userStatusLastMonth': {\n            key = 'WithinAMonth';\n            break;\n          }\n          \n          case 'userStatusOffline': {\n            const date = user.status.was_online;\n            const today = new Date();\n            const now = today.getTime() / 1000 | 0;\n            \n            const diff = now - date;\n            if(diff < 60) {\n              key = 'Peer.Status.justNow';\n            } else if(diff < 3600) {\n              key = 'Peer.Status.minAgo';\n              const c = diff / 60 | 0;\n              args = [c];\n            } else if(diff < 86400 && today.getDate() === new Date(date * 1000).getDate()) {\n              key = 'LastSeen.HoursAgo';\n              const c = diff / 3600 | 0;\n              args = [c];\n            } else {\n              key = 'Peer.Status.LastSeenAt';\n              const {dateEl, timeEl} = formatFullSentTimeRaw(date);\n              args = [dateEl, timeEl];\n            }\n            \n            break;\n          }\n    \n          case 'userStatusOnline': {\n            key = 'Online';\n            break;\n          }\n    \n          default: {\n            key = 'ALongTimeAgo';\n            break;\n          }\n        }\n\n        break;\n      }\n    }\n    \n    return i18n(key, args);\n  }\n\n  public isBot(id: UserId) {\n    return this.users[id] && !!this.users[id].pFlags.bot;\n  }\n\n  public isContact(id: UserId) {\n    return this.contactsList.has(id) || !!(this.users[id] && this.users[id].pFlags.contact);\n  }\n  \n  public isRegularUser(id: UserId) {\n    const user = this.users[id];\n    return user && !this.isBot(id) && !user.pFlags.deleted && !user.pFlags.support;\n  }\n\n  public isNonContactUser(id: UserId) {\n    return this.isRegularUser(id) && !this.isContact(id) && id.toPeerId() !== rootScope.myId;\n  }\n\n  public hasUser(id: UserId, allowMin?: boolean) {\n    const user = this.users[id];\n    return isObject(user) && (allowMin || !user.pFlags.min);\n  }\n\n  public canSendToUser(id: UserId) {\n    const user = this.getUser(id);\n    return !user.pFlags.deleted && user.id.toPeerId() !== REPLIES_PEER_ID;\n  }\n\n  public getUserPhoto(id: UserId) {\n    const user = this.getUser(id);\n\n    return user && user.photo || {\n      _: 'userProfilePhotoEmpty'\n    };\n  }\n\n  public getUserString(id: UserId) {\n    const user = this.getUser(id);\n    return 'u' + id + (user.access_hash ? '_' + user.access_hash : '');\n  }\n\n  public getUserInput(id: UserId): InputUser {\n    const user = this.getUser(id);\n    if(user.pFlags && user.pFlags.self) {\n      return {_: 'inputUserSelf'};\n    }\n\n    return {\n      _: 'inputUser',\n      user_id: id,\n      access_hash: user.access_hash\n    };\n  }\n\n  public getUserInputPeer(id: UserId): InputPeer.inputPeerSelf | InputPeer.inputPeerUser {\n    const user = this.getUser(id);\n    if(user.pFlags && user.pFlags.self) {\n      return {_: 'inputPeerSelf'};\n    }\n\n    return {\n      _: 'inputPeerUser',\n      user_id: id,\n      access_hash: user.access_hash\n    };\n  }\n\n  public getContactMediaInput(id: UserId): InputMedia.inputMediaContact {\n    const user = this.getUser(id);\n\n    return {\n      _: 'inputMediaContact',\n      first_name: user.first_name,\n      last_name: user.last_name,\n      phone_number: user.phone,\n      vcard: '',\n      user_id: id\n    };\n  }\n\n  public updateUsersStatuses = () => {\n    const timestampNow = tsNow(true);\n    for(const i in this.users) {\n      const user = this.users[i];\n      this.updateUserStatus(user, timestampNow);\n    }\n  };\n\n  public updateUserStatus(user: MTUser.user, timestampNow = tsNow(true)) {\n    if(user.status &&\n      user.status._ === 'userStatusOnline' &&\n      user.status.expires < timestampNow) {\n      user.status = {_: 'userStatusOffline', was_online: user.status.expires};\n      rootScope.dispatchEvent('user_update', user.id);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  public forceUserOnline(id: UserId, eventTimestamp?: number) {\n    if(this.isBot(id)) {\n      return;\n    }\n\n    const timestamp = tsNow(true);\n    const onlineTimeFor = 60;\n    if(eventTimestamp) {\n      if((timestamp - eventTimestamp) >= onlineTimeFor) {\n        return;\n      }\n    } else if(apiUpdatesManager.updatesState.syncLoading) {\n      return;\n    }\n\n    const user = this.getUser(id);\n    if(user &&\n      user.status &&\n      user.status._ !== 'userStatusOnline' &&\n      user.status._ !== 'userStatusEmpty' &&\n      !user.pFlags.support &&\n      !user.pFlags.deleted) {\n\n      user.status = {\n        _: 'userStatusOnline',\n        expires: timestamp + onlineTimeFor\n      };\n      \n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', id);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  public importContact(first_name: string, last_name: string, phone: string) {\n    return this.importContacts([{\n      first_name,\n      last_name,\n      phones: [phone]\n    }]).then(userIds => {\n      if(!userIds.length) {\n        const error = new Error();\n        (error as any).type = 'NO_USER';\n        throw error;\n      }\n\n      return userIds[0];\n    });\n  }\n\n  public importContacts(contacts: {phones: string[], first_name: string, last_name: string}[]) {\n    const inputContacts: InputContact[] = [];\n\n    for(let i = 0; i < contacts.length; ++i) {\n      for(let j = 0; j < contacts[i].phones.length; ++j) {\n        inputContacts.push({\n          _: 'inputPhoneContact',\n          client_id: (i << 16 | j).toString(10),\n          phone: contacts[i].phones[j],\n          first_name: contacts[i].first_name,\n          last_name: contacts[i].last_name\n        });\n      }\n    }\n\n    return apiManager.invokeApi('contacts.importContacts', {\n      contacts: inputContacts\n    }).then((importedContactsResult) => {\n      this.saveApiUsers(importedContactsResult.users);\n\n      const userIds = importedContactsResult.imported.map((importedContact) => {\n        this.onContactUpdated(importedContact.user_id, true);\n        return importedContact.user_id;\n      });\n\n      return userIds;\n    });\n  }\n\n  public getTopPeers(type: TopPeerType) {\n    if(this.getTopPeersPromises[type]) return this.getTopPeersPromises[type];\n\n    return this.getTopPeersPromises[type] = appStateManager.getState().then((state) => {\n      const cached = state.topPeersCache[type];\n      if(cached && (cached.cachedTime + 86400e3) > Date.now() && cached.peers) {\n        return cached.peers;\n      }\n\n      return apiManager.invokeApi('contacts.getTopPeers', {\n        [type]: true,\n        offset: 0,\n        limit: 15,\n        hash: '0'\n      }).then((result) => {\n        let topPeers: MyTopPeer[] = [];\n        if(result._ === 'contacts.topPeers') {\n          //console.log(result);\n          this.saveApiUsers(result.users);\n          appChatsManager.saveApiChats(result.chats);\n\n          if(result.categories.length) {\n            topPeers = result.categories[0].peers.map((topPeer) => {\n              const peerId = appPeersManager.getPeerId(topPeer.peer);\n              appStateManager.requestPeer(peerId, 'topPeer');\n              return {id: peerId, rating: topPeer.rating};\n            });\n          }\n        }\n  \n        state.topPeersCache[type] = {\n          peers: topPeers,\n          cachedTime: Date.now()\n        };\n        appStateManager.pushToState('topPeersCache', state.topPeersCache);\n  \n        return topPeers;\n      });\n    });\n  }\n\n  public getBlocked(offset = 0, limit = 0) {\n    return apiManager.invokeApiSingle('contacts.getBlocked', {offset, limit}).then(contactsBlocked => {\n      this.saveApiUsers(contactsBlocked.users);\n      appChatsManager.saveApiChats(contactsBlocked.chats);\n      const count = contactsBlocked._ === 'contacts.blocked' ? contactsBlocked.users.length + contactsBlocked.chats.length : contactsBlocked.count;\n\n      const peerIds: PeerId[] = contactsBlocked.users.map(u => u.id.toPeerId()).concat(contactsBlocked.chats.map(c => c.id.toPeerId(true)));\n\n      return {count, peerIds};\n    });\n  }\n\n  public getLocated(\n    lat: number, \n    long: number,\n    accuracy_radius: number,\n    background: boolean = false,\n    self_expires: number = 0\n  ) {\n    const geo_point: InputGeoPoint = {\n      _: 'inputGeoPoint',\n      lat,\n      long,\n      accuracy_radius\n    };\n\n    return apiManager.invokeApi('contacts.getLocated', {\n      geo_point, \n      background\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n      return updates;\n    });\n  }\n\n  /* public searchContacts(query: string, limit = 20) {\n    return Promise.all([\n      this.getContacts(query),\n      apiManager.invokeApi('contacts.search', {\n        q: query,\n        limit\n      })\n    ]).then(results => {\n      const [myContacts, peers] = results;\n\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      // * contacts.search returns duplicates in my_results\n      const myResults = new Set(myContacts.concat(peers.my_results.map(p => appPeersManager.getPeerID(p))));\n\n      const out = {\n        my_results: [...myResults].slice(0, limit),\n        results: peers.results.map(p => appPeersManager.getPeerID(p))\n      };\n\n      return out;\n    });\n  } */\n  public searchContacts(query: string, limit = 20) {\n    // handle 't.me/username' as 'username'\n    const entities = RichTextProcessor.parseEntities(query);\n    if(entities.length && entities[0].length === query.trim().length && entities[0]._ === 'messageEntityUrl') {\n      try {\n        const url = new URL(RichTextProcessor.wrapUrl(query).url);\n        const path = url.pathname.slice(1);\n        if(path) {\n          query = path;\n        }\n      } catch(err) {}\n    }\n\n    return apiManager.invokeApiCacheable('contacts.search', {\n      q: query,\n      limit\n    }, {cacheSeconds: 60}).then(peers => {\n      this.saveApiUsers(peers.users);\n      appChatsManager.saveApiChats(peers.chats);\n\n      const out = {\n        my_results: filterUnique(peers.my_results.map(p => appPeersManager.getPeerId(p))), // ! contacts.search returns duplicates in my_results\n        results: peers.results.map(p => appPeersManager.getPeerId(p))\n      };\n\n      return out;\n    });\n  }\n\n  private onContactUpdated(userId: UserId, isContact: boolean, curIsContact = this.isContact(userId)) {\n    if(isContact !== curIsContact) {\n      if(isContact) {\n        this.pushContact(userId);\n      } else {\n        this.popContact(userId);\n      }\n\n      this.onContactsModified();\n\n      rootScope.dispatchEvent('contacts_update', userId);\n    }\n  }\n\n  public updateUsername(username: string) {\n    return apiManager.invokeApi('account.updateUsername', {\n      username\n    }).then((user) => {\n      this.saveApiUser(user);\n    });\n  }\n\n  public setUserStatus(userId: UserId, offline: boolean) {\n    if(this.isBot(userId)) {\n      return;\n    }\n\n    const user = this.users[userId];\n    if(user) {\n      const status: UserStatus = offline ? {\n        _: 'userStatusOffline',\n        was_online: tsNow(true)\n      } : {\n        _: 'userStatusOnline',\n        expires: tsNow(true) + 50\n      };\n\n      user.status = status;\n      //user.sortStatus = this.getUserStatusForSort(user.status);\n      rootScope.dispatchEvent('user_update', userId);\n\n      this.setUserToStateIfNeeded(user);\n    }\n  }\n\n  public addContact(userId: UserId, first_name: string, last_name: string, phone: string, showPhone?: true) {\n    /* if(!userId) {\n      return this.importContacts([{\n        first_name,\n        last_name,\n        phones: [phone]\n      }]);\n    } */\n\n    return apiManager.invokeApi('contacts.addContact', {\n      id: this.getUserInput(userId),\n      first_name,\n      last_name,\n      phone,\n      add_phone_privacy_exception: showPhone\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      this.onContactUpdated(userId, true);\n    });\n  }\n\n  public deleteContacts(userIds: UserId[]) {\n    return apiManager.invokeApi('contacts.deleteContacts', {\n      id: userIds.map(userId => this.getUserInput(userId))\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates, {override: true});\n\n      userIds.forEach(userId => {\n        this.onContactUpdated(userId, false);\n      });\n    });\n  }\n\n  public isRestricted(userId: UserId) {\n    const user: MTUser.user = this.getUser(userId);\n    const restrictionReasons = user.restriction_reason;\n\n    return !!(user.pFlags.restricted && restrictionReasons && isRestricted(restrictionReasons));\n  }\n}\n\nconst appUsersManager = new AppUsersManager();\nMOUNT_CLASS_TO.appUsersManager = appUsersManager;\nexport default appUsersManager\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { Chat, DialogPeer, Message, MessagesPeerDialogs, Update } from \"../../layer\";\nimport type { AppChatsManager } from \"../appManagers/appChatsManager\";\nimport type { AppMessagesManager, Dialog, MyMessage } from \"../appManagers/appMessagesManager\";\nimport type { AppPeersManager } from \"../appManagers/appPeersManager\";\nimport type { AppUsersManager } from \"../appManagers/appUsersManager\";\nimport type { AppDraftsManager } from \"../appManagers/appDraftsManager\";\nimport type { AppNotificationsManager } from \"../appManagers/appNotificationsManager\";\nimport type { ApiUpdatesManager } from \"../appManagers/apiUpdatesManager\";\nimport type { ServerTimeManager } from \"../mtproto/serverTimeManager\";\nimport type { AppMessagesIdsManager } from \"../appManagers/appMessagesIdsManager\";\nimport { tsNow } from \"../../helpers/date\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport SearchIndex from \"../searchIndex\";\nimport { forEachReverse, indexOfAndSplice, insertInDescendSortedArray } from \"../../helpers/array\";\nimport rootScope from \"../rootScope\";\nimport { defineNotNumerableProperties, safeReplaceObject } from \"../../helpers/object\";\nimport { AppStateManager } from \"../appManagers/appStateManager\";\nimport { SliceEnd } from \"../../helpers/slicedArray\";\nimport { MyDialogFilter } from \"./filters\";\nimport { NULL_PEER_ID } from \"../mtproto/mtproto_config\";\nimport { NoneToVoidFunction } from \"../../types\";\nimport ctx from \"../../environment/ctx\";\nimport AppStorage from \"../storage\";\nimport type DATABASE_STATE from \"../../config/databases/state\";\n\nexport type FolderDialog = {\n  dialog: Dialog,\n  index: number\n};\n\nexport type Folder = {\n  dialogs: Dialog[],\n  id: number,\n  unreadMessagesCount: number,\n  unreadDialogsCount: number,\n  dispatchUnreadTimeout?: number\n};\n\nexport const GLOBAL_FOLDER_ID: number = undefined;\n\n// let spentTime = 0;\nexport default class DialogsStorage {\n  private storage: AppStateManager['storages']['dialogs'];\n  \n  private dialogs: {[peerId: PeerId]: Dialog};\n\n  private folders: {[folderId: number]: Folder} = {};\n\n  private allDialogsLoaded: {[folder_id: number]: boolean};\n  private dialogsOffsetDate: {[folder_id: number]: number};\n  private pinnedOrders: {[folder_id: number]: PeerId[]};\n  private dialogsNum: number;\n\n  private dialogsIndex: SearchIndex<PeerId>;\n\n  private cachedResults: {\n    query: string,\n    count: number,\n    dialogs: Dialog[],\n    folderId: number\n  };\n\n  constructor(\n    private appMessagesManager: AppMessagesManager, \n    private appChatsManager: AppChatsManager, \n    private appPeersManager: AppPeersManager, \n    private appUsersManager: AppUsersManager,\n    private appDraftsManager: AppDraftsManager,\n    private appNotificationsManager: AppNotificationsManager,\n    private appStateManager: AppStateManager,\n    private apiUpdatesManager: ApiUpdatesManager,\n    private serverTimeManager: ServerTimeManager,\n    private appMessagesIdsManager: AppMessagesIdsManager\n  ) {\n    this.storage = this.appStateManager.storages.dialogs;\n    this.dialogs = this.storage.getCache();\n    this.clear(true);\n\n    rootScope.addEventListener('language_change', () => {\n      const peerId = appUsersManager.getSelf().id.toPeerId(false);\n      const dialog = this.getDialogOnly(peerId);\n      if(dialog) {\n        const peerText = appPeersManager.getPeerSearchText(peerId);\n        this.dialogsIndex.indexObject(peerId, peerText);\n      }\n    });\n\n    const onFilterUpdate = (filter: MyDialogFilter) => {\n      const dialogs = this.getCachedDialogs(false);\n      for(let i = 0; i < dialogs.length; ++i) {\n        this.processDialogForFilter(dialogs[i], filter);\n      }\n    };\n\n    rootScope.addEventListener('filter_order', () => {\n      const dialogs = this.getCachedDialogs(false);\n      for(const filterId in this.folders) {\n        if(+filterId > 1) {\n          delete this.folders[filterId];\n        }\n      }\n\n      for(let i = 0; i < dialogs.length; ++i) {\n        const dialog = dialogs[i];\n        for(let i = 0; i <= 10; ++i) {\n          const indexKey = `index_${i}` as ReturnType<DialogsStorage['getDialogIndexKey']>;\n          dialog[indexKey] = undefined;\n        }\n\n        this.processDialogForFilters(dialog);\n      }\n    });\n\n    rootScope.addEventListener('filter_update', onFilterUpdate);\n    rootScope.addEventListener('filter_new', onFilterUpdate);\n\n    rootScope.addEventListener('filter_delete', (filter) => {\n      const dialogs = this.getCachedDialogs(false);\n\n      const indexKey = `index_${filter.orderIndex}` as const;\n      for(let i = 0; i < dialogs.length; ++i) {\n        const dialog = dialogs[i];\n        delete dialog[indexKey];\n      }\n\n      delete this.folders[filter.id];\n    });\n\n    rootScope.addEventListener('chat_update', (chatId) => {\n      const chat: Chat.chat = this.appChatsManager.getChat(chatId);\n\n      const peerId = chatId.toPeerId(true);\n      if(chat.pFlags.left && this.getDialogOnly(peerId)) {\n        this.dropDialogOnDeletion(peerId);\n      }\n    });\n\n    rootScope.addMultipleEventsListeners({\n      updateFolderPeers: this.onUpdateFolderPeers,\n\n      updateDialogPinned: this.onUpdateDialogPinned,\n\n      updatePinnedDialogs: this.onUpdatePinnedDialogs,\n    });\n\n    appStateManager.getState().then((state) => {\n      this.pinnedOrders = state.pinnedOrders || {};\n      if(!this.pinnedOrders[0]) this.pinnedOrders[0] = [];\n      if(!this.pinnedOrders[1]) this.pinnedOrders[1] = [];\n      \n      const dialogs = appStateManager.storagesResults.dialogs;\n      if(dialogs.length) {\n        AppStorage.freezeSaving<typeof DATABASE_STATE>(this.setDialogsFromState.bind(this, dialogs), ['chats', 'dialogs', 'messages', 'users']);\n      }\n\n      this.allDialogsLoaded = state.allDialogsLoaded || {};\n    });\n  }\n\n  private setDialogsFromState(dialogs: Dialog[]) {\n    for(let i = 0, length = dialogs.length; i < length; ++i) {\n      const dialog = dialogs[i];\n      if(dialog) {\n        // if(dialog.peerId !== SERVICE_PEER_ID) {\n          dialog.top_message = this.appMessagesIdsManager.getServerMessageId(dialog.top_message); // * fix outgoing message to avoid copying dialog\n        // }\n\n        if(dialog.topMessage) {\n          this.appMessagesManager.saveMessages([dialog.topMessage]);\n        }\n\n        for(let i = 0; i <= 10; ++i) {\n          // @ts-ignore\n          delete dialog[`index_${i}`];\n        }\n\n        this.saveDialog(dialog, undefined, true);\n\n        // ! WARNING, убрать это когда нужно будет делать чтобы pending сообщения сохранялись\n        const message = this.appMessagesManager.getMessageByPeer(dialog.peerId, dialog.top_message);\n        if(message.deleted) {\n          this.appMessagesManager.reloadConversation(dialog.peerId);\n        }\n      }\n    }\n  }\n\n  public isDialogsLoaded(folderId: number) {\n    return !!this.allDialogsLoaded[folderId];\n  }\n\n  public setDialogsLoaded(folderId: number, loaded: boolean) {\n    if(folderId === GLOBAL_FOLDER_ID && loaded) {\n      this.allDialogsLoaded[0] = loaded;\n      this.allDialogsLoaded[1] = loaded;\n    } else {\n      this.allDialogsLoaded[folderId] = loaded;\n    }\n\n    if(this.allDialogsLoaded[0] && this.allDialogsLoaded[1]) {\n      this.allDialogsLoaded[GLOBAL_FOLDER_ID] = true;\n    }\n\n    this.appStateManager.pushToState('allDialogsLoaded', this.allDialogsLoaded);\n  }\n\n  public clear(init = false) {\n    this.pinnedOrders = {\n      0: [],\n      1: []\n    };\n\n    if(!init) {\n      const dialogs = this.appStateManager.storagesResults.dialogs;\n      dialogs.length = 0;\n      this.storage.clear();\n\n      this.setDialogsLoaded(0, false);\n      this.setDialogsLoaded(1, false);\n      this.setDialogsLoaded(GLOBAL_FOLDER_ID, false);\n      this.savePinnedOrders();\n    } else {\n      this.allDialogsLoaded = {};\n    }\n\n    this.folders = {};\n    this.dialogsOffsetDate = {};\n    this.dialogsNum = 0;\n    this.dialogsIndex = new SearchIndex({\n      clearBadChars: true,\n      ignoreCase: true,\n      latinize: true,\n      includeTag: true\n    });\n    this.cachedResults = {\n      query: '',\n      count: 0,\n      dialogs: [],\n      folderId: 0\n    };\n  }\n\n  public handleDialogUnpinning(dialog: Dialog, folderId: number) {\n    delete dialog.pFlags.pinned;\n    indexOfAndSplice(this.pinnedOrders[folderId], dialog.peerId);\n    this.savePinnedOrders();\n  }\n\n  public savePinnedOrders() {\n    this.appStateManager.pushToState('pinnedOrders', this.pinnedOrders);\n  }\n\n  public resetPinnedOrder(folderId: number) {\n    this.pinnedOrders[folderId] = [];\n  }\n\n  public getPinnedOrders(folderId: number) {\n    return this.pinnedOrders[folderId];\n  }\n\n  public getOffsetDate(folderId: number): number {\n    const offsetDate = this.dialogsOffsetDate[folderId] || 0;\n    if(folderId === GLOBAL_FOLDER_ID && !offsetDate) { // make request not from beginning if we have loaded some dialogs\n      return Math.min(this.getOffsetDate(0), this.getOffsetDate(1));\n    }\n\n    return offsetDate;\n  }\n\n  public getFolder(id: number) {\n    return this.folders[id] ?? (this.folders[id] = {dialogs: [], id, unreadMessagesCount: 0, unreadDialogsCount: 0});\n  }\n\n  public getFolderDialogs(id: number, skipMigrated = true): Dialog[] {\n    if(id === GLOBAL_FOLDER_ID) { // * it won't be sorted\n      return this.getCachedDialogs(skipMigrated);\n    }\n\n    const folder = this.getFolder(id);\n    return skipMigrated ? folder.dialogs.filter(dialog => dialog.migratedTo === undefined) : folder.dialogs;\n  }\n\n  public getCachedDialogs(skipMigrated?: boolean) {\n    return this.getFolderDialogs(0, skipMigrated).concat(this.getFolderDialogs(1, skipMigrated));\n  }\n\n  private setDialogIndexInFilter(dialog: Dialog, indexKey: ReturnType<DialogsStorage['getDialogIndexKey']>, filter: MyDialogFilter) {\n    let index: number;\n\n    if(this.appMessagesManager.filtersStorage.testDialogForFilter(dialog, filter)) {\n      const pinnedIndex = filter.pinnedPeerIds.indexOf(dialog.peerId);\n      if(pinnedIndex !== -1) {\n        index = this.generateDialogIndex(this.generateDialogPinnedDateByIndex(filter.pinned_peers.length - 1 - pinnedIndex), true);\n      } else if(dialog.pFlags?.pinned) {\n        index = this.generateIndexForDialog(dialog, true);\n      } else {\n        index = dialog.index;\n      }\n    }\n\n    return dialog[indexKey] = index;\n  }\n\n  public getDialog(peerId: PeerId, folderId?: number, skipMigrated = true): [Dialog, number] | [] {\n    const folders: Dialog[][] = [];\n\n    if(folderId === undefined) {\n      folders.push(this.getFolder(0).dialogs, this.getFolder(1).dialogs);\n    } else {\n      folders.push(this.getFolderDialogs(folderId, false));\n    }\n\n    for(let folder of folders) {\n      let i = 0, skipped = 0;\n      for(let length = folder.length; i < length; ++i) {\n        const dialog = folder[i];\n        if(dialog.peerId === peerId) {\n          return [dialog, i - skipped];\n        } else if(skipMigrated && dialog.migratedTo !== undefined) {\n          ++skipped;\n        }\n      }\n    }\n\n    return [];\n  }\n\n  public getDialogOnly(peerId: PeerId) {\n    return this.dialogs[peerId];\n  }\n\n  /*\n  var date = Date.now() / 1000 | 0;\n  var m = date * 0x10000;\n\n  var k = (date + 1) * 0x10000;\n  k - m;\n  65536\n  */\n  public generateDialogIndex(date?: number, isPinned?: boolean) {\n    if(date === undefined) {\n      date = tsNow(true) + this.serverTimeManager.serverTimeOffset;\n    }\n\n    return (date * 0x10000) + (isPinned ? 0 : ((++this.dialogsNum) & 0xFFFF));\n  }\n\n  public processDialogForFilters(dialog: Dialog) {\n    // let perf = performance.now();\n    const filters = this.appMessagesManager.filtersStorage.filters;\n    for(const id in filters) {\n      const filter = filters[id];\n      this.processDialogForFilter(dialog, filter);\n    }\n    // spentTime += (performance.now() - perf);\n    // console.log('generate index time:', spentTime);\n  }\n\n  public processDialogForFilter(dialog: Dialog, filter: MyDialogFilter) {\n    const indexKey = this.getDialogIndexKey(filter.id);\n    const folder = this.getFolder(filter.id);\n    const dialogs = folder.dialogs;\n\n    const wasIndex = dialogs.findIndex(d => d.peerId === dialog.peerId);\n    const wasDialog = dialogs[wasIndex];\n    const wasDialogIndex = wasDialog && wasDialog[indexKey];\n\n    const newDialogIndex = this.setDialogIndexInFilter(dialog, indexKey, filter);\n\n    if(wasDialogIndex === newDialogIndex) {\n      return;\n    }\n\n    if((!wasDialogIndex && newDialogIndex) || (wasIndex && !newDialogIndex)) {\n      this.prepareFolderUnreadCountModifyingByDialog(filter.id, dialog, !!newDialogIndex);\n    }\n\n    if(wasIndex !== -1) {\n      dialogs.splice(wasIndex, 1);\n    }\n\n    if(newDialogIndex) {\n      insertInDescendSortedArray(dialogs, dialog, indexKey, -1);\n    }\n  }\n\n  public prepareDialogUnreadCountModifying(dialog: Dialog) {\n    const callbacks: NoneToVoidFunction[] = [\n      this.prepareFolderUnreadCountModifyingByDialog(dialog.folder_id, dialog)\n    ];\n\n    const filters = this.appMessagesManager.filtersStorage.filters;\n    for(const id in filters) {\n      const filter = filters[id];\n      if(this.appMessagesManager.filtersStorage.testDialogForFilter(dialog, filter)) {\n        callbacks.push(this.prepareFolderUnreadCountModifyingByDialog(filter.id, dialog));\n      }\n    }\n\n    return () => callbacks.forEach(callback => callback());\n  }\n\n  public prepareFolderUnreadCountModifyingByDialog(folderId: number, dialog: Dialog, toggle?: boolean) {\n    const wasUnreadCount = this.appMessagesManager.getDialogUnreadCount(dialog);\n    \n    if(toggle !== undefined) {\n      this.modifyFolderUnreadCount(folderId, toggle ? wasUnreadCount : -wasUnreadCount, wasUnreadCount ? (toggle ? 1 : -1) : 0);\n      return;\n    }\n\n    return () => {\n      const newUnreadCount = this.appMessagesManager.getDialogUnreadCount(dialog);\n      const addMessagesCount = newUnreadCount - wasUnreadCount;\n      const addDialogsCount = (newUnreadCount && !wasUnreadCount) || (!newUnreadCount && wasUnreadCount) ? (wasUnreadCount ? -1 : 1) : 0;\n      this.modifyFolderUnreadCount(folderId, addMessagesCount, addDialogsCount);\n    };\n  }\n\n  public modifyFolderUnreadCount(folderId: number, addMessagesCount: number, addDialogsCount: number) {\n    if(!addMessagesCount && !addDialogsCount) {\n      return;\n    }\n\n    const folder = this.getFolder(folderId);\n    if(addMessagesCount) {\n      folder.unreadMessagesCount = Math.max(0, folder.unreadMessagesCount + addMessagesCount);\n    }\n    \n    if(addDialogsCount) {\n      folder.unreadDialogsCount = Math.max(0, folder.unreadDialogsCount + addDialogsCount);\n    }\n\n    if(folder.dispatchUnreadTimeout === undefined) {\n      folder.dispatchUnreadTimeout = ctx.setTimeout(() => {\n        folder.dispatchUnreadTimeout = undefined;\n        rootScope.dispatchEvent('folder_unread', folder);\n      }, 0);\n    }\n  }\n\n  public generateIndexForDialog(dialog: Dialog, justReturn = false, message?: MyMessage) {\n    let topDate = 0, isPinned: boolean;\n    if(dialog.pFlags.pinned && !justReturn) {\n      topDate = this.generateDialogPinnedDate(dialog);\n      isPinned = true;\n    } else {\n      if(!message) {\n        message = this.appMessagesManager.getMessageByPeer(dialog.peerId, dialog.top_message);\n      }\n      \n      topDate = (message as Message.message).date || topDate;\n\n      const channelId = this.appPeersManager.isChannel(dialog.peerId) && dialog.peerId.toChatId();\n      if(channelId) {\n        const channel: Chat.channel = this.appChatsManager.getChat(channelId);\n        if(!topDate || (channel.date && channel.date > topDate)) {\n          topDate = channel.date;\n        }\n      }\n  \n      if(dialog.draft?._ === 'draftMessage' && dialog.draft.date > topDate) {\n        topDate = dialog.draft.date;\n      }\n    }\n\n    if(!topDate) {\n      topDate = tsNow(true);\n    }\n\n    const index = this.generateDialogIndex(topDate, isPinned);\n    if(justReturn) {\n      return index;\n    }\n\n    dialog.index = index;\n  }\n\n  public generateDialogPinnedDateByIndex(pinnedIndex: number) {\n    return 0x7fff0000 + (pinnedIndex & 0xFFFF); // 0xFFFF - потому что в папках может быть бесконечное число пиннедов\n  }\n\n  public generateDialogPinnedDate(dialog: Dialog) {\n    const order = this.pinnedOrders[dialog.folder_id];\n\n    const foundIndex = order.indexOf(dialog.peerId);\n    let pinnedIndex = foundIndex;\n    if(foundIndex === -1) {\n      pinnedIndex = order.push(dialog.peerId) - 1;\n      this.savePinnedOrders();\n    }\n\n    return this.generateDialogPinnedDateByIndex(pinnedIndex);\n  }\n\n  /* public generateDialog(peerId: PeerId) {\n    const dialog: Dialog = {\n      _: 'dialog',\n      pFlags: {},\n      peer: this.appPeersManager.getOutputPeer(peerId),\n      top_message: 0,\n      read_inbox_max_id: 0,\n      read_outbox_max_id: 0,\n      unread_count: 0,\n      unread_mentions_count: 0,\n      notify_settings: {\n        _: 'peerNotifySettings',\n      },\n    };\n\n    return dialog;\n  } */\n\n  public setDialogToState(dialog: Dialog) {\n    const {peerId, pts} = dialog;\n    const historyStorage = this.appMessagesManager.getHistoryStorage(peerId);\n    const messagesStorage = this.appMessagesManager.getMessagesStorage(peerId);\n    const history = historyStorage.history.slice;\n    let incomingMessage: MyMessage;\n    for(let i = 0, length = history.length; i < length; ++i) {\n      const mid = history[i];\n      const message: MyMessage = this.appMessagesManager.getMessageFromStorage(messagesStorage, mid);\n      if(!message.pFlags.is_outgoing && !message.deleted/*  || peerId === SERVICE_PEER_ID */) {\n        incomingMessage = message;\n  \n        const fromId = message.viaBotId || message.fromId;\n        if(fromId !== peerId) {\n          this.appStateManager.requestPeerSingle(fromId, 'topMessage', peerId);\n        }\n  \n        break;\n      }\n    }\n\n    dialog.topMessage = incomingMessage;\n\n    // DO NOT TOUCH THESE LINES, SOME REAL MAGIC HERE.\n    // * Read service chat when refreshing page with outgoing & getting new service outgoing message\n    /* if(incomingMessage && dialog.read_inbox_max_id >= dialog.top_message) {\n      dialog.unread_count = 0;\n    }\n\n    dialog.read_inbox_max_id = this.appMessagesIdsManager.clearMessageId(dialog.read_inbox_max_id);\n    dialog.read_outbox_max_id = this.appMessagesIdsManager.clearMessageId(dialog.read_outbox_max_id); */\n    // CAN TOUCH NOW\n\n    if(peerId.isAnyChat() && pts) {\n      const newPts = this.apiUpdatesManager.getChannelState(peerId.toChatId(), pts).pts;\n      dialog.pts = newPts;\n    }\n\n    this.storage.set({\n      [peerId]: dialog\n    });\n\n    this.appStateManager.requestPeerSingle(peerId, 'dialog');\n\n    /* for(let id in this.appMessagesManager.filtersStorage.filters) {\n      const filter = this.appMessagesManager.filtersStorage.filters[id];\n\n      if(this.appMessagesManager.filtersStorage.testDialogForFilter(dialog, filter)) {\n        \n      }\n    } */\n  }\n\n  public pushDialog(dialog: Dialog, offsetDate?: number, ignoreOffsetDate?: boolean, saveGlobalOffset?: boolean) {\n    const {folder_id, peerId} = dialog;\n    const dialogs = this.getFolderDialogs(folder_id, false);\n    const pos = dialogs.findIndex(d => d.peerId === peerId);\n    if(pos !== -1) {\n      dialogs.splice(pos, 1);\n    }\n    \n    //if(!this.dialogs[peerId]) {\n      this.dialogs[peerId] = dialog;\n      \n      this.setDialogToState(dialog);\n    //}\n\n    if(offsetDate === undefined) {\n      offsetDate = this.getDialogOffsetDate(dialog);\n    }\n\n    this.processDialogForFilters(dialog);\n\n    if(offsetDate && !dialog.pFlags.pinned) {\n      if(saveGlobalOffset) {\n        const savedGlobalOffsetDate = this.dialogsOffsetDate[GLOBAL_FOLDER_ID];\n        if(!savedGlobalOffsetDate || offsetDate < savedGlobalOffsetDate) {\n          this.dialogsOffsetDate[GLOBAL_FOLDER_ID] = offsetDate;\n        }\n      }\n\n      const savedOffsetDate = this.dialogsOffsetDate[folder_id];\n      if(!savedOffsetDate || offsetDate < savedOffsetDate) {\n        // if(pos !== -1) {\n        if(!ignoreOffsetDate && !this.isDialogsLoaded(folder_id)) {\n          this.clearDialogFromState(dialog, true);\n          return;\n        }\n  \n        this.dialogsOffsetDate[folder_id] = offsetDate;\n      }\n    }\n\n    if(pos === -1) {\n      this.prepareFolderUnreadCountModifyingByDialog(folder_id, dialog, true);\n    }\n\n    /* const newPos =  */insertInDescendSortedArray(dialogs, dialog, 'index', -1);\n    /* if(pos !== -1 && pos !== newPos) {\n      rootScope.dispatchEvent('dialog_order', {dialog, pos: newPos});\n    } */\n  }\n\n  public dropDialog(peerId: PeerId): ReturnType<DialogsStorage['getDialog']> {\n    const foundDialog = this.getDialog(peerId, undefined, false);\n    const [dialog, index] = foundDialog;\n    if(dialog) {\n      delete this.dialogs[peerId];\n\n      const folder = this.getFolder(dialog.folder_id);\n      folder.dialogs.splice(index, 1);\n      const wasPinned = indexOfAndSplice(this.pinnedOrders[dialog.folder_id], peerId) !== undefined;\n      \n      this.processDialogForFilters(dialog);\n\n      this.dialogsIndex.indexObject(peerId, '');\n\n      if(wasPinned) {\n        this.savePinnedOrders();\n      }\n\n      this.clearDialogFromState(dialog, false);\n    }\n\n    return foundDialog;\n  }\n\n  public clearDialogFromState(dialog: Dialog, keepLocal: boolean) {\n    const peerId = dialog.peerId;\n    this.appStateManager.releaseSinglePeer(peerId, 'topMessage');\n    this.appStateManager.releaseSinglePeer(peerId, 'dialog');\n    this.storage.delete(peerId, keepLocal);\n  }\n\n  public dropDialogWithEvent(peerId: PeerId) {\n    const dropped = this.dropDialog(peerId);\n    if(dropped.length) {\n      rootScope.dispatchEvent('dialog_drop', {peerId, dialog: dropped[0]});\n    }\n\n    return dropped;\n  }\n\n  /**\n   * leaving chat, leaving channel, deleting private dialog\n   */\n  public dropDialogOnDeletion(peerId: PeerId) {\n    this.dropDialogWithEvent(peerId);\n    rootScope.dispatchEvent('peer_deleted', peerId);\n  }\n\n  public applyDialogs(dialogsResult: MessagesPeerDialogs.messagesPeerDialogs) {\n    // * В эту функцию попадут только те диалоги, в которых есть read_inbox_max_id и read_outbox_max_id, в отличие от тех, что будут в getTopMessages\n\n    // ! fix 'dialogFolder', maybe there is better way to do it, this only can happen by 'messages.getPinnedDialogs' by folder_id: 0\n    forEachReverse(dialogsResult.dialogs, (dialog, idx) => {\n      if(dialog._ === 'dialogFolder') {\n        dialogsResult.dialogs.splice(idx, 1);\n      }\n    });\n\n    this.appUsersManager.saveApiUsers(dialogsResult.users);\n    this.appChatsManager.saveApiChats(dialogsResult.chats);\n    this.appMessagesManager.saveMessages(dialogsResult.messages);\n\n    // this.appMessagesManager.log('applyConversation', dialogsResult);\n\n    const updatedDialogs: {[peerId: PeerId]: Dialog} = {};\n    (dialogsResult.dialogs as Dialog[]).forEach((dialog) => {\n      const peerId = this.appPeersManager.getPeerId(dialog.peer);\n      let topMessage = dialog.top_message;\n\n      const topPendingMessage = this.appMessagesManager.pendingTopMsgs[peerId];\n      if(topPendingMessage) {\n        if(!topMessage \n          || (this.appMessagesManager.getMessageByPeer(peerId, topPendingMessage) as MyMessage).date > (this.appMessagesManager.getMessageByPeer(peerId, topMessage) as MyMessage).date) {\n          dialog.top_message = topMessage = topPendingMessage;\n          this.appMessagesManager.getHistoryStorage(peerId).maxId = topPendingMessage;\n        }\n      }\n\n      /* const d = Object.assign({}, dialog);\n      if(peerId === 239602833) {\n        this.log.error('applyConversation lun', dialog, d);\n      } */\n\n      if(topMessage || (dialog.draft && dialog.draft._ === 'draftMessage')) {\n        this.saveDialog(dialog);\n        updatedDialogs[peerId] = dialog;\n      } else {\n        this.dropDialogWithEvent(peerId);\n      }\n\n      const updates = this.appMessagesManager.newUpdatesAfterReloadToHandle[peerId];\n      if(updates !== undefined) {\n        for(const update of updates) {\n          updates.delete(update);\n          this.apiUpdatesManager.saveUpdate(update);\n        }\n\n        if(!updates.size) {\n          delete this.appMessagesManager.newUpdatesAfterReloadToHandle[peerId];\n        }\n      }\n    });\n\n    if(Object.keys(updatedDialogs).length) {\n      rootScope.dispatchEvent('dialogs_multiupdate', updatedDialogs);\n    }\n  }\n\n  public getDialogOffsetDate(dialog: Dialog) {\n    return this.appMessagesManager.getMessageByPeer(dialog.peerId, dialog.top_message).date || 0;\n  }\n\n  /**\n   * Won't save migrated from peer, forbidden peers, left and kicked\n   */\n  public saveDialog(dialog: Dialog, folderId = dialog.folder_id ?? 0, ignoreOffsetDate?: boolean, saveGlobalOffset?: boolean) {\n    const peerId = this.appPeersManager.getPeerId(dialog.peer);\n    if(!peerId) {\n      console.error('saveConversation no peerId???', dialog, folderId);\n      return;\n    }\n\n    if(dialog._ !== 'dialog'/*  || peerId === 239602833 */) {\n      console.error('saveConversation not regular dialog', dialog, Object.assign({}, dialog));\n    }\n    \n    const channelId = this.appPeersManager.isChannel(peerId) ? peerId.toChatId() : NULL_PEER_ID;\n\n    if(peerId.isAnyChat()) {\n      const chat: Chat = this.appChatsManager.getChat(peerId.toChatId());\n      // ! chatForbidden stays for chat where you're kicked\n      if(chat._ === 'channelForbidden' /* || chat._ === 'chatForbidden' */ || (chat as Chat.chat).pFlags.left || (chat as Chat.chat).pFlags.kicked) {\n        return;\n      }\n    }\n\n    const peerText = this.appPeersManager.getPeerSearchText(peerId);\n    this.dialogsIndex.indexObject(peerId, peerText);\n\n    const wasDialogBefore = this.getDialogOnly(peerId);\n\n    let mid: number, message: MyMessage;\n    if(dialog.top_message) {\n      mid = this.appMessagesIdsManager.generateMessageId(dialog.top_message);//dialog.top_message;\n\n      // preserve outgoing message\n      const wasTopMessage = wasDialogBefore?.top_message && this.appMessagesManager.getMessageByPeer(peerId, wasDialogBefore.top_message) as MyMessage;\n      if(wasTopMessage?.pFlags?.is_outgoing && wasDialogBefore.top_message >= mid) {\n        mid = wasDialogBefore.top_message;\n      }\n\n      message = this.appMessagesManager.getMessageByPeer(peerId, mid);\n    } else {\n      mid = this.appMessagesManager.generateTempMessageId(peerId);\n      message = {\n        _: 'message',\n        id: mid,\n        mid,\n        from_id: this.appPeersManager.getOutputPeer(this.appUsersManager.getSelf().id.toPeerId(false)),\n        peer_id: this.appPeersManager.getOutputPeer(peerId),\n        deleted: true,\n        pFlags: {out: true},\n        date: 0,\n        message: ''\n      };\n      this.appMessagesManager.saveMessages([message], {isOutgoing: true});\n    }\n\n    if(!message?.pFlags) {\n      this.appMessagesManager.log.error('saveConversation no message:', dialog, message);\n    }\n\n    if(!channelId && peerId.isAnyChat()) {\n      const chat = this.appChatsManager.getChat(peerId.toChatId());\n      if(chat && chat.migrated_to && chat.pFlags.deactivated) {\n        const migratedToPeer = this.appPeersManager.getPeerId(chat.migrated_to);\n        this.appMessagesManager.migratedFromTo[peerId] = migratedToPeer;\n        this.appMessagesManager.migratedToFrom[migratedToPeer] = peerId;\n        dialog.migratedTo = migratedToPeer;\n        //return;\n      }\n    }\n\n    dialog.top_message = mid;\n    // dialog.unread_count = wasDialogBefore && dialog.read_inbox_max_id === this.appMessagesIdsManager.getServerMessageId(wasDialogBefore.read_inbox_max_id) ? wasDialogBefore.unread_count : dialog.unread_count;\n    dialog.read_inbox_max_id = this.appMessagesIdsManager.generateMessageId(wasDialogBefore && !dialog.read_inbox_max_id ? wasDialogBefore.read_inbox_max_id : dialog.read_inbox_max_id);\n    dialog.read_outbox_max_id = this.appMessagesIdsManager.generateMessageId(wasDialogBefore && !dialog.read_outbox_max_id ? wasDialogBefore.read_outbox_max_id : dialog.read_outbox_max_id);\n\n    if(dialog.folder_id === undefined) {\n      if(dialog._ === 'dialog') {\n        // ! СЛОЖНО ! СМОТРИ В getTopMessages\n        dialog.folder_id = wasDialogBefore ? wasDialogBefore.folder_id : folderId;\n      }/*  else if(dialog._ === 'dialogFolder') {\n        dialog.folder_id = dialog.folder.id;\n      } */\n    }\n\n    dialog.draft = this.appDraftsManager.saveDraft(peerId, 0, dialog.draft);\n    dialog.peerId = peerId;\n\n    // Because we saved message without dialog present\n    if(message.pFlags.is_outgoing) {\n      const isOut = message.pFlags.out;\n      if(mid > dialog[isOut ? 'read_outbox_max_id' : 'read_inbox_max_id']) {\n        message.pFlags.unread = true;\n\n        if(!dialog.unread_count && !isOut) {\n          ++dialog.unread_count;\n        }\n      } else {\n        delete message.pFlags.unread;\n      }\n    }\n\n    const historyStorage = this.appMessagesManager.getHistoryStorage(peerId);\n    const slice = historyStorage.history.slice;\n    /* if(historyStorage === undefined) { // warning\n      historyStorage.history.push(mid);\n    } else  */if(!slice.length) {\n      historyStorage.history.unshift(mid);\n      historyStorage.count ||= 1;\n      if(this.appMessagesManager.mergeReplyKeyboard(historyStorage, message)) {\n        rootScope.dispatchEvent('history_reply_markup', {peerId});\n      }\n    } else if(!slice.isEnd(SliceEnd.Bottom)) { // * this will probably never happen, however, if it does, then it will fix slice with top_message\n      const slice = historyStorage.history.insertSlice([mid]);\n      slice.setEnd(SliceEnd.Bottom);\n      historyStorage.count ||= 1;\n      if(this.appMessagesManager.mergeReplyKeyboard(historyStorage, message)) {\n        rootScope.dispatchEvent('history_reply_markup', {peerId});\n      }\n    }\n\n    historyStorage.maxId = mid;\n    historyStorage.readMaxId = dialog.read_inbox_max_id;\n    historyStorage.readOutboxMaxId = dialog.read_outbox_max_id;\n\n    this.appNotificationsManager.savePeerSettings({\n      peerId, \n      settings: dialog.notify_settings\n    });\n\n    if(channelId && dialog.pts) {\n      this.apiUpdatesManager.addChannelState(channelId, dialog.pts);\n    }\n\n    this.generateIndexForDialog(dialog);\n\n    defineNotNumerableProperties(dialog, [\n      'index_0',\n      'index_1',\n      'index_2',\n      'index_3',\n      'index_4',\n      'index_5',\n      'index_6',\n      'index_7',\n      'index_8',\n      'index_9',\n      'index_10'\n    ]);\n\n    if(wasDialogBefore) {\n      safeReplaceObject(wasDialogBefore, dialog);\n    }\n\n    this.pushDialog(dialog, message.date, ignoreOffsetDate, saveGlobalOffset);\n  }\n\n  public getDialogIndexKey(filterId: number) {\n    const indexStr = filterId > 1 ? \n      `index_${this.appMessagesManager.filtersStorage.getFilter(filterId).orderIndex}` as const : \n      'index' as const;\n\n    return indexStr;\n  }\n\n  public getDialogs(query = '', offsetIndex?: number, limit = 20, folderId = 0, skipMigrated = false): {\n    cached: boolean,\n    promise: Promise<{\n      dialogs: Dialog[],\n      count: number,\n      isTopEnd: boolean,\n      isEnd: boolean\n    }>\n  } {\n    const ret: {\n      cached: boolean,\n      promise: Promise<{\n        dialogs: Dialog[],\n        count: number,\n        isTopEnd: boolean,\n        isEnd: boolean\n      }>\n    } = {} as any;\n\n    if(folderId > 1) {\n      const promises: Promise<any>[] = [];\n\n      const fillContactsResult = this.appUsersManager.fillContacts();\n      if(!fillContactsResult.cached) {\n        promises.push(fillContactsResult.promise);\n      }\n\n      const reloadMissingDialogsPromise = this.appMessagesManager.filtersStorage.reloadMissingPeerIds(folderId);\n      if(reloadMissingDialogsPromise) {\n        promises.push(reloadMissingDialogsPromise);\n      }\n\n      if(promises.length) {\n        ret.cached = false;\n        ret.promise = Promise.all(promises).then(() => {\n          return this.getDialogs(query, offsetIndex, limit, folderId, skipMigrated).promise;\n        });\n\n        return ret;\n      }\n    }\n\n    // let's load only first pages by certain folderId. next pages will load without folder filtering\n    const realFolderId = folderId > 1 || this.getOffsetDate(folderId) ? GLOBAL_FOLDER_ID : folderId;\n    let curDialogStorage = this.getFolderDialogs(folderId, skipMigrated);\n\n    const indexStr = this.getDialogIndexKey(folderId);\n\n    if(query) {\n      if(!limit || this.cachedResults.query !== query || this.cachedResults.folderId !== folderId) {\n        this.cachedResults.query = query;\n        this.cachedResults.folderId = folderId;\n\n        const results = this.dialogsIndex.search(query);\n\n        const dialogs: Dialog[] = [];\n        for(const peerId in this.dialogs) {\n          const dialog = this.dialogs[peerId];\n          if(results.has(dialog.peerId) && dialog.folder_id === folderId) {\n            dialogs.push(dialog);\n          }\n        }\n\n        dialogs.sort((d1, d2) => d2[indexStr] - d1[indexStr]);\n        this.cachedResults.dialogs = dialogs;\n        this.cachedResults.count = dialogs.length;\n      }\n\n      curDialogStorage = this.cachedResults.dialogs;\n    } else {\n      this.cachedResults.query = '';\n    }\n\n    let offset = 0;\n    if(offsetIndex > 0) {\n      for(let length = curDialogStorage.length; offset < length; ++offset) {\n        if(offsetIndex > curDialogStorage[offset][indexStr]) {\n          break;\n        }\n      }\n    }\n\n    const loadedAll = this.isDialogsLoaded(realFolderId);\n    const isEnoughDialogs = curDialogStorage.length >= (offset + limit);\n    if(query || loadedAll || isEnoughDialogs) {\n      const dialogs = curDialogStorage.slice(offset, offset + limit);\n      ret.cached = true;\n      ret.promise = Promise.resolve({\n        dialogs,\n        count: loadedAll ? curDialogStorage.length : null,\n        isTopEnd: curDialogStorage.length && ((dialogs[0] && dialogs[0] === curDialogStorage[0]) || curDialogStorage[0][indexStr] < offsetIndex),\n        isEnd: (query || loadedAll) && (offset + limit) >= curDialogStorage.length\n      });\n\n      return ret;\n    }\n\n    ret.cached = false;\n    ret.promise = this.appMessagesManager.getTopMessages(limit, realFolderId).then(result => {\n      //const curDialogStorage = this[folderId];\n      if(skipMigrated) {\n        curDialogStorage = this.getFolderDialogs(folderId, skipMigrated);\n      }\n\n      offset = 0;\n      if(offsetIndex > 0) {\n        for(let length = curDialogStorage.length; offset < length; ++offset) {\n          if(offsetIndex > curDialogStorage[offset][indexStr]) {\n            break;\n          }\n        }\n      }\n\n      //this.log.warn(offset, offset + limit, curDialogStorage.dialogs.length, this.dialogs.length);\n\n      const dialogs = curDialogStorage.slice(offset, offset + limit);\n      return {\n        dialogs,\n        count: result.count === undefined ? curDialogStorage.length : result.count,\n        isTopEnd: curDialogStorage.length && ((dialogs[0] && dialogs[0] === curDialogStorage[0]) || curDialogStorage[0][indexStr] < offsetIndex),\n        // isEnd: this.isDialogsLoaded(realFolderId) && (offset + limit) >= curDialogStorage.length\n        isEnd: result.isEnd\n      };\n    });\n\n    return ret;\n  }\n\n  // only 0 and 1 folders\n  private onUpdateFolderPeers = (update: Update.updateFolderPeers) => {\n    //this.log('updateFolderPeers', update);\n    const peers = update.folder_peers;\n\n    peers.forEach((folderPeer) => {\n      const {folder_id, peer} = folderPeer;\n\n      const peerId = this.appPeersManager.getPeerId(peer);\n      const dialog = this.dropDialog(peerId)[0];\n      if(dialog) {\n        if(dialog.pFlags?.pinned) {\n          this.handleDialogUnpinning(dialog, folder_id);\n        }\n\n        dialog.folder_id = folder_id;\n        this.generateIndexForDialog(dialog);\n        this.pushDialog(dialog); // need for simultaneously updatePinnedDialogs\n      }\n\n      this.appMessagesManager.scheduleHandleNewDialogs(peerId, dialog);\n    });\n  };\n\n  private onUpdateDialogPinned = (update: Update.updateDialogPinned) => {\n    const folderId = update.folder_id ?? 0;\n    //this.log('updateDialogPinned', update);\n    const peerId = this.appPeersManager.getPeerId((update.peer as DialogPeer.dialogPeer).peer);\n    const dialog = this.getDialogOnly(peerId);\n\n    // этот код внизу никогда не сработает, в папках за пиннед отвечает updateDialogFilter\n    /* if(update.folder_id > 1) {\n      const filter = this.filtersStorage.filters[update.folder_id];\n      if(update.pFlags.pinned) {\n        filter.pinned_peers.unshift(peerId);\n      } else {\n        filter.pinned_peers.findAndSplice(p => p === peerId);\n      }\n    } */\n\n    if(dialog) {\n      if(!update.pFlags.pinned) {\n        this.handleDialogUnpinning(dialog, folderId);\n      } else { // means set\n        dialog.pFlags.pinned = true;\n      }\n\n      this.generateIndexForDialog(dialog);\n    } \n\n    this.appMessagesManager.scheduleHandleNewDialogs(peerId, dialog);\n  };\n\n  private onUpdatePinnedDialogs = (update: Update.updatePinnedDialogs) => {\n    const folderId = update.folder_id ?? 0;\n        \n    const handleOrder = (order: PeerId[]) => {\n      this.pinnedOrders[folderId].length = 0;\n      order.reverse(); // index must be higher\n      order.forEach((peerId) => {\n        newPinned[peerId] = true;\n  \n        const dialog = this.getDialogOnly(peerId);\n        this.appMessagesManager.scheduleHandleNewDialogs(peerId, dialog);\n        if(!dialog) {\n          return;\n        }\n  \n        dialog.pFlags.pinned = true;\n        this.generateIndexForDialog(dialog);\n      });\n      \n      const dialogs = this.getFolderDialogs(folderId, false);\n      for(const dialog of dialogs) {\n        if(!dialog.pFlags.pinned) {\n          break;\n        }\n\n        const peerId = dialog.peerId;\n        if(!newPinned[peerId]) {\n          this.appMessagesManager.scheduleHandleNewDialogs(peerId);\n        }\n      }\n    };\n\n    //this.log('updatePinnedDialogs', update);\n    const newPinned: {[peerId: PeerId]: true} = {};\n    if(!update.order) {\n      apiManager.invokeApi('messages.getPinnedDialogs', {\n        folder_id: folderId\n      }).then((dialogsResult) => {\n        // * for test reordering and rendering\n        // dialogsResult.dialogs.reverse();\n\n        this.applyDialogs(dialogsResult);\n\n        handleOrder(dialogsResult.dialogs.map(d => d.peerId));\n\n        /* dialogsResult.dialogs.forEach((dialog) => {\n          newPinned[dialog.peerId] = true;\n        });\n\n        this.dialogsStorage.getFolder(folderId).forEach((dialog) => {\n          const peerId = dialog.peerId;\n          if(dialog.pFlags.pinned && !newPinned[peerId]) {\n            this.newDialogsToHandle[peerId] = {reload: true};\n            this.scheduleHandleNewDialogs();\n          }\n        }); */\n      });\n\n      return;\n    }\n\n    //this.log('before order:', this.dialogsStorage[0].map(d => d.peerId));\n\n    handleOrder(update.order.map(peer => this.appPeersManager.getPeerId((peer as DialogPeer.dialogPeer).peer)));\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { copy, safeReplaceObject } from \"../../helpers/object\";\nimport type { DialogFilter, Update } from \"../../layer\";\nimport type { Modify } from \"../../types\";\nimport type { AppPeersManager } from \"../appManagers/appPeersManager\";\nimport type { AppUsersManager } from \"../appManagers/appUsersManager\";\n//import type { ApiManagerProxy } from \"../mtproto/mtprotoworker\";\nimport type _rootScope from \"../rootScope\";\nimport type {AppMessagesManager, Dialog} from '../appManagers/appMessagesManager';\nimport type {AppNotificationsManager} from \"../appManagers/appNotificationsManager\";\nimport type { ApiUpdatesManager } from \"../appManagers/apiUpdatesManager\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport { forEachReverse } from \"../../helpers/array\";\nimport { AppStateManager } from \"../appManagers/appStateManager\";\n\nexport type MyDialogFilter = Modify<DialogFilter, {\n  /* pinned_peers: PeerId[],\n  include_peers: PeerId[],\n  exclude_peers: PeerId[], */\n  pinnedPeerIds: PeerId[],\n  includePeerIds: PeerId[],\n  excludePeerIds: PeerId[]\n}>;\n\nconst convertment = [\n  ['pinned_peers', 'pinnedPeerIds'], \n  ['exclude_peers', 'excludePeerIds'], \n  ['include_peers', 'includePeerIds']\n] as ['pinned_peers' | 'exclude_peers' | 'include_peers', 'pinnedPeerIds' | 'excludePeerIds' | 'includePeerIds'][];\n\n// ! because 0 index is 'All Chats'\nconst START_ORDER_INDEX = 1;\n\nexport default class FiltersStorage {\n  public filters: {[filterId: string]: MyDialogFilter};\n  private orderIndex: number;\n  private reloadedPeerIds: Set<PeerId>;\n\n  constructor(private appMessagesManager: AppMessagesManager,\n    private appPeersManager: AppPeersManager, \n    private appUsersManager: AppUsersManager, \n    private appNotificationsManager: AppNotificationsManager, \n    private appStateManager: AppStateManager,\n    private apiUpdatesManager: ApiUpdatesManager, \n    /* private apiManager: ApiManagerProxy, */ \n    private rootScope: typeof _rootScope) {\n    this.clear(true);\n    this.filters = {};\n\n    this.appStateManager.getState().then((state) => {\n      safeReplaceObject(this.filters, state.filters);\n\n      for(const filterId in this.filters) {\n        const filter = this.filters[filterId];\n        if(filter.hasOwnProperty('orderIndex') && filter.orderIndex >= this.orderIndex) {\n          this.orderIndex = filter.orderIndex + 1;\n        }\n\n        /* this.appMessagesManager.dialogsStorage.folders[+filterId] = {\n          dialogs: []\n        }; */\n      }\n    });\n\n    rootScope.addMultipleEventsListeners({\n      updateDialogFilter: this.onUpdateDialogFilter,\n\n      updateDialogFilters: (update) => {\n        //console.warn('updateDialogFilters', update);\n\n        const oldFilters = copy(this.filters);\n\n        this.getDialogFilters(true).then(filters => {\n          for(const _filterId in oldFilters) {\n            const filterId = +_filterId;\n            if(!filters.find(filter => filter.id === filterId)) { // * deleted\n              this.onUpdateDialogFilter({_: 'updateDialogFilter', id: filterId});\n            }\n          }\n\n          this.onUpdateDialogFilterOrder({_: 'updateDialogFilterOrder', order: filters.map(filter => filter.id)});\n        });\n      },\n\n      updateDialogFilterOrder: this.onUpdateDialogFilterOrder\n    });\n\n    // delete peers when dialog is being dropped\n    /* rootScope.addEventListener('peer_deleted', (peerId) => {\n      for(const filterId in this.filters) {\n        const filter = this.filters[filterId];\n        let modified = false;\n        [filter.pinned_peers, filter.include_peers, filter.exclude_peers].forEach(arr => {\n          forEachReverse(arr, (inputPeer, idx) => {\n            if(this.appPeersManager.getPeerId(inputPeer) === peerId) {\n              arr.splice(idx, 1);\n              modified = true;\n            }\n          });\n        });\n\n        if(modified) {\n          this.saveDialogFilter(filter, true);\n        }\n      }\n    }); */\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      safeReplaceObject(this.filters, {});\n      this.reloadedPeerIds.clear();\n    } else {\n      this.filters = {};\n      this.reloadedPeerIds = new Set();\n    }\n\n    this.orderIndex = START_ORDER_INDEX;\n  }\n\n  private onUpdateDialogFilter = (update: Update.updateDialogFilter) => {\n    if(update.filter) {\n      this.saveDialogFilter(update.filter as any);\n    } else if(this.filters[update.id]) { // Папка удалена\n      //this.getDialogFilters(true);\n      this.rootScope.dispatchEvent('filter_delete', this.filters[update.id]);\n      delete this.filters[update.id];\n    }\n\n    this.appStateManager.pushToState('filters', this.filters);\n  };\n\n  private onUpdateDialogFilterOrder = (update: Update.updateDialogFilterOrder) => {\n    //console.log('updateDialogFilterOrder', update);\n\n    this.orderIndex = START_ORDER_INDEX;\n    update.order.forEach((filterId, idx) => {\n      const filter = this.filters[filterId];\n      delete filter.orderIndex;\n      this.setOrderIndex(filter);\n    });\n\n    this.rootScope.dispatchEvent('filter_order', update.order);\n\n    this.appStateManager.pushToState('filters', this.filters);\n  };\n\n  public testDialogForFilter(dialog: Dialog, filter: MyDialogFilter) {\n    const peerId = dialog.peerId;\n\n    // * check whether dialog exists\n    if(!this.appMessagesManager.getDialogOnly(peerId)) {\n      return false;\n    }\n\n    // exclude_peers\n    if(filter.excludePeerIds.includes(peerId)) {\n      return false;\n    }\n\n    // include_peers\n    if(filter.includePeerIds.includes(peerId)) {\n      return true;\n    }\n\n    const pFlags = filter.pFlags;\n\n    // exclude_archived\n    if(pFlags.exclude_archived && dialog.folder_id === 1) {\n      return false;\n    }\n\n    // exclude_read\n    if(pFlags.exclude_read && !this.appMessagesManager.isDialogUnread(dialog)) {\n      return false;\n    }\n\n    // exclude_muted\n    if(pFlags.exclude_muted && this.appNotificationsManager.isPeerLocalMuted(peerId) && !(dialog.unread_mentions_count && dialog.unread_count)) {\n      return false;\n    }\n\n    if(this.appPeersManager.isAnyChat(peerId)) {\n      // broadcasts\n      if(pFlags.broadcasts && this.appPeersManager.isBroadcast(peerId)) {\n        return true;\n      }\n\n      // groups\n      if(pFlags.groups && this.appPeersManager.isAnyGroup(peerId)) {\n        return true;\n      }\n    } else {\n      const userId = peerId.toUserId();\n      \n      // bots\n      if(this.appUsersManager.isBot(userId)) {\n        return !!pFlags.bots;\n      }\n      \n      // non_contacts\n      if(pFlags.non_contacts && !this.appUsersManager.isContact(userId)) {\n        return true;\n      }\n\n      // contacts\n      if(pFlags.contacts && this.appUsersManager.isContact(userId)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public testDialogForFilterId(dialog: Dialog, filterId: number) {\n    return this.testDialogForFilter(dialog, this.filters[filterId]);\n  }\n\n  public getFilter(filterId: number) {\n    return this.filters[filterId];\n  }\n\n  public toggleDialogPin(peerId: PeerId, filterId: number) {\n    const filter = this.filters[filterId];\n\n    const index = filter.pinnedPeerIds.indexOf(peerId);\n    const wasPinned = index !== -1;\n\n    if(wasPinned) {\n      filter.pinned_peers.splice(index, 1);\n      filter.pinnedPeerIds.splice(index, 1);\n    }\n    \n    if(!wasPinned) {\n      if(filter.pinned_peers.length >= this.rootScope.config.pinned_infolder_count_max) {\n        return Promise.reject({type: 'PINNED_DIALOGS_TOO_MUCH'});\n      }\n      \n      filter.pinned_peers.unshift(this.appPeersManager.getInputPeerById(peerId));\n      filter.pinnedPeerIds.unshift(peerId);\n    }\n    \n    return this.updateDialogFilter(filter);\n  }\n\n  public createDialogFilter(filter: MyDialogFilter, prepend?: boolean) {\n    const maxId = Math.max(1, ...Object.keys(this.filters).map(i => +i));\n    filter = copy(filter);\n    filter.id = maxId + 1;\n    return this.updateDialogFilter(filter, undefined, prepend);\n  }\n\n  public updateDialogFilter(filter: MyDialogFilter, remove = false, prepend = false) {\n    const flags = remove ? 0 : 1;\n\n    return apiManager.invokeApi('messages.updateDialogFilter', {\n      flags,\n      id: filter.id,\n      filter: remove ? undefined : this.getOutputDialogFilter(filter)\n    }).then((bool: boolean) => { // возможно нужна проверка и откат, если результат не ТРУ\n      //console.log('updateDialogFilter bool:', bool);\n\n      if(bool) {\n        /* if(!this.filters[filter.id]) {\n          this.saveDialogFilter(filter);\n        }\n\n        rootScope.$broadcast('filter_update', filter); */\n\n        this.onUpdateDialogFilter({\n          _: 'updateDialogFilter',\n          id: filter.id,\n          filter: remove ? undefined : filter as any\n        });\n\n        if(prepend) {\n          const f: MyDialogFilter[] = [];\n          for(const filterId in this.filters) {\n            const filter = this.filters[filterId];\n            ++filter.orderIndex;\n            f.push(filter);\n          }\n\n          filter.orderIndex = START_ORDER_INDEX;\n\n          const order = f.sort((a, b) => a.orderIndex - b.orderIndex).map(filter => filter.id);\n          this.onUpdateDialogFilterOrder({\n            _: 'updateDialogFilterOrder',\n            order\n          });\n        }\n      }\n\n      return bool;\n    });\n  }\n\n  public getOutputDialogFilter(filter: MyDialogFilter) {\n    const c = copy(filter);\n    /* convertment.forEach(([from, to]) => {\n      c[from] = c[to].map((peerId) => this.appPeersManager.getInputPeerById(peerId));\n    }); */\n\n    this.filterIncludedPinnedPeers(filter);\n\n    return c;\n  }\n\n  private filterIncludedPinnedPeers(filter: MyDialogFilter) {\n    forEachReverse(filter.includePeerIds, (peerId, idx) => {\n      if(filter.pinnedPeerIds.includes(peerId)) {\n        filter.include_peers.splice(idx, 1);\n        filter.includePeerIds.splice(idx, 1);\n      }\n    });\n  }\n\n  public reloadMissingPeerIds(filterId: number, type: 'pinned_peers' | 'include_peers' | 'exclude_peers' = 'pinned_peers') {\n    const promises: Promise<any>[] = [];\n    const filter = this.getFilter(filterId);\n    const peers = filter && filter[type];\n    if(peers?.length) {\n      const reloadDialogs = peers.filter((inputPeer, idx) => {\n        const peerId = this.appPeersManager.getPeerId(inputPeer);\n        return !this.reloadedPeerIds.has(peerId) && !this.appMessagesManager.getDialogOnly(peerId);\n      });\n\n      if(reloadDialogs.length) {\n        const reloadPromises = reloadDialogs.map(inputPeer => {\n          const peerId = this.appPeersManager.getPeerId(inputPeer);\n          const promise = this.appMessagesManager.reloadConversation(inputPeer);\n          promise.then(() => {\n            this.reloadedPeerIds.add(peerId);\n          });\n          return promise;\n        });\n        const reloadPromise = Promise.all(reloadPromises);\n        promises.push(reloadPromise);\n      }\n    }\n\n    return promises.length ? Promise.all(promises) : undefined;\n  }\n\n  public async getDialogFilters(overwrite = false): Promise<MyDialogFilter[]> {\n    const keys = Object.keys(this.filters);\n    if(keys.length && !overwrite) {\n      return keys.map(filterId => this.filters[filterId]).sort((a, b) => a.orderIndex - b.orderIndex);\n    }\n\n    const filters: MyDialogFilter[] = await apiManager.invokeApiSingle('messages.getDialogFilters') as any;\n    for(const filter of filters) {\n      this.saveDialogFilter(filter, overwrite);\n    }\n\n    //console.log(this.filters);\n    return filters;\n  }\n\n  public saveDialogFilter(filter: MyDialogFilter, update = true) {\n    // defineNotNumerableProperties(filter, ['includePeerIds', 'excludePeerIds', 'pinnedPeerIds']);\n\n    convertment.forEach(([from, to]) => {\n      filter[to] = filter[from].map((peer) => this.appPeersManager.getPeerId(peer));\n    });\n\n    this.filterIncludedPinnedPeers(filter);\n    \n    filter.include_peers = filter.pinned_peers.concat(filter.include_peers);\n    filter.includePeerIds = filter.pinnedPeerIds.concat(filter.includePeerIds);\n\n    const oldFilter = this.filters[filter.id];\n    if(oldFilter) {\n      Object.assign(oldFilter, filter);\n    } else {\n      this.filters[filter.id] = filter;\n    }\n    \n    this.setOrderIndex(filter);\n    \n    if(update) {\n      this.rootScope.dispatchEvent('filter_update', filter);\n    } else if(!oldFilter) {\n      this.rootScope.dispatchEvent('filter_new', filter);\n    }\n  }\n\n  public setOrderIndex(filter: MyDialogFilter) {\n    if(filter.hasOwnProperty('orderIndex')) {\n      if(filter.orderIndex >= this.orderIndex) {\n        this.orderIndex = filter.orderIndex + 1;\n      }\n    } else {\n      filter.orderIndex = this.orderIndex++ as DialogFilter['orderIndex'];\n    }\n\n    this.appStateManager.pushToState('filters', this.filters);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { LazyLoadQueueBase } from \"../../components/lazyLoadQueue\";\nimport ProgressivePreloader from \"../../components/preloader\";\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\nimport { formatDateAccordingToTodayNew, formatTime, tsNow } from \"../../helpers/date\";\nimport { createPosterForVideo } from \"../../helpers/files\";\nimport { copy, deepEqual, getObjectKeysAndSort } from \"../../helpers/object\";\nimport { randomLong } from \"../../helpers/random\";\nimport { splitStringByLength, limitSymbols, escapeRegExp } from \"../../helpers/string\";\nimport { Chat, ChatFull, Dialog as MTDialog, DialogPeer, DocumentAttribute, InputMedia, InputMessage, InputPeerNotifySettings, InputSingleMedia, Message, MessageAction, MessageEntity, MessageFwdHeader, MessageMedia, MessageReplies, MessageReplyHeader, MessagesDialogs, MessagesFilter, MessagesMessages, MethodDeclMap, NotifyPeer, PeerNotifySettings, PhotoSize, SendMessageAction, Update, Photo, Updates, ReplyMarkup, InputPeer, InputPhoto, InputDocument, InputGeoPoint, WebPage, GeoPoint, ReportReason, MessagesGetDialogs, InputChannel, InputDialogPeer, ReactionCount, MessagePeerReaction, MessagesSearchCounter, Peer } from \"../../layer\";\nimport { InvokeApiOptions } from \"../../types\";\nimport I18n, { FormatterArguments, i18n, join, langPack, LangPackKey, UNSUPPORTED_LANG_PACK_KEY, _i18n } from \"../langPack\";\nimport { logger, LogTypes } from \"../logger\";\nimport type { ApiFileManager } from '../mtproto/apiFileManager';\n//import apiManager from '../mtproto/apiManager';\nimport apiManager from '../mtproto/mtprotoworker';\nimport referenceDatabase, { ReferenceContext } from \"../mtproto/referenceDatabase\";\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport DialogsStorage, { GLOBAL_FOLDER_ID } from \"../storages/dialogs\";\nimport FiltersStorage from \"../storages/filters\";\n//import { telegramMeWebService } from \"../mtproto/mtproto\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager, { ChatRights } from \"./appChatsManager\";\nimport appDocsManager, { MyDocument } from \"./appDocsManager\";\nimport appDownloadManager from \"./appDownloadManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appPhotosManager, { MyPhoto } from \"./appPhotosManager\";\nimport appPollsManager from \"./appPollsManager\";\nimport appStateManager from \"./appStateManager\";\nimport appUsersManager from \"./appUsersManager\";\nimport appWebPagesManager from \"./appWebPagesManager\";\nimport appDraftsManager, { MyDraftMessage } from \"./appDraftsManager\";\nimport { getFileNameByLocation } from \"../../helpers/fileName\";\nimport appProfileManager from \"./appProfileManager\";\nimport DEBUG, { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport SlicedArray, { Slice, SliceEnd } from \"../../helpers/slicedArray\";\nimport appNotificationsManager, { NotifyOptions } from \"./appNotificationsManager\";\nimport PeerTitle from \"../../components/peerTitle\";\nimport { forEachReverse, indexOfAndSplice } from \"../../helpers/array\";\nimport htmlToDocumentFragment from \"../../helpers/dom/htmlToDocumentFragment\";\nimport htmlToSpan from \"../../helpers/dom/htmlToSpan\";\nimport { MUTE_UNTIL, NULL_PEER_ID, REPLIES_PEER_ID, SERVICE_PEER_ID } from \"../mtproto/mtproto_config\";\nimport formatCallDuration from \"../../helpers/formatCallDuration\";\nimport appAvatarsManager from \"./appAvatarsManager\";\nimport telegramMeWebManager from \"../mtproto/telegramMeWebManager\";\nimport { getMiddleware } from \"../../helpers/middleware\";\nimport assumeType from \"../../helpers/assumeType\";\nimport appMessagesIdsManager from \"./appMessagesIdsManager\";\nimport type { MediaSize } from \"../../helpers/mediaSizes\";\nimport IMAGE_MIME_TYPES_SUPPORTED from \"../../environment/imageMimeTypesSupport\";\nimport VIDEO_MIME_TYPES_SUPPORTED from \"../../environment/videoMimeTypesSupport\";\nimport './appGroupCallsManager';\nimport appGroupCallsManager from \"./appGroupCallsManager\";\nimport appReactionsManager from \"./appReactionsManager\";\nimport { getRestrictionReason, isRestricted } from \"../../helpers/restrictions\";\n\n//console.trace('include');\n// TODO: если удалить диалог находясь в папке, то он не удалится из папки и будет виден в настройках\n\nconst APITIMEOUT = 0;\nconst DO_NOT_READ_HISTORY = false;\n\nexport type HistoryStorage = {\n  count: number | null,\n  history: SlicedArray,\n\n  maxId?: number,\n  readPromise?: Promise<void>,\n  readMaxId?: number,\n  readOutboxMaxId?: number,\n  triedToReadMaxId?: number,\n\n  maxOutId?: number,\n  replyMarkup?: Exclude<ReplyMarkup, ReplyMarkup.replyInlineMarkup>\n};\n\nexport type HistoryResult = {\n  count: number,\n  history: Slice,\n  offsetIdOffset?: number,\n};\n\nexport type Dialog = MTDialog.dialog;\n\nexport type MyMessage = Message.message | Message.messageService;\nexport type MyInputMessagesFilter = 'inputMessagesFilterEmpty' \n  | 'inputMessagesFilterPhotos' \n  | 'inputMessagesFilterPhotoVideo' \n  | 'inputMessagesFilterVideo' \n  | 'inputMessagesFilterDocument' \n  | 'inputMessagesFilterVoice' \n  | 'inputMessagesFilterRoundVoice' \n  | 'inputMessagesFilterRoundVideo' \n  | 'inputMessagesFilterMusic' \n  | 'inputMessagesFilterUrl' \n  | 'inputMessagesFilterMyMentions'\n  | 'inputMessagesFilterChatPhotos'\n  | 'inputMessagesFilterPinned';\n\nexport type PinnedStorage = Partial<{\n  promise: Promise<PinnedStorage>,\n  count: number,\n  maxId: number\n}>;\nexport type MessagesStorage = Map<number, any>;\n\nexport type MyMessageActionType = Message.messageService['action']['_'];\n\ntype PendingAfterMsg = Partial<InvokeApiOptions & {\n  afterMessageId: string,\n  messageId: string\n}>;\n\nexport class AppMessagesManager {\n  private messagesStorageByPeerId: {[peerId: string]: MessagesStorage};\n  public groupedMessagesStorage: {[groupId: string]: MessagesStorage}; // will be used for albums\n  private scheduledMessagesStorage: {[peerId: PeerId]: MessagesStorage};\n  private historiesStorage: {\n    [peerId: PeerId]: HistoryStorage\n  };\n  private threadsStorage: {\n    [peerId: PeerId]: {\n      [threadId: string]: HistoryStorage\n    }\n  };\n  private searchesStorage: {\n    [peerId: PeerId]: Partial<{\n      [inputFilter in MyInputMessagesFilter]: {\n        count?: number,\n        history: number[]\n      }\n    }>\n  };\n  public pinnedMessages: {[peerId: PeerId]: PinnedStorage};\n\n  public threadsServiceMessagesIdsStorage: {[peerId_threadId: string]: number};\n  private threadsToReplies: {\n    [peerId_threadId: string]: string;\n  };\n\n  private pendingByRandomId: {\n    [randomId: string]: {\n      peerId: PeerId,\n      tempId: number,\n      threadId: number,\n      storage: MessagesStorage\n    }\n  } = {};\n  private pendingByMessageId: {[mid: string]: Long} = {};\n  private pendingAfterMsgs: {[peerId: PeerId]: PendingAfterMsg} = {};\n  public pendingTopMsgs: {[peerId: PeerId]: number} = {};\n  private tempFinalizeCallbacks: {\n    [tempId: string]: {\n      [callbackName: string]: Partial<{\n        deferred: CancellablePromise<void>, \n        callback: (message: any) => Promise<any>\n      }>\n    }\n  } = {};\n  \n  private sendSmthLazyLoadQueue = new LazyLoadQueueBase(10);\n\n  private needSingleMessages: Map<PeerId, Map<number, CancellablePromise<Message>>> = new Map();\n  private fetchSingleMessagesPromise: Promise<void> = null;\n\n  private maxSeenId = 0;\n\n  public migratedFromTo: {[peerId: PeerId]: PeerId} = {};\n  public migratedToFrom: {[peerId: PeerId]: PeerId} = {};\n\n  private newMessagesHandleTimeout = 0;\n  private newMessagesToHandle: {[peerId: PeerId]: Set<number>} = {};\n  private newDialogsHandlePromise: Promise<any>;\n  private newDialogsToHandle: {[peerId: PeerId]: Dialog} = {};\n  public newUpdatesAfterReloadToHandle: {[peerId: PeerId]: Set<Update>} = {};\n\n  private notificationsHandlePromise = 0;\n  private notificationsToHandle: {[peerId: PeerId]: {\n    fwdCount: number,\n    fromId: PeerId,\n    topMessage?: MyMessage\n  }} = {};\n\n  private reloadConversationsPromise: Promise<void>;\n  private reloadConversationsPeers: Map<PeerId, {inputDialogPeer: InputDialogPeer, promise: CancellablePromise<Dialog>}> = new Map();\n\n  public log = logger('MESSAGES', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn);\n\n  public dialogsStorage: DialogsStorage;\n  public filtersStorage: FiltersStorage;\n\n  private groupedTempId = 0;\n\n  private typings: {[peerId: PeerId]: {action: SendMessageAction, timeout?: number}} = {};\n\n  private middleware: ReturnType<typeof getMiddleware>;\n\n  private unreadMentions: {[peerId: PeerId]: SlicedArray} = {};\n  private goToNextMentionPromises: {[peerId: PeerId]: Promise<any>} = {};\n\n  constructor() {\n    this.clear();\n\n    rootScope.addMultipleEventsListeners({\n      updateMessageID: this.onUpdateMessageId,\n\n      updateNewDiscussionMessage: this.onUpdateNewMessage,\n      updateNewMessage: this.onUpdateNewMessage,\n      updateNewChannelMessage: this.onUpdateNewMessage,\n\n      updateDialogUnreadMark: this.onUpdateDialogUnreadMark,\n\n      updateEditMessage: this.onUpdateEditMessage,\n      updateEditChannelMessage: this.onUpdateEditMessage,\n\n      updateMessageReactions: this.onUpdateMessageReactions,\n\n      updateReadChannelDiscussionInbox: this.onUpdateReadHistory,\n      updateReadChannelDiscussionOutbox: this.onUpdateReadHistory,\n      updateReadHistoryInbox: this.onUpdateReadHistory,\n      updateReadHistoryOutbox: this.onUpdateReadHistory,\n      updateReadChannelInbox: this.onUpdateReadHistory,\n      updateReadChannelOutbox: this.onUpdateReadHistory,\n\n      updateChannelReadMessagesContents: this.onUpdateReadMessagesContents,\n      updateReadMessagesContents: this.onUpdateReadMessagesContents,\n\n      updateChannelAvailableMessages: this.onUpdateChannelAvailableMessages,\n\n      updateDeleteMessages: this.onUpdateDeleteMessages,\n      updateDeleteChannelMessages: this.onUpdateDeleteMessages,\n\n      updateChannel: this.onUpdateChannel,\n\n      updateChannelReload: this.onUpdateChannelReload,\n\n      updateChannelMessageViews: this.onUpdateChannelMessageViews,\n\n      updateServiceNotification: this.onUpdateServiceNotification,\n\n      updatePinnedMessages: this.onUpdatePinnedMessages,\n      updatePinnedChannelMessages: this.onUpdatePinnedMessages,\n\n      updateNotifySettings: this.onUpdateNotifySettings,\n\n      updateNewScheduledMessage: this.onUpdateNewScheduledMessage,\n\n      updateDeleteScheduledMessages: this.onUpdateDeleteScheduledMessages\n    });\n\n    // ! Invalidate notify settings, can optimize though\n    rootScope.addEventListener('notify_peer_type_settings', ({key, settings}) => {\n      const dialogs = this.dialogsStorage.getFolderDialogs(0).concat(this.dialogsStorage.getFolderDialogs(1));\n      let filterFunc: (dialog: Dialog) => boolean;\n      if(key === 'notifyUsers') filterFunc = (dialog) => dialog.peerId.isUser();\n      else if(key === 'notifyBroadcasts') filterFunc = (dialog) => dialog.peerId.isBroadcast();\n      else filterFunc = (dialog) => appPeersManager.isAnyGroup(dialog.peerId);\n\n      dialogs\n      .filter(filterFunc)\n      .forEach(dialog => {\n        rootScope.dispatchEvent('dialog_notify_settings', dialog);\n      });\n    });\n\n    rootScope.addEventListener('webpage_updated', ({id, msgs}) => {\n      msgs.forEach(({peerId, mid, isScheduled}) => {\n        const storage = isScheduled ? this.getScheduledMessagesStorage(peerId) : this.getMessagesStorage(peerId);\n        const message = this.getMessageFromStorage(storage, mid) as Message.message;\n        if(!message) return;\n        message.media = {\n          _: 'messageMediaWebPage', \n          webpage: appWebPagesManager.getWebPage(id)\n        };\n\n        rootScope.dispatchEvent('message_edit', {\n          storage,\n          peerId,\n          mid\n        });\n      });\n    });\n\n    rootScope.addEventListener('draft_updated', ({peerId, threadId, draft}) => {\n      if(threadId) return;\n\n      const dialog = this.getDialogOnly(peerId);\n      if(dialog) {\n        if(!threadId) {\n          dialog.draft = draft;\n\n          let drop = false;\n          if(!draft && !appMessagesIdsManager.getServerMessageId(dialog.top_message)) {\n            this.dialogsStorage.dropDialog(peerId);\n            drop = true;\n          } else {\n            this.dialogsStorage.generateIndexForDialog(dialog);\n            this.dialogsStorage.pushDialog(dialog);\n          }\n\n          rootScope.dispatchEvent('dialog_draft', {\n            peerId,\n            dialog,\n            drop,\n            draft,\n            index: dialog.index\n          });\n        }\n      } else {\n        this.reloadConversation(peerId);\n      }\n    });\n\n    rootScope.addEventListener('poll_update', ({poll}) => {\n      const set = appPollsManager.pollToMessages[poll.id];\n      if(set) {\n        for(const key of set) {\n          const [peerId, mid] = key.split('_');\n\n          const message = this.getMessageByPeer(peerId.toPeerId(), +mid);\n          this.setDialogToStateIfMessageIsTop(message);\n        }\n      }\n    });\n    \n    appStateManager.getState().then(state => {\n      if(state.maxSeenMsgId) {\n        this.maxSeenId = state.maxSeenMsgId;\n      }\n    });\n  }\n\n  public clear() {\n    if(this.middleware) {\n      this.middleware.clean();\n    } else {\n      this.middleware = getMiddleware();\n    }\n\n    this.messagesStorageByPeerId = {};\n    this.groupedMessagesStorage = {};\n    this.scheduledMessagesStorage = {};\n    this.historiesStorage = {};\n    this.threadsStorage = {};\n    this.searchesStorage = {};\n    this.pinnedMessages = {};\n    this.threadsServiceMessagesIdsStorage = {};\n    this.threadsToReplies = {};\n\n    this.dialogsStorage && this.dialogsStorage.clear();\n    this.filtersStorage && this.filtersStorage.clear();\n  }\n\n  public construct() {\n    this.filtersStorage = new FiltersStorage(this, appPeersManager, appUsersManager, appNotificationsManager, appStateManager, apiUpdatesManager, /* apiManager, */ rootScope);\n    this.dialogsStorage = new DialogsStorage(this, appChatsManager, appPeersManager, appUsersManager, appDraftsManager, appNotificationsManager, appStateManager, apiUpdatesManager, serverTimeManager, appMessagesIdsManager);\n  }\n\n  public getInputEntities(entities: MessageEntity[]) {\n    const sendEntites = copy(entities);\n    sendEntites.forEach((entity) => {\n      if(entity._ === 'messageEntityMentionName') {\n        (entity as any as MessageEntity.inputMessageEntityMentionName)._ = 'inputMessageEntityMentionName';\n        (entity as any as MessageEntity.inputMessageEntityMentionName).user_id = appUsersManager.getUserInput(entity.user_id);\n      }\n    });\n    return sendEntites;\n  }\n\n  public invokeAfterMessageIsSent(tempId: number, callbackName: string, callback: (message: any) => Promise<any>) {\n    const finalize = this.tempFinalizeCallbacks[tempId] ?? (this.tempFinalizeCallbacks[tempId] = {});\n    const obj = finalize[callbackName] ?? (finalize[callbackName] = {deferred: deferredPromise<void>()});\n\n    obj.callback = callback;\n\n    return obj.deferred;\n  }\n\n  public editMessage(message: any, text: string, options: Partial<{\n    noWebPage: true,\n    newMedia: any,\n    scheduleDate: number,\n    entities: MessageEntity[]\n  }> = {}): Promise<void> {\n    /* if(!this.canEditMessage(messageId)) {\n      return Promise.reject({type: 'MESSAGE_EDIT_FORBIDDEN'});\n    } */\n\n    const {mid, peerId} = message;\n\n    if(message.pFlags.is_outgoing) {\n      return this.invokeAfterMessageIsSent(mid, 'edit', (message) => {\n        //this.log('invoke editMessage callback', message);\n        return this.editMessage(message, text, options);\n      });\n    }\n\n    let entities = options.entities || [];\n    if(text) {\n      text = RichTextProcessor.parseMarkdown(text, entities);\n    }\n\n    const schedule_date = options.scheduleDate || (message.pFlags.is_scheduled ? message.date : undefined);\n    return apiManager.invokeApi('messages.editMessage', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      id: message.id,\n      message: text,\n      media: options.newMedia,\n      entities: entities.length ? this.getInputEntities(entities) : undefined,\n      no_webpage: options.noWebPage,\n      schedule_date\n    }).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    }, (error) => {\n      this.log.error('editMessage error:', error);\n      \n      if(error && error.type === 'MESSAGE_NOT_MODIFIED') {\n        error.handled = true;\n        return;\n      }\n      if(error && error.type === 'MESSAGE_EMPTY') {\n        error.handled = true;\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  public sendText(peerId: PeerId, text: string, options: Partial<{\n    entities: MessageEntity[],\n    replyToMsgId: number,\n    threadId: number,\n    viaBotId: BotId,\n    queryId: string,\n    resultId: string,\n    noWebPage: true,\n    replyMarkup: ReplyMarkup,\n    clearDraft: true,\n    webPage: WebPage,\n    scheduleDate: number,\n    silent: true\n  }> = {}) {\n    if(!text.trim()) {\n      return Promise.resolve();\n    }\n\n    //this.checkSendOptions(options);\n\n    if(options.threadId && !options.replyToMsgId) {\n      options.replyToMsgId = options.threadId;\n    }\n\n    const MAX_LENGTH = rootScope.config.message_length_max;\n    if(text.length > MAX_LENGTH) {\n      const splitted = splitStringByLength(text, MAX_LENGTH);\n      text = splitted[0];\n\n      if(splitted.length > 1) {\n        delete options.webPage;\n      }\n\n      for(let i = 1; i < splitted.length; ++i) {\n        setTimeout(() => {\n          this.sendText(peerId, splitted[i], options);\n        }, i);\n      }\n    }\n\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\n\n    let entities = options.entities || [];\n    if(!options.viaBotId) {\n      text = RichTextProcessor.parseMarkdown(text, entities);\n      //entities = RichTextProcessor.mergeEntities(entities, RichTextProcessor.parseEntities(text));\n    }\n\n    let sendEntites = this.getInputEntities(entities);\n    if(!sendEntites.length) {\n      sendEntites = undefined;\n    }\n\n    const message = this.generateOutgoingMessage(peerId, options);\n    message.entities = entities;\n    message.message = text;\n\n    const replyToMsgId = options.replyToMsgId ? appMessagesIdsManager.getServerMessageId(options.replyToMsgId) : undefined;\n    const isChannel = appPeersManager.isChannel(peerId);\n\n    if(options.webPage) {\n      message.media = {\n        _: 'messageMediaWebPage',\n        webpage: options.webPage\n      };\n    }\n\n    const toggleError = (on: boolean) => {\n      if(on) {\n        message.error = true;\n      } else {\n        delete message.error;\n      }\n      rootScope.dispatchEvent('messages_pending');\n    };\n\n    message.send = () => {\n      toggleError(false);\n      const sentRequestOptions: PendingAfterMsg = {};\n      if(this.pendingAfterMsgs[peerId]) {\n        sentRequestOptions.afterMessageId = this.pendingAfterMsgs[peerId].messageId;\n      }\n\n      let apiPromise: any;\n      if(options.viaBotId) {\n        apiPromise = apiManager.invokeApiAfter('messages.sendInlineBotResult', {\n          peer: appPeersManager.getInputPeerById(peerId),\n          random_id: message.random_id,\n          reply_to_msg_id: replyToMsgId || undefined,\n          query_id: options.queryId,\n          id: options.resultId,\n          clear_draft: options.clearDraft\n        }, sentRequestOptions);\n      } else {\n        apiPromise = apiManager.invokeApiAfter('messages.sendMessage', {\n          no_webpage: options.noWebPage,\n          peer: appPeersManager.getInputPeerById(peerId),\n          message: text,\n          random_id: message.random_id,\n          reply_to_msg_id: replyToMsgId || undefined,\n          entities: sendEntites,\n          clear_draft: options.clearDraft,\n          schedule_date: options.scheduleDate || undefined,\n          silent: options.silent\n        }, sentRequestOptions);\n      }\n\n      /* function is<T>(value: any, condition: boolean): value is T {\n        return condition;\n      } */\n\n      //this.log('sendText', message.mid);\n      this.pendingAfterMsgs[peerId] = sentRequestOptions;\n\n      return apiPromise.then((updates: Updates) => {\n        //this.log('sendText sent', message.mid);\n        //if(is<Updates.updateShortSentMessage>(updates, updates._ === 'updateShortSentMessage')) {\n        if(updates._ === 'updateShortSentMessage') {\n          //assumeType<Updates.updateShortSentMessage>(updates);\n\n          // * fix copying object with promise\n          const promise = message.promise;\n          delete message.promise;\n          const newMessage = copy(message);\n          message.promise = promise;\n\n          newMessage.date = updates.date;\n          newMessage.id = updates.id;\n          newMessage.media = updates.media;\n          newMessage.entities = updates.entities;\n          this.wrapMessageEntities(newMessage);\n          if(updates.pFlags.out) {\n            newMessage.pFlags.out = true;\n          }\n\n          // * override with new updates\n          updates = {\n            _: 'updates',\n            users: [],\n            chats: [],\n            seq: 0,\n            date: undefined,\n            updates: [{\n              _: 'updateMessageID',\n              random_id: message.random_id,\n              id: newMessage.id\n            }, {\n              _: options.scheduleDate ? 'updateNewScheduledMessage' : (isChannel ? 'updateNewChannelMessage' : 'updateNewMessage'),\n              message: newMessage,\n              pts: updates.pts,\n              pts_count: updates.pts_count\n            }]\n          };\n        } else if((updates as Updates.updates).updates) {\n          (updates as Updates.updates).updates.forEach((update) => {\n            if(update._ === 'updateDraftMessage') {\n              update.local = true;\n            }\n          });\n        }\n        // Testing bad situations\n        // var upd = angular.copy(updates)\n        // updates.updates.splice(0, 1)\n\n        apiUpdatesManager.processUpdateMessage(updates);\n\n        // $timeout(function () {\n        // ApiUpdatesManager.processUpdateMessage(upd)\n        // }, 5000)\n        message.promise.resolve();\n      }, (error: any) => {\n        toggleError(true);\n        message.promise.reject(error);\n      }).finally(() => {\n        if(this.pendingAfterMsgs[peerId] === sentRequestOptions) {\n          delete this.pendingAfterMsgs[peerId];\n        }\n      });\n    };\n\n    this.beforeMessageSending(message, {\n      isScheduled: !!options.scheduleDate || undefined, \n      threadId: options.threadId,\n      clearDraft: options.clearDraft\n    });\n\n    return message.promise;\n  }\n\n  public sendFile(peerId: PeerId, file: File | Blob | MyDocument, options: Partial<{\n    isRoundMessage: true,\n    isVoiceMessage: true,\n    isGroupedItem: true,\n    isMedia: true,\n\n    replyToMsgId: number,\n    threadId: number,\n    groupId: string,\n    caption: string,\n    entities: MessageEntity[],\n    width: number,\n    height: number,\n    objectURL: string,\n    thumb: {\n      blob: Blob,\n      url: string,\n      size: MediaSize\n    },\n    duration: number,\n    background: true,\n    silent: true,\n    clearDraft: true,\n    scheduleDate: number,\n    noSound: boolean,\n\n    waveform: Uint8Array,\n  }> = {}) {\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\n\n    //this.checkSendOptions(options);\n\n    const message = this.generateOutgoingMessage(peerId, options);\n    const replyToMsgId = options.replyToMsgId ? appMessagesIdsManager.getServerMessageId(options.replyToMsgId) : undefined;\n\n    let attachType: 'document' | 'audio' | 'video' | 'voice' | 'photo', apiFileName: string;\n\n    const fileType = 'mime_type' in file ? file.mime_type : file.type;\n    const fileName = file instanceof File ? file.name : '';\n    const isDocument = !(file instanceof File) && !(file instanceof Blob);\n    let caption = options.caption || '';\n\n    this.log('sendFile', file, fileType);\n\n    const entities = options.entities || [];\n    if(caption) {\n      caption = RichTextProcessor.parseMarkdown(caption, entities);\n    }\n\n    const attributes: DocumentAttribute[] = [];\n\n    const isPhoto = IMAGE_MIME_TYPES_SUPPORTED.has(fileType);\n\n    let photo: MyPhoto, document: MyDocument;\n\n    let actionName: Extract<SendMessageAction['_'], 'sendMessageUploadAudioAction' | 'sendMessageUploadDocumentAction' | 'sendMessageUploadPhotoAction' | 'sendMessageUploadVideoAction'>;\n    if(isDocument) { // maybe it's a sticker or gif\n      attachType = 'document';\n      apiFileName = '';\n    } else if(fileType.indexOf('audio/') === 0 || ['video/ogg'].indexOf(fileType) >= 0) {\n      attachType = 'audio';\n      apiFileName = 'audio.' + (fileType.split('/')[1] === 'ogg' ? 'ogg' : 'mp3');\n      actionName = 'sendMessageUploadAudioAction';\n\n      if(options.isVoiceMessage) {\n        attachType = 'voice';\n        message.pFlags.media_unread = true;\n      }\n\n      let attribute: DocumentAttribute.documentAttributeAudio = {\n        _: 'documentAttributeAudio',\n        pFlags: {\n          voice: options.isVoiceMessage\n        },\n        waveform: options.waveform,\n        duration: options.duration || 0\n      };\n\n      attributes.push(attribute);\n    } else if(!options.isMedia) {\n      attachType = 'document';\n      apiFileName = 'document.' + fileType.split('/')[1];\n      actionName = 'sendMessageUploadDocumentAction';\n    } else if(isPhoto) {\n      attachType = 'photo';\n      apiFileName = 'photo.' + fileType.split('/')[1];\n      actionName = 'sendMessageUploadPhotoAction';\n\n      const photoSize = {\n        _: 'photoSize',\n        w: options.width,\n        h: options.height,\n        type: 'full',\n        location: null,\n        size: file.size\n      } as PhotoSize.photoSize;\n\n      photo = {\n        _: 'photo',\n        id: '' + message.id,\n        sizes: [photoSize],\n        w: options.width,\n        h: options.height\n      } as any;\n\n      const cacheContext = appDownloadManager.getCacheContext(photo, photoSize.type);\n      cacheContext.downloaded = file.size;\n      cacheContext.url = options.objectURL || '';\n      \n      photo = appPhotosManager.savePhoto(photo);\n    } else if(VIDEO_MIME_TYPES_SUPPORTED.has(fileType)) {\n      attachType = 'video';\n      apiFileName = 'video.mp4';\n      actionName = 'sendMessageUploadVideoAction';\n\n      const videoAttribute: DocumentAttribute.documentAttributeVideo = {\n        _: 'documentAttributeVideo',\n        pFlags: {\n          round_message: options.isRoundMessage,\n          supports_streaming: true\n        }, \n        duration: options.duration,\n        w: options.width,\n        h: options.height\n      };\n\n      attributes.push(videoAttribute);\n\n      // * must follow after video attribute\n      if(options.noSound && \n        file.size > (10 * 1024) && \n        file.size < (10 * 1024 * 1024)) {\n        attributes.push({\n          _: 'documentAttributeAnimated'\n        });\n      }\n    } else {\n      attachType = 'document';\n      apiFileName = 'document.' + fileType.split('/')[1];\n      actionName = 'sendMessageUploadDocumentAction';\n    }\n\n    attributes.push({_: 'documentAttributeFilename', file_name: fileName || apiFileName});\n\n    if((['document', 'video', 'audio', 'voice'] as (typeof attachType)[]).indexOf(attachType) !== -1 && !isDocument) {\n      const thumbs: PhotoSize[] = [];\n      document = {\n        _: 'document',\n        id: '' + message.id,\n        duration: options.duration,\n        attributes,\n        w: options.width,\n        h: options.height,\n        thumbs,\n        mime_type: fileType,\n        size: file.size\n      } as any;\n\n      const cacheContext = appDownloadManager.getCacheContext(document);\n      cacheContext.downloaded = file.size;\n      cacheContext.url = options.objectURL || '';\n\n      let thumb: PhotoSize.photoSize;\n      if(isPhoto) {\n        attributes.push({\n          _: 'documentAttributeImageSize',\n          w: options.width,\n          h: options.height\n        });\n\n        thumb = {\n          _: 'photoSize',\n          w: options.width,\n          h: options.height,\n          type: 'full',\n          size: file.size\n        };\n      } else if(attachType === 'video') {\n        if(options.thumb) {\n          thumb = {\n            _: 'photoSize',\n            w: options.thumb.size.width,\n            h: options.thumb.size.height,\n            type: 'local-thumb',\n            size: options.thumb.blob.size\n          };\n\n          const thumbCacheContext = appDownloadManager.getCacheContext(document, thumb.type);\n          thumbCacheContext.downloaded = thumb.size;\n          thumbCacheContext.url = options.thumb.url;\n        }\n      }\n\n      if(thumb) {\n        thumbs.push(thumb);\n      }\n\n      /* if(thumbs.length) {\n        const thumb = thumbs[0] as PhotoSize.photoSize;\n        const docThumb = appPhotosManager.getDocumentCachedThumb(document.id);\n        docThumb.downloaded = thumb.size;\n        docThumb.url = thumb.url;\n      } */\n      \n      document = appDocsManager.saveDoc(document);\n    }\n\n    this.log('sendFile', attachType, apiFileName, file.type, options);\n\n    const preloader = isDocument ? undefined : new ProgressivePreloader({\n      attachMethod: 'prepend',\n      tryAgainOnFail: false,\n      isUpload: true\n    });\n\n    const sentDeferred = deferredPromise<InputMedia>();\n\n    if(preloader) {\n      preloader.attachPromise(sentDeferred);\n      sentDeferred.cancel = () => {\n        const error = new Error('Download canceled');\n        error.name = 'AbortError';\n        sentDeferred.reject(error);\n      };\n\n      sentDeferred.catch(err => {\n        if(err.name === 'AbortError' && !uploaded) {\n          this.log('cancelling upload', media);\n\n          this.cancelPendingMessage(message.random_id);\n          this.setTyping(peerId, {_: 'sendMessageCancelAction'});\n\n          if(uploadPromise?.cancel) {\n            uploadPromise.cancel();\n          }\n        }\n      });\n    }\n\n    const media = isDocument ? undefined : {\n      _: photo ? 'messageMediaPhoto' : 'messageMediaDocument',\n      pFlags: {},\n      preloader,\n      photo,\n      document,\n      promise: sentDeferred\n    };\n\n    message.entities = entities;\n    message.message = caption;\n    message.media = isDocument ? {\n      _: 'messageMediaDocument',\n      pFlags: {},\n      document: file \n    } as MessageMedia.messageMediaDocument : media as any;\n\n    const toggleError = (on: boolean) => {\n      if(on) {\n        message.error = true;\n      } else {\n        delete message.error;\n      }\n\n      rootScope.dispatchEvent('messages_pending');\n    };\n\n    let uploaded = false,\n      uploadPromise: ReturnType<ApiFileManager['uploadFile']> = null;\n\n    message.send = () => {\n      if(isDocument) {\n        const {id, access_hash, file_reference} = file as MyDocument;\n\n        const inputMedia: InputMedia = {\n          _: 'inputMediaDocument',\n          id: {\n            _: 'inputDocument',\n            id,\n            access_hash,\n            file_reference\n          }\n        };\n        \n        sentDeferred.resolve(inputMedia);\n      } else if(file instanceof File || file instanceof Blob) {\n        const load = () => {\n          if(!uploaded || message.error) {\n            uploaded = false;\n            uploadPromise = appDownloadManager.upload(file);\n            sentDeferred.notifyAll({done: 0, total: file.size});\n          }\n\n          let thumbUploadPromise: typeof uploadPromise;\n          if(attachType === 'video' && options.objectURL) {\n            thumbUploadPromise = new Promise((resolve, reject) => {\n              const thumbPromise = options.thumb && options.thumb.blob ? Promise.resolve(options.thumb) : createPosterForVideo(options.objectURL);\n              thumbPromise.then(thumb => {\n                if(!thumb) {\n                  resolve(null);\n                } else {\n                  appDownloadManager.upload(thumb.blob).then(resolve, reject);\n                }\n              }, reject);\n            });\n          }\n  \n          uploadPromise && uploadPromise.then(async(inputFile) => {\n            /* if(DEBUG) {\n              this.log('appMessagesManager: sendFile uploaded:', inputFile);\n            } */\n\n            // @ts-ignore\n            delete message.media.preloader;\n\n            inputFile.name = apiFileName;\n            uploaded = true;\n            let inputMedia: InputMedia;\n            switch(attachType) {\n              case 'photo':\n                inputMedia = {\n                  _: 'inputMediaUploadedPhoto', \n                  file: inputFile,\n                };\n                break;\n\n              default:\n                inputMedia = {\n                  _: 'inputMediaUploadedDocument', \n                  file: inputFile, \n                  mime_type: fileType, \n                  pFlags: {\n                    force_file: actionName === 'sendMessageUploadDocumentAction' ? true : undefined,\n                    // nosound_video: options.noSound ? true : undefined\n                  },\n                  attributes\n                };\n            }\n\n            if(thumbUploadPromise) {\n              try {\n                const inputFile = await thumbUploadPromise;\n                (inputMedia as InputMedia.inputMediaUploadedDocument).thumb = inputFile;\n              } catch(err) {\n                this.log.error('sendFile thumb upload error:', err);\n              }\n            }\n            \n            sentDeferred.resolve(inputMedia);\n          }, (/* error */) => {\n            toggleError(true);\n          });\n  \n          uploadPromise.addNotifyListener((progress: {done: number, total: number}) => {\n            /* if(DEBUG) {\n              this.log('upload progress', progress);\n            } */\n\n            const percents = Math.max(1, Math.floor(100 * progress.done / progress.total));\n            if(actionName) {\n              this.setTyping(peerId, {_: actionName, progress: percents | 0});\n            }\n            sentDeferred.notifyAll(progress);\n          });\n\n          return sentDeferred;\n        };\n\n        if(options.isGroupedItem) {\n          load();\n        } else {\n          this.sendSmthLazyLoadQueue.push({\n            load\n          });\n        }\n      }\n\n      return sentDeferred;\n    };\n\n    this.beforeMessageSending(message, {\n      isGroupedItem: options.isGroupedItem, \n      isScheduled: !!options.scheduleDate || undefined, \n      threadId: options.threadId,\n      clearDraft: options.clearDraft\n    });\n\n    if(!options.isGroupedItem) {\n      sentDeferred.then(inputMedia => {\n        this.setTyping(peerId, {_: 'sendMessageCancelAction'});\n\n        return apiManager.invokeApi('messages.sendMedia', {\n          background: options.background,\n          peer: appPeersManager.getInputPeerById(peerId),\n          media: inputMedia,\n          message: caption,\n          random_id: message.random_id,\n          reply_to_msg_id: replyToMsgId,\n          schedule_date: options.scheduleDate,\n          silent: options.silent,\n          entities,\n          clear_draft: options.clearDraft\n        }).then((updates) => {\n          apiUpdatesManager.processUpdateMessage(updates);\n        }, (error) => {\n          if(attachType === 'photo' &&\n            error.code === 400 &&\n            (error.type === 'PHOTO_INVALID_DIMENSIONS' ||\n            error.type === 'PHOTO_SAVE_FILE_INVALID')) {\n            error.handled = true;\n            attachType = 'document';\n            message.send();\n            return;\n          }\n\n          toggleError(true);\n          throw error;\n        });\n      });\n\n      sentDeferred.then(message.promise.resolve, message.promise.reject);\n    }\n\n    return {message, promise: sentDeferred};\n  }\n\n  public async sendAlbum(peerId: PeerId, files: File[], options: Partial<{\n    isMedia: true,\n    entities: MessageEntity[],\n    replyToMsgId: number,\n    threadId: number,\n    caption: string,\n    sendFileDetails: Partial<{\n      duration: number,\n      width: number,\n      height: number,\n      objectURL: string,\n      thumbBlob: Blob,\n      thumbURL: string\n    }>[],\n    silent: true,\n    clearDraft: true,\n    scheduleDate: number\n  }> = {}) {\n    //this.checkSendOptions(options);\n\n    if(options.threadId && !options.replyToMsgId) {\n      options.replyToMsgId = options.threadId;\n    }\n\n    if(files.length === 1) {\n      return this.sendFile(peerId, files[0], {...options, ...options.sendFileDetails[0]});\n    }\n\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\n    const replyToMsgId = options.replyToMsgId ? appMessagesIdsManager.getServerMessageId(options.replyToMsgId) : undefined;\n\n    let caption = options.caption || '';\n    let entities = options.entities || [];\n    if(caption) {\n      caption = RichTextProcessor.parseMarkdown(caption, entities);\n    }\n\n    this.log('sendAlbum', files, options);\n\n    const groupId = '' + ++this.groupedTempId;\n\n    const messages = files.map((file, idx) => {\n      const details = options.sendFileDetails[idx];\n      const o: Parameters<AppMessagesManager['sendFile']>[2] = {\n        isGroupedItem: true,\n        isMedia: options.isMedia,\n        scheduleDate: options.scheduleDate,\n        silent: options.silent,\n        replyToMsgId,\n        threadId: options.threadId,\n        groupId,\n        ...details\n      };\n\n      if(idx === 0) {\n        o.caption = caption;\n        o.entities = entities;\n        //o.replyToMsgId = replyToMsgId;\n      }\n\n      return this.sendFile(peerId, file, o).message;\n    });\n\n    if(options.clearDraft) {\n      setTimeout(() => {\n        appDraftsManager.clearDraft(peerId, options.threadId);\n      }, 0);\n    }\n    \n    // * test pending\n    //return;\n\n    const toggleError = (message: any, on: boolean) => {\n      if(on) {\n        message.error = true;\n      } else {\n        delete message.error;\n      }\n\n      rootScope.dispatchEvent('messages_pending');\n    };\n\n    const inputPeer = appPeersManager.getInputPeerById(peerId);\n    const invoke = (multiMedia: InputSingleMedia[]) => {\n      this.setTyping(peerId, {_: 'sendMessageCancelAction'});\n\n      const deferred = deferredPromise<void>();\n      this.sendSmthLazyLoadQueue.push({\n        load: () => {\n          return apiManager.invokeApi('messages.sendMultiMedia', {\n            peer: inputPeer,\n            multi_media: multiMedia,\n            reply_to_msg_id: replyToMsgId,\n            schedule_date: options.scheduleDate,\n            silent: options.silent,\n            clear_draft: options.clearDraft\n          }).then((updates) => {\n            apiUpdatesManager.processUpdateMessage(updates);\n            deferred.resolve();\n          }, (error) => {\n            messages.forEach(message => toggleError(message, true));\n            deferred.reject(error);\n          });\n        }\n      });\n\n      return deferred;\n    };\n\n    const promises: Promise<InputSingleMedia>[] = messages.map((message) => {\n      return (message.send() as Promise<InputMedia>).then((inputMedia) => {\n        return apiManager.invokeApi('messages.uploadMedia', {\n          peer: inputPeer,\n          media: inputMedia\n        });\n      })\n      .then(messageMedia => {\n        let inputMedia: InputMedia;\n        if(messageMedia._ === 'messageMediaPhoto') {\n          const photo = appPhotosManager.savePhoto(messageMedia.photo);\n          inputMedia = appPhotosManager.getMediaInput(photo);\n        } else if(messageMedia._ === 'messageMediaDocument') {\n          const doc = appDocsManager.saveDoc(messageMedia.document);\n          inputMedia = appDocsManager.getMediaInput(doc);\n        }\n\n        const inputSingleMedia: InputSingleMedia = {\n          _: 'inputSingleMedia',\n          media: inputMedia,\n          random_id: message.random_id,\n          message: caption,\n          entities\n        };\n\n        // * only 1 caption for all inputs\n        if(caption) {\n          caption = '';\n          entities = [];\n        }\n\n        return inputSingleMedia;\n      }).catch((err: any) => {\n        if(err.name === 'AbortError') {\n          return null;\n        }\n\n        this.log.error('sendAlbum upload item error:', err, message);\n        toggleError(message, true);\n        throw err;\n      });\n    });\n\n    return Promise.all(promises).then(inputs => {\n      return invoke(inputs.filter(Boolean));\n    });\n  }\n\n  public sendContact(peerId: PeerId, contactPeerId: PeerId) {\n    return this.sendOther(peerId, appUsersManager.getContactMediaInput(contactPeerId));\n  }\n\n  public sendOther(peerId: PeerId, inputMedia: InputMedia, options: Partial<{\n    replyToMsgId: number,\n    threadId: number,\n    viaBotId: BotId,\n    replyMarkup: ReplyMarkup,\n    clearDraft: true,\n    queryId: string\n    resultId: string,\n    scheduleDate: number,\n    silent: true,\n    geoPoint: GeoPoint\n  }> = {}) {\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\n\n    //this.checkSendOptions(options);\n    const message = this.generateOutgoingMessage(peerId, options);\n    const replyToMsgId = options.replyToMsgId ? appMessagesIdsManager.getServerMessageId(options.replyToMsgId) : undefined;\n\n    let media: MessageMedia;\n    switch(inputMedia._) {\n      case 'inputMediaPoll': {\n        const pollId = '' + message.id;\n        inputMedia.poll.id = pollId;\n        appPollsManager.savePoll(inputMedia.poll, {\n          _: 'pollResults',\n          flags: 4,\n          total_voters: 0,\n          pFlags: {},\n          recent_voters: []\n        });\n\n        const {poll, results} = appPollsManager.getPoll(pollId);\n        media = {\n          _: 'messageMediaPoll',\n          poll,\n          results\n        };\n\n        break;\n      }\n\n      case 'inputMediaPhoto': {\n        media = {\n          _: 'messageMediaPhoto',\n          photo: appPhotosManager.getPhoto((inputMedia.id as InputPhoto.inputPhoto).id)\n        };\n        break;\n      }\n\n      case 'inputMediaDocument': {\n        const doc = appDocsManager.getDoc((inputMedia.id as InputDocument.inputDocument).id);\n        /* if(doc.sticker && doc.stickerSetInput) {\n          appStickersManager.pushPopularSticker(doc.id);\n        } */\n        media = {\n          _: 'messageMediaDocument',\n          document: doc\n        };\n        break;\n      }\n\n      case 'inputMediaContact': {\n        media = {\n          _: 'messageMediaContact',\n          phone_number: inputMedia.phone_number,\n          first_name: inputMedia.first_name,\n          last_name: inputMedia.last_name,\n          user_id: inputMedia.user_id ?? '0',\n          vcard: inputMedia.vcard\n        };\n        break;\n      }\n\n      case 'inputMediaGeoPoint': {\n        media = {\n          _: 'messageMediaGeo',\n          geo: options.geoPoint\n        };\n        break;\n      }\n\n      case 'inputMediaVenue': {\n        media = {\n          _: 'messageMediaVenue',\n          geo: options.geoPoint,\n          title: inputMedia.title,\n          address: inputMedia.address,\n          provider: inputMedia.provider,\n          venue_id: inputMedia.venue_id,\n          venue_type: inputMedia.venue_type\n        };\n        break;\n      }\n      \n      // @ts-ignore\n      case 'messageMediaPending': {\n        media = inputMedia;\n        break;\n      }\n    }\n\n    message.media = media;\n\n    let toggleError = (on: boolean) => {\n      /* const historyMessage = this.messagesForHistory[messageId];\n      if (on) {\n        message.error = true\n        if (historyMessage) {\n          historyMessage.error = true\n        }\n      } else {\n        delete message.error\n        if (historyMessage) {\n          delete historyMessage.error\n        }\n      } */\n      rootScope.dispatchEvent('messages_pending');\n    };\n\n    message.send = () => {\n      const sentRequestOptions: PendingAfterMsg = {};\n      if(this.pendingAfterMsgs[peerId]) {\n        sentRequestOptions.afterMessageId = this.pendingAfterMsgs[peerId].messageId;\n      }\n\n      let apiPromise: Promise<any>;\n      if(options.viaBotId) {\n        apiPromise = apiManager.invokeApiAfter('messages.sendInlineBotResult', {\n          peer: appPeersManager.getInputPeerById(peerId),\n          random_id: message.random_id,\n          reply_to_msg_id: replyToMsgId || undefined,\n          query_id: options.queryId,\n          id: options.resultId,\n          clear_draft: options.clearDraft,\n          schedule_date: options.scheduleDate,\n          silent: options.silent\n        }, sentRequestOptions);\n      } else {\n        apiPromise = apiManager.invokeApiAfter('messages.sendMedia', {\n          peer: appPeersManager.getInputPeerById(peerId),\n          media: inputMedia,\n          random_id: message.random_id,\n          reply_to_msg_id: replyToMsgId || undefined,\n          message: '',\n          clear_draft: options.clearDraft,\n          schedule_date: options.scheduleDate,\n          silent: options.silent\n        }, sentRequestOptions);\n      }\n\n      this.pendingAfterMsgs[peerId] = sentRequestOptions;\n\n      return apiPromise.then((updates) => {\n        if(updates.updates) {\n          updates.updates.forEach((update: Update) => {\n            if(update._ === 'updateDraftMessage') {\n              update.local = true;\n            }\n          });\n        }\n\n        apiUpdatesManager.processUpdateMessage(updates);\n      }, (error) => {\n        toggleError(true);\n      }).finally(() => {\n        if(this.pendingAfterMsgs[peerId] === sentRequestOptions) {\n          delete this.pendingAfterMsgs[peerId];\n        }\n      });\n    };\n\n    this.beforeMessageSending(message, {\n      isScheduled: !!options.scheduleDate || undefined, \n      threadId: options.threadId,\n      clearDraft: options.clearDraft\n    });\n\n    return message.promise;\n  }\n\n  /* private checkSendOptions(options: Partial<{\n    scheduleDate: number\n  }>) {\n    if(options.scheduleDate) {\n      const minTimestamp = (Date.now() / 1000 | 0) + 10;\n      if(options.scheduleDate <= minTimestamp) {\n        delete options.scheduleDate;\n      }\n    }\n  } */\n\n  private beforeMessageSending(message: Message.message, options: Partial<{\n    isGroupedItem: true, \n    isScheduled: true, \n    threadId: number, \n    clearDraft: true\n  }> = {}) {\n    const messageId = message.id;\n    const peerId = this.getMessagePeer(message);\n    const storage = options.isScheduled ? this.getScheduledMessagesStorage(peerId) : this.getMessagesStorage(peerId);\n\n    if(options.isScheduled) {\n      //if(!options.isGroupedItem) {\n      this.saveMessages([message], {storage, isScheduled: true, isOutgoing: true});\n      setTimeout(() => {\n        rootScope.dispatchEvent('scheduled_new', {peerId, mid: messageId});\n      }, 0);\n    } else {\n      /* if(options.threadId && this.threadsStorage[peerId]) {\n        delete this.threadsStorage[peerId][options.threadId];\n      } */\n      const storages: HistoryStorage[] = [\n        this.getHistoryStorage(peerId),\n        options.threadId ? this.getHistoryStorage(peerId, options.threadId) : undefined\n      ];\n\n      for(const storage of storages) {\n        if(storage) {\n          storage.history.unshift(messageId);\n        }\n      }\n\n      //if(!options.isGroupedItem) {\n      this.saveMessages([message], {storage, isOutgoing: true});\n      this.setDialogTopMessage(message);\n      setTimeout(() => {\n        rootScope.dispatchEvent('history_append', {storage, peerId, mid: messageId});\n      }, 0);\n    }\n\n    this.pendingByRandomId[message.random_id] = {\n      peerId, \n      tempId: messageId, \n      threadId: options.threadId, \n      storage\n    };\n\n    if(!options.isGroupedItem && message.send) {\n      setTimeout(() => {\n        if(options.clearDraft) {\n          appDraftsManager.clearDraft(peerId, options.threadId);\n        }\n\n        message.send();\n      }, 0);\n    }\n  }\n\n  private generateOutgoingMessage(peerId: PeerId, options: Partial<{\n    scheduleDate: number,\n    replyToMsgId: number,\n    threadId: number,\n    viaBotId: BotId,\n    groupId: string,\n    replyMarkup: ReplyMarkup,\n  }>) {\n    if(options.threadId && !options.replyToMsgId) {\n      options.replyToMsgId = options.threadId;\n    }\n\n    let postAuthor: string;\n    const isBroadcast = appPeersManager.isBroadcast(peerId);\n    if(isBroadcast) {\n      const chat = appPeersManager.getPeer(peerId) as Chat.channel;\n      if(chat.pFlags.signatures) {\n        const user = appUsersManager.getSelf();\n        const fullName = user.first_name + (user.last_name ? ' ' + user.last_name : '');\n        postAuthor = fullName;\n      }\n    }\n\n    const message: Message.message = {\n      _: 'message',\n      id: this.generateTempMessageId(peerId),\n      from_id: this.generateFromId(peerId),\n      peer_id: appPeersManager.getOutputPeer(peerId),\n      post_author: postAuthor, \n      pFlags: this.generateFlags(peerId),\n      date: options.scheduleDate || (tsNow(true) + serverTimeManager.serverTimeOffset),\n      message: '',\n      grouped_id: options.groupId,\n      random_id: randomLong(),\n      reply_to: this.generateReplyHeader(options.replyToMsgId, options.threadId),\n      via_bot_id: options.viaBotId,\n      reply_markup: options.replyMarkup,\n      replies: this.generateReplies(peerId),\n      views: isBroadcast && 1,\n      pending: true,\n      promise: options.groupId === undefined ? deferredPromise() : undefined\n    };\n\n    return message;\n  }\n\n  private generateReplyHeader(replyToMsgId: number, replyToTopId?: number) {\n    const header = {\n      _: 'messageReplyHeader',\n      reply_to_msg_id: replyToMsgId || replyToTopId,\n    } as MessageReplyHeader;\n\n    if(replyToTopId && header.reply_to_msg_id !== replyToTopId) {\n      header.reply_to_top_id = replyToTopId;\n    }\n\n    return header;\n  }\n\n  private generateReplies(peerId: PeerId) {\n    let replies: MessageReplies.messageReplies;\n    if(appPeersManager.isBroadcast(peerId)) {\n      const channelFull = appProfileManager.getCachedFullChat(peerId.toChatId()) as ChatFull.channelFull;\n      if(channelFull?.linked_chat_id) {\n        replies = {\n          _: 'messageReplies',\n          flags: 1,\n          pFlags: {\n            comments: true\n          },\n          channel_id: channelFull.linked_chat_id,\n          replies: 0,\n          replies_pts: 0\n        };\n      }\n    }\n\n    return replies;\n  }\n\n  /**\n   * Generate correct from_id according to anonymous or broadcast\n   */\n  private generateFromId(peerId: PeerId) {\n    if(peerId.isAnyChat() && (peerId.isBroadcast() || this.isAnonymousSending(peerId))) {\n      return undefined;\n    } else {\n      return appPeersManager.getOutputPeer(appUsersManager.getSelf().id.toPeerId());\n    }\n  }\n\n  private generateFlags(peerId: PeerId) {\n    const pFlags: Message.message['pFlags'] = {};\n    const fromId = appUsersManager.getSelf().id;\n    if(peerId !== fromId) {\n      pFlags.out = true;\n\n      if(!appPeersManager.isChannel(peerId) && !appUsersManager.isBot(peerId)) {\n        pFlags.unread = true;\n      }\n    }\n\n    if(appPeersManager.isBroadcast(peerId)) {\n      pFlags.post = true;\n    }\n\n    return pFlags;\n  }\n\n  private generateForwardHeader(peerId: PeerId, originalMessage: Message.message) {\n    const myId = appUsersManager.getSelf().id.toPeerId();\n    const fromId = originalMessage.fromId;\n    if(fromId === myId && originalMessage.peerId === myId && !originalMessage.fwd_from) {\n      return;\n    }\n\n    const fwdHeader: MessageFwdHeader.messageFwdHeader = {\n      _: 'messageFwdHeader',\n      flags: 0,\n      date: originalMessage.date\n    };\n\n    let isUserHidden = false;\n    if(originalMessage.fwd_from) {\n      fwdHeader.from_id = originalMessage.fwd_from.from_id;\n      fwdHeader.from_name = originalMessage.fwd_from.from_name;\n      fwdHeader.post_author = originalMessage.fwd_from.post_author;\n    } else {\n      fwdHeader.post_author = originalMessage.post_author;\n      \n      if(fromId.isUser()) {\n        const userFull = appProfileManager.getCachedFullUser(fromId.toUserId());\n        if(userFull?.private_forward_name) {\n          fwdHeader.from_name = userFull.private_forward_name;\n          isUserHidden = true;\n        }\n      }\n\n      if(!isUserHidden) {\n        fwdHeader.from_id = appPeersManager.getOutputPeer(fromId);\n      }\n    }\n\n    if(appPeersManager.isBroadcast(originalMessage.peerId)) {\n      if(originalMessage.post_author) {\n        fwdHeader.post_author = originalMessage.post_author;\n      }\n\n      fwdHeader.channel_post = originalMessage.id;\n    }\n    \n    if(peerId === myId && !isUserHidden) {\n      fwdHeader.saved_from_msg_id = originalMessage.id;\n      fwdHeader.saved_from_peer = appPeersManager.getOutputPeer(originalMessage.peerId);\n    }\n\n    return fwdHeader;\n  }\n\n  public generateFakeAvatarMessage(peerId: PeerId, photo: Photo) {\n    const maxId = Number.MAX_SAFE_INTEGER;\n    const message = {\n      _: 'messageService',\n      action: {\n        _: 'messageActionChannelEditPhoto',\n        photo\n      },\n      mid: maxId,\n      peerId,\n      date: (photo as Photo.photo).date,\n      fromId: peerId\n    } as Message.messageService;\n\n    this.getMessagesStorage(peerId).set(maxId, message);\n    return message;\n  }\n\n  public isAnonymousSending(peerId: PeerId): boolean {\n    return peerId.isAnyChat() && appPeersManager.getPeer(peerId).admin_rights?.pFlags?.anonymous;\n  }\n\n  public setDialogTopMessage(message: MyMessage, dialog: MTDialog.dialog = this.getDialogOnly(message.peerId)) {\n    if(dialog) {\n      dialog.top_message = message.mid;\n      \n      const historyStorage = this.getHistoryStorage(message.peerId);\n      historyStorage.maxId = message.mid;\n\n      this.dialogsStorage.generateIndexForDialog(dialog, false, message);\n\n      this.scheduleHandleNewDialogs(message.peerId, dialog);\n    }\n  }\n\n  public cancelPendingMessage(randomId: string) {\n    const pendingData = this.pendingByRandomId[randomId];\n\n    /* if(DEBUG) {\n      this.log('cancelPendingMessage', randomId, pendingData);\n    } */\n\n    if(pendingData) {\n      const {peerId, tempId, storage} = pendingData;\n      const historyStorage = this.getHistoryStorage(peerId);\n\n      apiUpdatesManager.processLocalUpdate({\n        _: 'updateDeleteMessages',\n        messages: [tempId],\n        pts: undefined,\n        pts_count: undefined\n      });\n\n      historyStorage.history.delete(tempId);\n\n      delete this.pendingByRandomId[randomId];\n      storage.delete(tempId);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /* public async refreshConversations() {\n    const limit = 200, outDialogs: Dialog[] = [];\n    for(let folderId = 0; folderId < 2; ++folderId) {\n      let offsetDate = 0;\n      for(;;) {\n        const {dialogs, isEnd} = await this.getTopMessages(limit, folderId, offsetDate);\n  \n        if(dialogs.length) {\n          outDialogs.push(...dialogs as Dialog[]);\n          const dialog = dialogs[dialogs.length - 1];\n\n          // * get peerId and mid manually, because dialog can be migrated peer and it won't be saved\n          const peerId = appPeersManager.getPeerId(dialog.peer);\n          const mid = appMessagesIdsManager.generateMessageId(dialog.top_message);\n          offsetDate = this.getMessageByPeer(peerId, mid).date;\n\n          if(!offsetDate) {\n            console.error('refreshConversations: got no offsetDate', dialog);\n            break;\n          }\n        }\n        \n        if(isEnd) {\n          break;\n        }\n      }\n    }\n\n    let obj: {[peerId: string]: Dialog} = {};\n    outDialogs.forEach(dialog => {\n      obj[dialog.peerId] = dialog;\n    });\n    rootScope.dispatchEvent('dialogs_multiupdate', obj);\n\n    return outDialogs;\n  } */\n\n  public async fillConversations(): Promise<void> {\n    const middleware = this.middleware.get();\n    while(!this.dialogsStorage.isDialogsLoaded(GLOBAL_FOLDER_ID)) {\n      const result = await this.getTopMessages(100, GLOBAL_FOLDER_ID);\n      if(!middleware() || result.isEnd) {\n        break;\n      }\n    }\n  }\n\n  /* public async getConversationsAll(query = '', folderId = 0) {\n    const limit = 200, outDialogs: Dialog[] = [];\n    for(; folderId < 2; ++folderId) {\n      let offsetIndex = 0;\n      for(;;) {\n        const {dialogs} = await appMessagesManager.getConversations(query, offsetIndex, limit, folderId).promise;\n  \n        if(dialogs.length) {\n          outDialogs.push(...dialogs);\n          offsetIndex = dialogs[dialogs.length - 1].index || 0;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return outDialogs;\n  } */\n\n  public getConversations(query = '', offsetIndex?: number, limit?: number, folderId = 0, skipMigrated?: boolean) {\n    return this.dialogsStorage.getDialogs(query, offsetIndex, limit, folderId, skipMigrated);\n  }\n\n  public getReadMaxIdIfUnread(peerId: PeerId, threadId?: number) {\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\n    if(threadId) {\n      const chatHistoryStorage = this.getHistoryStorage(peerId);\n      const readMaxId = Math.max(chatHistoryStorage.readMaxId ?? 0, historyStorage.readMaxId);\n      const message = this.getMessageByPeer(peerId, historyStorage.maxId); // usually message is missing, so pFlags.out won't be there anyway\n      return !message.pFlags.out && readMaxId < historyStorage.maxId ? readMaxId : 0;\n    } else {\n      const message = this.getMessageByPeer(peerId, historyStorage.maxId);\n      const readMaxId = peerId.isUser() ? Math.max(historyStorage.readMaxId, historyStorage.readOutboxMaxId) : historyStorage.readMaxId;\n      return !message.pFlags.out && readMaxId < historyStorage.maxId ? readMaxId : 0;\n    }\n  }\n\n  // public lolSet = new Set();\n  public getTopMessages(limit: number, folderId: number, offsetDate?: number) {\n    //const dialogs = this.dialogsStorage.getFolder(folderId);\n    let offsetId = 0;\n    let offsetPeerId: PeerId;\n    let offsetIndex = 0;\n\n    if(offsetDate === undefined) {\n      offsetDate = this.dialogsStorage.getOffsetDate(folderId);\n    }\n\n    if(offsetDate) {\n      offsetIndex = offsetDate * 0x10000;\n      offsetDate += serverTimeManager.serverTimeOffset;\n    }\n\n    const useLimit = 100;\n    const middleware = this.middleware.get();\n\n    // ! ВНИМАНИЕ: ОЧЕНЬ СЛОЖНАЯ ЛОГИКА:\n    // ! если делать запрос сначала по папке 0, потом по папке 1, по индексу 0 в массиве будет один и тот же диалог, с dialog.pFlags.pinned, ЛОЛ???\n    // ! т.е., с запросом folder_id: 1, и exclude_pinned: 0, в результате будут ещё и закреплённые с папки 0\n    const params: MessagesGetDialogs = {\n      folder_id: folderId,\n      offset_date: offsetDate,\n      offset_id: offsetId,\n      offset_peer: appPeersManager.getInputPeerById(offsetPeerId),\n      limit: useLimit,\n      hash: '0'\n    };\n\n    return apiManager.invokeApiSingle('messages.getDialogs', params, {\n      //timeout: APITIMEOUT,\n      noErrorBox: true\n    }).then((dialogsResult) => {\n      if(!middleware() || dialogsResult._ === 'messages.dialogsNotModified') return null;\n\n      if(DEBUG) {\n        this.log('messages.getDialogs result:', dialogsResult.dialogs, {...dialogsResult.dialogs[0]});\n      }\n\n      /* if(!offsetDate) {\n        telegramMeWebService.setAuthorized(true);\n      } */\n\n      // can reset pinned order here\n      if(!offsetId && !offsetDate && !offsetPeerId && folderId !== GLOBAL_FOLDER_ID) {\n        this.dialogsStorage.resetPinnedOrder(folderId);\n      }\n\n      if(!offsetDate) {\n        telegramMeWebManager.setAuthorized(true);\n      }\n\n      appUsersManager.saveApiUsers(dialogsResult.users);\n      appChatsManager.saveApiChats(dialogsResult.chats);\n      this.saveMessages(dialogsResult.messages);\n\n      /* if(folderId === 0 && !offsetDate) {\n        const found = dialogsResult.dialogs.find(dialog => appPeersManager.getPeerId(dialog.peer) === -1325963535);\n        if(!found) {\n          debugger;\n        }\n      } */\n\n      let maxSeenIdIncremented = offsetDate ? true : false;\n      let hasPrepend = false;\n      const noIdsDialogs: {[peerId: PeerId]: Dialog} = {};\n      const setFolderId = folderId === GLOBAL_FOLDER_ID ? 0 : folderId;\n      const saveGlobalOffset = folderId === GLOBAL_FOLDER_ID;\n      forEachReverse((dialogsResult.dialogs as Dialog[]), dialog => {\n        //const d = Object.assign({}, dialog);\n        // ! нужно передавать folderId, так как по папке !== 0 нет свойства folder_id\n        if(dialog.folder_id === undefined) {\n          dialog.folder_id = setFolderId;\n        }\n\n        this.dialogsStorage.saveDialog(dialog, undefined, true, saveGlobalOffset);\n\n        if(!maxSeenIdIncremented &&\n          !appPeersManager.isChannel(dialog.peerId || appPeersManager.getPeerId(dialog.peer))) {\n          this.incrementMaxSeenId(dialog.top_message);\n          maxSeenIdIncremented = true;\n        }\n\n        if(dialog.peerId === undefined) {\n          return;\n        }\n\n        // if(!folderId && !dialog.folder_id) {\n        //   this.lolSet.add(dialog.peerId);\n        // }\n\n        /* if(dialog.peerId === -1213511294) {\n          this.log.error('lun bot', folderId, d);\n        } */\n\n        if(offsetIndex && dialog.index > offsetIndex) {\n          this.scheduleHandleNewDialogs(dialog.peerId, dialog);\n          hasPrepend = true;\n        }\n\n        // ! это может случиться, если запрос идёт не по папке 0, а по 1. почему-то read'ов нет\n        // ! в итоге, чтобы получить 1 диалог, делается первый запрос по папке 0, потом запрос для архивных по папке 1, и потом ещё перезагрузка архивного диалога\n        if(!appMessagesIdsManager.getServerMessageId(dialog.read_inbox_max_id) && !appMessagesIdsManager.getServerMessageId(dialog.read_outbox_max_id)) {\n          noIdsDialogs[dialog.peerId] = dialog;\n\n          this.log.error('noIdsDialogs', dialog, params);\n\n          /* if(dialog.peerId === -1213511294) {\n            this.log.error('lun bot', folderId);\n          } */\n        }\n      });\n\n      const keys = Object.keys(noIdsDialogs);\n      if(keys.length) {\n        //setTimeout(() => { // test bad situation\n          const peerIds = keys.map(key => key.toPeerId());\n          const promises = peerIds.map(peerId => this.reloadConversation(peerId));\n          Promise.all(promises).then(() => {\n            rootScope.dispatchEvent('dialogs_multiupdate', noIdsDialogs);\n  \n            for(let i = 0; i < peerIds.length; ++i) {\n              rootScope.dispatchEvent('dialog_unread', {peerId: peerIds[i]});\n            }\n          });\n        //}, 10e3);\n      }\n\n      const count = (dialogsResult as MessagesDialogs.messagesDialogsSlice).count;\n\n      // exclude empty draft dialogs\n      const folderDialogs = this.dialogsStorage.getFolderDialogs(folderId, false);\n      let dialogsLength = 0;\n      for(let i = 0, length = folderDialogs.length; i < length; ++i) {\n        if(appMessagesIdsManager.getServerMessageId(folderDialogs[i].top_message)) {\n          ++dialogsLength;\n        }\n      }\n\n      const isEnd = /* limit > dialogsResult.dialogs.length || */ \n        !count || \n        dialogsLength >= count ||\n        !dialogsResult.dialogs.length;\n      if(isEnd) {\n        this.dialogsStorage.setDialogsLoaded(folderId, true);\n      }\n\n      if(hasPrepend) {\n        this.scheduleHandleNewDialogs();\n      } else {\n        rootScope.dispatchEvent('dialogs_multiupdate', {});\n      }\n\n      const dialogs = (dialogsResult as MessagesDialogs.messagesDialogsSlice).dialogs;\n      const slicedDialogs = limit === useLimit ? dialogs : dialogs.slice(0, limit);\n      return {\n        isEnd: isEnd && slicedDialogs[slicedDialogs.length - 1] === dialogs[dialogs.length - 1], \n        count, \n        dialogs: slicedDialogs\n      };\n    });\n  }\n\n  public forwardMessages(peerId: PeerId, fromPeerId: PeerId, mids: number[], options: Partial<{\n    withMyScore: true,\n    silent: true,\n    scheduleDate: number,\n    dropAuthor: boolean,\n    dropCaptions: boolean\n  }> = {}) {\n    peerId = appPeersManager.getPeerMigratedTo(peerId) || peerId;\n    mids = mids.slice().sort((a, b) => a - b);\n\n    for(let i = 0, length = mids.length; i < length; ++i) {\n      const mid = mids[i];\n      const originalMessage: Message.message = this.getMessageByPeer(fromPeerId, mid);\n      if(originalMessage.pFlags.is_outgoing) { // this can happen when forwarding a changelog\n        this.sendText(peerId, originalMessage.message, {\n          entities: originalMessage.entities,\n          scheduleDate: options.scheduleDate,\n          silent: options.silent\n        });\n\n        mids.splice(i--, 1);\n      }\n    }\n\n    if(!mids.length) {\n      return Promise.resolve();\n    }\n\n    if(options.dropCaptions) {\n      options.dropAuthor = true;\n    }\n\n    const groups: {\n      [groupId: string]: {\n        tempId: string,\n        messages: Message.message[]\n      }\n    } = {};\n\n    const newMessages = mids.map(mid => {\n      const originalMessage: Message.message = this.getMessageByPeer(fromPeerId, mid);\n      const message: Message.message = this.generateOutgoingMessage(peerId, options);\n\n      const keys: Array<keyof Message.message> = [\n        'entities', \n        'media', \n        // 'reply_markup'\n      ];\n\n      if(!options.dropAuthor) {\n        message.fwd_from = this.generateForwardHeader(peerId, originalMessage);\n        keys.push('views', 'forwards');\n\n        if(message.fwd_from.from_name) {\n          message\n        }\n      }\n\n      if(!options.dropCaptions || !originalMessage.media) {\n        keys.push('message');\n      }\n\n      keys.forEach(key => {\n        // @ts-ignore\n        message[key] = originalMessage[key];\n      });\n\n      const document = (message.media as MessageMedia.messageMediaDocument)?.document as MyDocument;\n      if(document) {\n        const types: MyDocument['type'][] = ['round', 'voice'];\n        if(types.includes(document.type)) {\n          (message as MyMessage).pFlags.media_unread = true;\n        }\n      }\n\n      if(originalMessage.grouped_id) {\n        const group = groups[originalMessage.grouped_id] ?? (groups[originalMessage.grouped_id] = {tempId: '' + ++this.groupedTempId, messages: []});\n        group.messages.push(message);\n      }\n\n      return message;\n    });\n\n    for(const groupId in groups) {\n      const group = groups[groupId];\n      if(group.messages.length > 1) {\n        group.messages.forEach(message => {\n          message.grouped_id = group.tempId;\n        });\n      }\n    }\n\n    newMessages.forEach(message => {\n      this.beforeMessageSending(message, {\n        isScheduled: !!options.scheduleDate || undefined\n      });\n    });\n\n    const sentRequestOptions: PendingAfterMsg = {};\n    if(this.pendingAfterMsgs[peerId]) {\n      sentRequestOptions.afterMessageId = this.pendingAfterMsgs[peerId].messageId;\n    }\n\n    const promise = /* true ? Promise.resolve() :  */apiManager.invokeApiAfter('messages.forwardMessages', {\n      from_peer: appPeersManager.getInputPeerById(fromPeerId),\n      id: mids.map(mid => appMessagesIdsManager.getServerMessageId(mid)),\n      random_id: newMessages.map(message => message.random_id),\n      to_peer: appPeersManager.getInputPeerById(peerId),\n      with_my_score: options.withMyScore,\n      silent: options.silent,\n      schedule_date: options.scheduleDate,\n      drop_author: options.dropAuthor,\n      drop_media_captions: options.dropCaptions\n    }, sentRequestOptions).then((updates) => {\n      this.log('forwardMessages updates:', updates);\n      apiUpdatesManager.processUpdateMessage(updates);\n    }).finally(() => {\n      if(this.pendingAfterMsgs[peerId] === sentRequestOptions) {\n        delete this.pendingAfterMsgs[peerId];\n      }\n    });\n\n    this.pendingAfterMsgs[peerId] = sentRequestOptions;\n    return promise;\n  }\n\n  public generateEmptyMessage(mid: number): Message.messageEmpty {\n    return {\n      _: 'messageEmpty',\n      id: appMessagesIdsManager.getServerMessageId(mid),\n      mid,\n      deleted: true,\n      pFlags: {}\n    };\n  }\n\n  public getMessageFromStorage(storage: MessagesStorage, mid: number) {\n    return storage && storage.get(mid) || this.generateEmptyMessage(mid);\n  }\n\n  private createMessageStorage() {\n    const storage: MessagesStorage = new Map();\n    \n    /* let num = 0;\n    Object.defineProperty(storage, 'num', {\n      get: () => ++num,\n      set: (_num: number) => num = _num, \n      enumerable: false\n    });\n\n    Object.defineProperty(storage, 'generateIndex', {\n      value: (message: any) => {\n        if(message.index === undefined) {\n          message.index = (message.date * 0x10000) + (storage.num & 0xFFFF);\n        }\n      },\n      enumerable: false\n    }); */\n\n    return storage;\n  }\n\n  public getMessagesStorage(peerId: PeerId) {\n    return this.messagesStorageByPeerId[peerId] ?? (this.messagesStorageByPeerId[peerId] = this.createMessageStorage());\n  }\n\n  public getMessageById(messageId: number) {\n    for(const peerId in this.messagesStorageByPeerId) {\n      if(appPeersManager.isChannel(peerId.toPeerId())) {\n        continue;\n      }\n\n      const message = this.messagesStorageByPeerId[peerId].get(messageId);\n      if(message) {\n        return message;\n      }\n    }\n\n    return this.getMessageFromStorage(null, messageId);\n  }\n\n  public getMessageByPeer(peerId: PeerId, messageId: number) {\n    if(!peerId) {\n      return this.getMessageById(messageId);\n    }\n\n    return this.getMessageFromStorage(this.getMessagesStorage(peerId), messageId);\n  }\n\n  public getMessagePeer(message: any): PeerId {\n    const toId = message.peer_id && appPeersManager.getPeerId(message.peer_id) || NULL_PEER_ID;\n\n    return toId;\n  }\n\n  public getDialogByPeerId(peerId: PeerId): [Dialog, number] | [] {\n    return this.dialogsStorage.getDialog(peerId);\n  }\n\n  public getDialogOnly(peerId: PeerId) {\n    return this.dialogsStorage.getDialogOnly(peerId);\n  }\n\n  public reloadConversation(inputPeer?: PeerId | InputPeer): CancellablePromise<Dialog>;\n  public reloadConversation(inputPeer: PeerId | InputPeer) {\n    let promise: CancellablePromise<Dialog>;\n    if(inputPeer !== undefined) {\n      const peerId = appPeersManager.getPeerId(inputPeer);\n      let obj = this.reloadConversationsPeers.get(peerId);\n      if(obj) {\n        promise = obj.promise;\n      }\n\n      if(promise) {\n        return promise;\n      }\n\n      promise = deferredPromise();\n      this.reloadConversationsPeers.set(peerId, obj = {\n        inputDialogPeer: appPeersManager.getInputDialogPeerById(inputPeer),\n        promise\n      });\n    }\n\n    if(this.reloadConversationsPromise) {\n      return promise || this.reloadConversationsPromise;\n    }\n\n    this.reloadConversationsPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const inputDialogPeers: InputDialogPeer[] = [];\n        const promises: {[peerId: string]: typeof promise} = {};\n        for(const [peerId, {inputDialogPeer, promise}] of this.reloadConversationsPeers) {\n          inputDialogPeers.push(inputDialogPeer);\n          promises[peerId] = promise;\n        }\n\n        this.reloadConversationsPeers.clear();\n\n        const fullfillLeft = () => {\n          for(const peerId in promises) {\n            promises[peerId].resolve(undefined);\n          }\n        };\n\n        apiManager.invokeApi('messages.getPeerDialogs', {peers: inputDialogPeers}).then((result) => {\n          this.dialogsStorage.applyDialogs(result);\n\n          result.dialogs.forEach((dialog) => {\n            const peerId = dialog.peerId;\n            if(peerId) {\n              promises[peerId].resolve(dialog as Dialog);\n              delete promises[peerId];\n            }\n          });\n\n          fullfillLeft();\n          resolve();\n        }, (err) => {\n          fullfillLeft();\n          reject(err);\n        }).finally(() => {\n          this.reloadConversationsPromise = null;\n\n          if(this.reloadConversationsPeers.size) {\n            this.reloadConversation();\n          }\n        });\n      }, 0);\n    });\n\n    return promise || this.reloadConversationsPromise;\n  }\n\n  private doFlushHistory(peer: InputPeer, just_clear?: boolean, revoke?: boolean): Promise<true> {\n    return apiManager.invokeApiSingle('messages.deleteHistory', {\n      just_clear,\n      revoke,\n      peer,\n      max_id: 0\n    }).then((affectedHistory) => {\n      apiUpdatesManager.processUpdateMessage({\n        _: 'updateShort',\n        update: {\n          _: 'updatePts',\n          pts: affectedHistory.pts,\n          pts_count: affectedHistory.pts_count\n        }\n      });\n\n      if(!affectedHistory.offset) {\n        return true;\n      }\n\n      return this.doFlushHistory(peer, just_clear, revoke);\n    });\n  }\n\n  public async flushHistory(peerId: PeerId, justClear?: boolean, revoke?: boolean) {\n    if(appPeersManager.isChannel(peerId)) {\n      const promise = this.getHistory(peerId, 0, 1);\n\n      const historyResult = promise instanceof Promise ? await promise : promise;\n\n      const channelId = peerId.toChatId();\n      const maxId = historyResult.history[0] || 0;\n      return apiManager.invokeApiSingle('channels.deleteHistory', {\n        channel: appChatsManager.getChannelInput(channelId),\n        max_id: appMessagesIdsManager.getServerMessageId(maxId)\n      }).then((bool) => {\n        if(bool) {\n          apiUpdatesManager.processLocalUpdate({\n            _: 'updateChannelAvailableMessages',\n            channel_id: channelId,\n            available_min_id: maxId\n          });\n        }\n\n        return bool;\n      });\n    }\n\n    return this.doFlushHistory(appPeersManager.getInputPeerById(peerId), justClear, revoke).then(() => {\n      [\n        this.historiesStorage, \n        this.threadsStorage, \n        this.searchesStorage, \n        this.pinnedMessages,\n        this.pendingAfterMsgs,\n        this.pendingTopMsgs\n      ].forEach(s => {\n        delete s[peerId];\n      });\n\n      const m = this.needSingleMessages.get(peerId);\n      if(m) {\n        m.clear();\n      }\n\n      [\n        this.messagesStorageByPeerId,\n        this.scheduledMessagesStorage\n      ].forEach(s => {\n        const ss = s[peerId];\n        if(ss) {\n          ss.clear();\n        }\n      });\n      \n      if(justClear) {\n        rootScope.dispatchEvent('dialog_flush', {peerId});\n      } else {\n        delete this.notificationsToHandle[peerId];\n        delete this.typings[peerId];\n        \n        const c = this.reloadConversationsPeers.get(peerId);\n        if(c) {\n          this.reloadConversationsPeers.delete(peerId);\n          c.promise.resolve(undefined);\n        }\n\n        this.dialogsStorage.dropDialogOnDeletion(peerId);\n      }\n    });\n  }\n\n  public onPeerDeleted(peerId: number) {\n\n  }\n\n  public hidePinnedMessages(peerId: PeerId) {\n    return Promise.all([\n      appStateManager.getState(),\n      this.getPinnedMessage(peerId)\n    ])\n    .then(([state, pinned]) => {\n      state.hiddenPinnedMessages[peerId] = pinned.maxId;\n      rootScope.dispatchEvent('peer_pinned_hidden', {peerId, maxId: pinned.maxId});\n    });\n  }\n\n  public getPinnedMessage(peerId: PeerId) {\n    const p = this.pinnedMessages[peerId] ?? (this.pinnedMessages[peerId] = {});\n    if(p.promise) return p.promise;\n    else if(p.maxId) return Promise.resolve(p);\n\n    return p.promise = this.getSearch({\n      peerId, \n      inputFilter: {_: 'inputMessagesFilterPinned'},\n      maxId: 0,\n      limit: 1\n    }).then(result => {\n      p.count = result.count;\n      p.maxId = result.history[0]?.mid;\n      return p;\n    }).finally(() => {\n      delete p.promise;\n    });\n  }\n\n  public updatePinnedMessage(peerId: PeerId, mid: number, unpin?: boolean, silent?: boolean, pm_oneside?: boolean) {\n    return apiManager.invokeApi('messages.updatePinnedMessage', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      unpin,\n      silent,\n      pm_oneside,\n      id: appMessagesIdsManager.getServerMessageId(mid)\n    }).then(updates => {\n      //this.log('pinned updates:', updates);\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public unpinAllMessages(peerId: PeerId): Promise<boolean> {\n    return apiManager.invokeApiSingle('messages.unpinAllMessages', {\n      peer: appPeersManager.getInputPeerById(peerId)\n    }).then(affectedHistory => {\n      apiUpdatesManager.processUpdateMessage({\n        _: 'updateShort',\n        update: {\n          _: 'updatePts',\n          pts: affectedHistory.pts,\n          pts_count: affectedHistory.pts_count\n        }\n      });\n\n      if(!affectedHistory.offset) {\n        const storage = this.getMessagesStorage(peerId);\n        storage.forEach((message) => {\n          if(message.pFlags.pinned) {\n            delete message.pFlags.pinned;\n          }\n        });\n\n        rootScope.dispatchEvent('peer_pinned_messages', {peerId, unpinAll: true});\n        delete this.pinnedMessages[peerId];\n\n        return true;\n      }\n\n      return this.unpinAllMessages(peerId);\n    });\n  }\n\n  public getAlbumText(grouped_id: string) {\n    const group = this.groupedMessagesStorage[grouped_id];\n    let foundMessages = 0, message: string, totalEntities: MessageEntity[], entities: MessageEntity[];\n    for(const [mid, m] of group) {\n      if(m.message) {\n        if(++foundMessages > 1) break;\n        message = m.message;\n        totalEntities = m.totalEntities;\n        entities = m.entities;\n      }\n    }\n\n    if(foundMessages > 1) {\n      message = undefined;\n      totalEntities = undefined;\n      entities = undefined;\n    }\n\n    return {message, entities, totalEntities};\n  }\n\n  public getGroupsFirstMessage(message: Message.message): Message.message {\n    if(!message.grouped_id) return message;\n\n    const storage = this.groupedMessagesStorage[message.grouped_id];\n    let minMid = Number.MAX_SAFE_INTEGER;\n    for(const [mid, message] of storage) {\n      if(message.mid < minMid) {\n        minMid = message.mid;\n      }\n    }\n\n    return storage.get(minMid);\n  }\n\n  public getMidsByAlbum(grouped_id: string) {\n    return getObjectKeysAndSort(this.groupedMessagesStorage[grouped_id], 'asc');\n    //return Object.keys(this.groupedMessagesStorage[grouped_id]).map(id => +id).sort((a, b) => a - b);\n  }\n\n  public getMidsByMessage(message: Message) {\n    if((message as Message.message)?.grouped_id) return this.getMidsByAlbum((message as Message.message).grouped_id);\n    else return [message.mid];\n  }\n\n  public filterMessages(message: MyMessage, verify: (message: MyMessage) => boolean) {\n    const out: MyMessage[] = [];\n    if((message as Message.message).grouped_id) {\n      const storage = this.groupedMessagesStorage[(message as Message.message).grouped_id];\n      for(const [mid, message] of storage) {\n        if(verify(message)) {\n          out.push(message);\n        }\n      }\n    } else {\n      if(verify(message)) {\n        out.push(message);\n      }\n    }\n\n    return out;\n  }\n\n  public generateTempMessageId(peerId: PeerId) {\n    const dialog = this.getDialogOnly(peerId);\n    return appMessagesIdsManager.generateMessageId(dialog?.top_message || 0, true);\n  }\n\n  public saveMessage(message: Message, options: Partial<{\n    storage: MessagesStorage,\n    isScheduled: true,\n    isOutgoing: true,\n    //isNew: boolean, // * new - from update\n  }> = {}) {\n    if(message.pFlags === undefined) {\n      message.pFlags = {};\n    }\n\n    if(message._ === 'messageEmpty') {\n      message.deleted = true;\n      return;\n    }\n\n    // * exclude from state\n    // defineNotNumerableProperties(message, ['rReply', 'mid', 'savedFrom', 'fwdFromId', 'fromId', 'peerId', 'reply_to_mid', 'viaBotId']);\n\n    const peerId = this.getMessagePeer(message);\n    const storage = options.storage || this.getMessagesStorage(peerId);\n    const isChannel = message.peer_id._ === 'peerChannel';\n    const isBroadcast = isChannel && appChatsManager.isBroadcast(peerId.toChatId());\n    const isMessage = message._ === 'message';\n\n    if(options.isOutgoing) {\n      message.pFlags.is_outgoing = true;\n    }\n    \n    const mid = appMessagesIdsManager.generateMessageId(message.id);\n    message.mid = mid;\n\n    if(isMessage) {\n      if(options.isScheduled) {\n        message.pFlags.is_scheduled = true;\n      }\n\n      if(message.grouped_id) {\n        const storage = this.groupedMessagesStorage[message.grouped_id] ?? (this.groupedMessagesStorage[message.grouped_id] = new Map());\n        storage.set(mid, message);\n      }\n\n      if(message.via_bot_id) {\n        // ! WARNING\n        message.viaBotId = message.via_bot_id as any;\n      }\n    }\n\n    const dialog = this.getDialogOnly(peerId);\n    if(dialog && mid) {\n      if(mid > dialog[message.pFlags.out\n        ? 'read_outbox_max_id'\n        : 'read_inbox_max_id']) {\n        message.pFlags.unread = true;\n      }\n    }\n    // this.log(dT(), 'msg unread', mid, apiMessage.pFlags.out, dialog && dialog[apiMessage.pFlags.out ? 'read_outbox_max_id' : 'read_inbox_max_id'])\n\n    if(message.reply_to) {\n      if(message.reply_to.reply_to_msg_id) {\n        message.reply_to.reply_to_msg_id = message.reply_to_mid = appMessagesIdsManager.generateMessageId(message.reply_to.reply_to_msg_id);\n      } \n\n      if(message.reply_to.reply_to_top_id) message.reply_to.reply_to_top_id = appMessagesIdsManager.generateMessageId(message.reply_to.reply_to_top_id);\n    }\n\n    if(isMessage && message.replies) {\n      if(message.replies.max_id) message.replies.max_id = appMessagesIdsManager.generateMessageId(message.replies.max_id);\n      if(message.replies.read_max_id) message.replies.read_max_id = appMessagesIdsManager.generateMessageId(message.replies.read_max_id);\n    }\n\n    const overwriting = !!peerId;\n    if(!overwriting) {\n      message.date -= serverTimeManager.serverTimeOffset;\n    }\n    \n    //storage.generateIndex(message);\n    const myId = appUsersManager.getSelf().id.toPeerId();\n\n    const fwdHeader = isMessage && (message as Message.message).fwd_from as MessageFwdHeader;\n\n    message.peerId = peerId;\n    if(peerId === myId/*  && !message.from_id && !message.fwd_from */) {\n      message.fromId = fwdHeader ? (fwdHeader.from_id ? appPeersManager.getPeerId(fwdHeader.from_id) : NULL_PEER_ID) : myId;\n    } else {\n      //message.fromId = message.pFlags.post || (!message.pFlags.out && !message.from_id) ? peerId : appPeersManager.getPeerId(message.from_id);\n      message.fromId = message.pFlags.post || !message.from_id ? peerId : appPeersManager.getPeerId(message.from_id);\n    }\n\n    if(fwdHeader) {\n      //if(peerId === myID) {\n        if(fwdHeader.saved_from_msg_id) fwdHeader.saved_from_msg_id = appMessagesIdsManager.generateMessageId(fwdHeader.saved_from_msg_id);\n        if(fwdHeader.channel_post) fwdHeader.channel_post = appMessagesIdsManager.generateMessageId(fwdHeader.channel_post);\n\n        const peer = fwdHeader.saved_from_peer || fwdHeader.from_id;\n        const msgId = fwdHeader.saved_from_msg_id || fwdHeader.channel_post;\n        if(peer && msgId) {\n          const savedFromPeerId = appPeersManager.getPeerId(peer);\n          const savedFromMid = appMessagesIdsManager.generateMessageId(msgId);\n          message.savedFrom = savedFromPeerId + '_' + savedFromMid;\n        }\n\n        /* if(peerId.isAnyChat() || peerId === myID) {\n          message.fromId = appPeersManager.getPeerID(!message.from_id || deepEqual(message.from_id, fwdHeader.from_id) ? fwdHeader.from_id : message.from_id);\n        } */\n      /* } else {\n        apiMessage.fwdPostID = fwdHeader.channel_post;\n      } */\n\n      message.fwdFromId = appPeersManager.getPeerId(fwdHeader.from_id);\n\n      if(!overwriting) {\n        fwdHeader.date -= serverTimeManager.serverTimeOffset;\n      }\n    }\n\n    const mediaContext: ReferenceContext = {\n      type: 'message',\n      peerId,\n      messageId: mid\n    };\n\n    /* if(isMessage) {\n      const entities = message.entities;\n      if(entities && entities.find(entity => entity._ === 'messageEntitySpoiler')) {\n        message.media = {_: 'messageMediaUnsupported'};\n      }\n    } */\n\n    if(isMessage && message.media) {\n      let unsupported = false;\n      switch(message.media._) {\n        case 'messageMediaEmpty': {\n          delete message.media;\n          break;\n        }\n\n        case 'messageMediaPhoto': {\n          if(message.media.ttl_seconds) {\n            unsupported = true;\n          } else {\n            message.media.photo = appPhotosManager.savePhoto(message.media.photo, mediaContext);\n          }\n\n          if(!(message.media as MessageMedia.messageMediaPhoto).photo) { // * found this bug on test DC\n            delete message.media;\n          }\n          \n          break;\n        }\n          \n        case 'messageMediaPoll': {\n          const result = appPollsManager.savePoll(message.media.poll, message.media.results, message);\n          message.media.poll = result.poll;\n          message.media.results = result.results;\n          break;\n        }\n          \n        case 'messageMediaDocument': {\n          if(message.media.ttl_seconds) {\n            unsupported = true;\n          } else {\n            const originalDoc = message.media.document;\n            message.media.document = appDocsManager.saveDoc(originalDoc, mediaContext); // 11.04.2020 warning\n\n            if(!message.media.document && originalDoc._ !== 'documentEmpty') {\n              unsupported = true;\n            }\n          }\n\n          break;\n        }\n          \n        case 'messageMediaWebPage': {\n          const messageKey = appWebPagesManager.getMessageKeyForPendingWebPage(peerId, mid, options.isScheduled);\n          message.media.webpage = appWebPagesManager.saveWebPage(message.media.webpage, messageKey, mediaContext);\n          break;\n        }\n          \n        /*case 'messageMediaGame':\n          AppGamesManager.saveGame(apiMessage.media.game, apiMessage.mid, mediaContext);\n          apiMessage.media.handleMessage = true;\n          break; */\n\n        case 'messageMediaInvoice': {\n          unsupported = true;\n          message.media = {_: 'messageMediaUnsupported'};\n          break;\n        }\n\n        case 'messageMediaUnsupported': {\n          unsupported = true;\n          break;\n        }\n      }\n\n      if(unsupported) {\n        message.media = {_: 'messageMediaUnsupported'};\n        message.message = '';\n        delete message.entities;\n        delete message.totalEntities;\n      }\n    }\n\n    if(!isMessage && message.action) {\n      const action = message.action as MessageAction;\n      let migrateFrom: PeerId;\n      let migrateTo: PeerId;\n      const suffix = message.fromId === appUsersManager.getSelf().id ? 'You' : '';\n\n      if((action as MessageAction.messageActionChatEditPhoto).photo) {\n        (action as MessageAction.messageActionChatEditPhoto).photo = appPhotosManager.savePhoto((action as MessageAction.messageActionChatEditPhoto).photo, mediaContext);\n      }\n\n      if((action as any).document) {\n        (action as any).document = appDocsManager.saveDoc((action as any).photo, mediaContext);\n      }\n\n      switch(action._) {\n        //case 'messageActionChannelEditPhoto':\n        case 'messageActionChatEditPhoto':\n          // action.photo = appPhotosManager.savePhoto(action.photo, mediaContext);\n          if((action.photo as Photo.photo)?.video_sizes) {\n            // @ts-ignore\n            action._ = isBroadcast ? 'messageActionChannelEditVideo' : 'messageActionChatEditVideo';\n          } else {\n            if(isBroadcast) { // ! messageActionChannelEditPhoto не существует в принципе, это используется для перевода.\n              // @ts-ignore\n              action._ = 'messageActionChannelEditPhoto';\n            }\n          }\n          break;\n        \n        case 'messageActionGroupCall': {\n          //assumeType<MessageAction.messageActionGroupCall>(action);\n\n          appGroupCallsManager.saveGroupCall(action.call);\n\n          let type: string;\n          if(action.duration === undefined) {\n            type = 'started';\n          } else {\n            type = 'ended'\n          }\n\n          if(!isBroadcast) {\n            type += '_by' + suffix;\n          }\n\n          // @ts-ignore\n          action.type = type;\n\n          break;\n        }\n\n        case 'messageActionChatEditTitle':\n          /* if(options.isNew) {\n            const chat = appChatsManager.getChat(peerId.toChatId());\n            chat.title = action.title;\n            appChatsManager.saveApiChat(chat, true);\n          } */\n          \n          if(isBroadcast) {\n            // @ts-ignore\n            action._ = 'messageActionChannelEditTitle';\n          }\n          break;\n\n        case 'messageActionChatDeletePhoto':\n          if(isBroadcast) {\n            // @ts-ignore\n            action._ = 'messageActionChannelDeletePhoto';\n          }\n          break;\n\n        case 'messageActionChatAddUser':\n          if(action.users.length === 1) {\n            // @ts-ignore\n            action.user_id = action.users[0];\n            // @ts-ignore\n            if(message.fromId === action.user_id) {\n              if(isChannel) {\n                // @ts-ignore\n                action._ = 'messageActionChatJoined' + suffix;\n              } else {\n                // @ts-ignore\n                action._ = 'messageActionChatReturn' + suffix;\n              }\n            }\n          } else if(action.users.length > 1) {\n            // @ts-ignore\n            action._ = 'messageActionChatAddUsers';\n          }\n          break;\n\n        case 'messageActionChatDeleteUser':\n          if(message.fromId === action.user_id) {\n            // @ts-ignore\n            action._ = 'messageActionChatLeave' + suffix;\n          }\n          break;\n\n        case 'messageActionChannelMigrateFrom':\n          migrateFrom = action.chat_id.toPeerId(true);\n          migrateTo = peerId;\n          break\n\n        case 'messageActionChatMigrateTo':\n          migrateFrom = peerId;\n          migrateTo = action.channel_id.toPeerId(true);\n          break;\n\n        case 'messageActionHistoryClear':\n          //apiMessage.deleted = true;\n          message.clear_history = true;\n          delete message.pFlags.out;\n          delete message.pFlags.unread;\n          break;\n\n        case 'messageActionPhoneCall':\n          // @ts-ignore\n          action.type = \n            (action.pFlags.video ? 'video_' : '') +\n            (action.duration !== undefined ? (message.pFlags.out ? 'out_' : 'in_') : '') +\n            (\n              action.duration !== undefined ? 'ok' : (\n                action.reason._ === 'phoneCallDiscardReasonMissed'\n                  ? 'missed'\n                  : 'cancelled'\n              )\n            );\n          break;\n      }\n      \n      if(migrateFrom &&\n          migrateTo &&\n          !this.migratedFromTo[migrateFrom] &&\n          !this.migratedToFrom[migrateTo]) {\n        this.migrateChecks(migrateFrom, migrateTo);\n      }\n    }\n\n    /* if(message.grouped_id) {\n      if(!groups) {\n        groups = new Set();\n      }\n\n      groups.add(message.grouped_id);\n    } else {\n      message.rReply = this.getRichReplyText(message);\n    } */\n\n    if(isMessage && message.message.length && !message.totalEntities) {\n      this.wrapMessageEntities(message);  \n    }\n\n    storage.set(mid, message);\n  }\n\n  public saveMessages(messages: any[], options: Partial<{\n    storage: MessagesStorage,\n    isScheduled: true,\n    isOutgoing: true,\n    //isNew: boolean, // * new - from update\n  }> = {}) {\n    if((messages as any).saved) return;\n    (messages as any).saved = true;\n    messages.forEach((message) => {\n      this.saveMessage(message, options);\n    });\n  }\n\n  private wrapMessageEntities(message: Message.message) {\n    const apiEntities = message.entities ? message.entities.slice() : [];\n    message.message = RichTextProcessor.fixEmoji(message.message, apiEntities);\n\n    const myEntities = RichTextProcessor.parseEntities(message.message);\n    message.totalEntities = RichTextProcessor.mergeEntities(apiEntities, myEntities); // ! only in this order, otherwise bold and emoji formatting won't work\n  }\n\n  public wrapMessageForReply(message: MyMessage | MyDraftMessage, text: string, usingMids: number[], plain: true, highlightWord?: string, withoutMediaType?: boolean): string;\n  public wrapMessageForReply(message: MyMessage | MyDraftMessage, text?: string, usingMids?: number[], plain?: false, highlightWord?: string, withoutMediaType?: boolean): DocumentFragment;\n  public wrapMessageForReply(message: MyMessage | MyDraftMessage, text: string = (message as Message.message).message, usingMids?: number[], plain?: boolean, highlightWord?: string, withoutMediaType?: boolean): DocumentFragment | string {\n    const parts: (Node | string)[] = [];\n\n    let hasAlbumKey = false;\n    const addPart = (langKey: LangPackKey, part?: string | HTMLElement) => {\n      if(langKey) {\n        if(part === undefined && hasAlbumKey) {\n          return;\n        }\n        \n        part = plain ? I18n.format(langKey, true) : i18n(langKey);\n      }\n      \n      if(plain) {\n        parts.push(part);\n      } else {\n        const el = document.createElement('i');\n        if(typeof(part) === 'string') el.innerHTML = part;\n        else el.append(part);\n        parts.push(el);\n      }\n    };\n\n    const isRestricted = this.isRestricted(message as any);\n\n    let entities = (message as Message.message).totalEntities;\n    if((message as Message.message).media && !isRestricted) {\n      assumeType<Message.message>(message);\n      let usingFullAlbum = true;\n      if(message.grouped_id) {\n        if(usingMids) {\n          const mids = this.getMidsByMessage(message);\n          if(usingMids.length === mids.length) {\n            for(const mid of mids) {\n              if(!usingMids.includes(mid)) {\n                usingFullAlbum = false;\n                break;\n              }\n            }\n          } else {\n            usingFullAlbum = false;\n          }\n        }\n\n        if(usingFullAlbum) {\n          const albumText = this.getAlbumText(message.grouped_id);\n          text = albumText.message;\n          entities = albumText.totalEntities;\n\n          if(!withoutMediaType) {\n            addPart('AttachAlbum');\n            hasAlbumKey = true;\n          }\n        }\n      } else {\n        usingFullAlbum = false;\n      }\n\n      if((!usingFullAlbum && !withoutMediaType) || !text) {\n        const media = message.media;\n        switch(media._) {\n          case 'messageMediaPhoto':\n            addPart('AttachPhoto');\n            break;\n          case 'messageMediaDice':\n            addPart(undefined, plain ? media.emoticon : RichTextProcessor.wrapEmojiText(media.emoticon));\n            break;\n          case 'messageMediaVenue': {\n            text = media.title;\n            addPart('AttachLocation');\n            break;\n          }\n          case 'messageMediaGeo':\n            addPart('AttachLocation');\n            break;\n          case 'messageMediaGeoLive':\n            addPart('AttachLiveLocation');\n            break;\n          case 'messageMediaPoll':\n            addPart(undefined, plain ? '📊' + ' ' + (media.poll.question || 'poll') : media.poll.rReply);\n            break;\n          case 'messageMediaContact':\n            addPart('AttachContact');\n            break;\n          case 'messageMediaGame': {\n            const f = '🎮' + ' ' + media.game.title;\n            addPart(undefined, plain ? f : RichTextProcessor.wrapEmojiText(f));\n            break;\n          }\n          case 'messageMediaDocument': {\n            const document = media.document as MyDocument;\n  \n            if(document.type === 'video') {\n              addPart('AttachVideo');\n            } else if(document.type === 'voice') {\n              addPart('AttachAudio');\n            } else if(document.type === 'gif') {\n              addPart('AttachGif');\n            } else if(document.type === 'round') {\n              addPart('AttachRound');\n            } else if(document.type === 'sticker') {\n              if(document.stickerEmojiRaw) {\n                addPart(undefined, (plain ? document.stickerEmojiRaw : document.stickerEmoji) + ' ');\n              }\n              \n              addPart('AttachSticker');\n              text = '';\n            } else if(document.type === 'audio') {\n              const attribute = document.attributes.find(attribute => attribute._ === 'documentAttributeAudio' && (attribute.title || attribute.performer)) as DocumentAttribute.documentAttributeAudio;\n              const f = '🎵' + ' ' + (attribute ? [attribute.title, attribute.performer].filter(Boolean).join(' - ') : document.file_name);\n              addPart(undefined, plain ? f : RichTextProcessor.wrapEmojiText(f));\n            } else {\n              addPart(undefined, plain ? document.file_name : RichTextProcessor.wrapEmojiText(document.file_name));\n            }\n  \n            break;\n          }\n\n          case 'messageMediaUnsupported': {\n            addPart(UNSUPPORTED_LANG_PACK_KEY);\n            break;\n          }\n  \n          default:\n            //messageText += media._;\n            ///////this.log.warn('Got unknown media type!', message);\n            break;\n        }\n      }\n\n      const length = parts.length;\n      /* for(let i = 1; i < length; i += 2) {\n        parts.splice(i, 0, ', ');\n      } */\n\n      if(text && length) {\n        parts.push(', ');\n      }\n    }\n\n    if((message as Message.messageService).action) {\n      const actionWrapped = this.wrapMessageActionTextNew((message as Message.messageService), plain);\n      if(actionWrapped) {\n        addPart(undefined, actionWrapped);\n      }\n    }\n\n    if(isRestricted) {\n      text = getRestrictionReason((message as Message.message).restriction_reason).text;\n      entities = [];\n    }\n\n    if(text) {\n      text = limitSymbols(text, 100);\n\n      if(!entities) {\n        entities = [];\n      }\n\n      if(plain) {\n        parts.push(RichTextProcessor.wrapPlainText(text, entities));\n      } else {\n        // let entities = RichTextProcessor.parseEntities(text.replace(/\\n/g, ' '));\n\n        if(highlightWord) {\n          highlightWord = highlightWord.trim();\n          let found = false;\n          let match: any;\n          let regExp = new RegExp(escapeRegExp(highlightWord), 'gi');\n          while((match = regExp.exec(text)) !== null) {\n            entities.push({_: 'messageEntityHighlight', length: highlightWord.length, offset: match.index});\n            found = true;\n          }\n      \n          if(found) {\n            RichTextProcessor.sortEntities(entities);\n          }\n        }\n\n        const messageWrapped = RichTextProcessor.wrapRichText(text, {\n          noLinebreaks: true, \n          entities, \n          noLinks: true,\n          noTextFormat: true\n        });\n  \n        parts.push(htmlToDocumentFragment(messageWrapped) as any);\n      }\n    }\n\n    if(plain) {\n      return parts.join('');\n    } else {\n      const fragment = document.createDocumentFragment();\n      fragment.append(...parts);\n      return fragment;\n    }\n  }\n\n  public wrapSenderToPeer(message: MyMessage) {\n    const senderTitle: HTMLElement = document.createElement('span');\n    senderTitle.classList.add('sender-title');\n    \n    const fromMe = message.fromId === rootScope.myId && message.peerId !== rootScope.myId;\n    senderTitle.append(\n      fromMe ? \n        i18n('FromYou') : \n        new PeerTitle({\n          ...this.getMessageSenderPeerIdOrName(message),\n          dialog: message.peerId === rootScope.myId\n        }).element\n      );\n\n    if(appPeersManager.isAnyGroup(message.peerId) || fromMe) {\n      const peerTitle = new PeerTitle({peerId: message.peerId}).element;\n      senderTitle.append(' ➝ ', peerTitle);\n    }\n\n    return senderTitle;\n  }\n\n  public getMessageSenderPeerIdOrName(message: MyMessage) {\n    if(message.fromId) {\n      return {\n        peerId: message.fromId\n      };\n    } else {\n      return {\n        fromName: (message as Message.message).fwd_from?.from_name\n      };\n    }\n  }\n\n  public wrapSentTime(message: MyMessage) {\n    const el: HTMLElement = document.createElement('span');\n    el.classList.add('sent-time');\n    el.append(formatDateAccordingToTodayNew(new Date(message.date * 1000)));\n\n    return el;\n  }\n\n  private wrapJoinVoiceChatAnchor(message: Message.messageService) {\n    const action = message.action as MessageAction.messageActionInviteToGroupCall;\n    const {onclick, url} = RichTextProcessor.wrapUrl(`tg://voicechat?chat_id=${message.peerId.toChatId()}&id=${action.call.id}&access_hash=${action.call.access_hash}`);\n    if(!onclick) {\n      return document.createElement('span');\n    }\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.setAttribute('onclick', onclick + '(this)');\n\n    return a;\n  }\n\n  private wrapMessageActionTextNewUnsafe(message: MyMessage, plain?: boolean) {\n    const element: HTMLElement = plain ? undefined : document.createElement('span');\n    const action = 'action' in message && message.action;\n\n    // this.log('message action:', action);\n\n    if((action as MessageAction.messageActionCustomAction).message) {\n      const unsafeMessage = (action as MessageAction.messageActionCustomAction).message;\n      if(plain) {\n        return RichTextProcessor.wrapPlainText(unsafeMessage);\n      } else {\n        element.innerHTML = RichTextProcessor.wrapRichText(unsafeMessage, {noLinebreaks: true});\n        return element;\n      }\n    } else {\n      let _ = action._;\n      //let suffix = '';\n      let langPackKey: LangPackKey;\n      let args: any[];\n\n      const getNameDivHTML = (peerId: PeerId, plain: boolean) => {\n        return plain ? appPeersManager.getPeerTitle(peerId, plain) : (new PeerTitle({peerId})).element;\n      };\n\n      switch(action._) {\n        case 'messageActionPhoneCall': {\n          _ += '.' + (action as any).type;\n\n          args = [formatCallDuration(action.duration, plain)];\n          break;\n        }\n\n        case 'messageActionGroupCall': {\n          _ += '.' + (action as any).type;\n\n          args = [];\n          if(!_.endsWith('You') && !message.pFlags.post) {\n            args.push(getNameDivHTML(message.fromId, plain));\n          }\n\n          if(action.duration !== undefined) {\n            args.push(formatCallDuration(action.duration, plain));\n          } else {\n            args.push(this.wrapJoinVoiceChatAnchor(message as any));\n          }\n\n          break;\n        }\n\n        case 'messageActionInviteToGroupCall': {\n          const peerIds = [message.fromId, action.users[0].toPeerId()];\n          let a = 'Chat.Service.VoiceChatInvitation';\n          const myId = appUsersManager.getSelf().id;\n          if(peerIds[0] === myId) a += 'ByYou';\n          else if(peerIds[1] === myId) a += 'ForYou';\n          indexOfAndSplice(peerIds, myId);\n\n          langPackKey = a as LangPackKey;\n          args = peerIds.map(peerId => getNameDivHTML(peerId, plain));\n          args.push(this.wrapJoinVoiceChatAnchor(message as any));\n          break;\n        }\n\n        case 'messageActionGroupCallScheduled': {\n          const today = new Date();\n          const date = new Date(action.schedule_date * 1000);\n          const daysToStart = (date.getTime() - today.getTime()) / 86400e3;\n          const tomorrowDate = new Date(today);\n          tomorrowDate.setDate(tomorrowDate.getDate() + 1);\n\n          const isBroadcast = appPeersManager.isBroadcast(message.peerId);\n          langPackKey = isBroadcast ? 'ChatList.Service.VoiceChatScheduled.Channel' : 'ChatList.Service.VoiceChatScheduled';\n          args = [];\n          const myId = appUsersManager.getSelf().id;\n          if(message.fromId === myId) {\n            langPackKey += 'You';\n          } else if(!isBroadcast) {\n            args.push(getNameDivHTML(message.fromId, plain));\n          }\n\n          let k: LangPackKey, _args: FormatterArguments = [];\n          if(daysToStart < 1 && date.getDate() === today.getDate()) {\n            k = 'TodayAtFormattedWithToday';\n          } else if(daysToStart < 2 && date.getDate() === tomorrowDate.getDate()) {\n            k = 'Time.TomorrowAt';\n          } else {\n            k = 'formatDateAtTime';\n            _args.push(new I18n.IntlDateElement({\n              date, \n              options: {\n                day: '2-digit',\n                month: '2-digit',\n                year: '2-digit'\n              }\n            }).element);\n          }\n\n          _args.push(formatTime(date));\n          const t = i18n(k, _args);\n          args.push(t);\n\n          break;\n        }\n\n        case 'messageActionChatCreate': {\n          const myId = appUsersManager.getSelf().id;\n          if(message.fromId === myId) {\n            _ += 'You';\n          } else {\n            args = [getNameDivHTML(message.fromId, plain)];\n          }\n          \n          break;\n        }\n\n        case 'messageActionPinMessage': {\n          const peerId = message.peerId;\n          const pinnedMessage = this.getMessageByPeer(peerId, message.reply_to_mid);\n\n          args = [\n            getNameDivHTML(message.fromId, plain),\n          ];\n          \n          if(pinnedMessage.deleted/*  || true */) {\n            langPackKey = 'ActionPinnedNoText';\n\n            if(message.reply_to_mid) { // refresh original message\n              this.fetchMessageReplyTo(message).then(originalMessage => {\n                if(!originalMessage.deleted && !message.deleted) {\n                  rootScope.dispatchEvent('message_edit', {\n                    storage: this.getMessagesStorage(peerId),\n                    peerId: peerId,\n                    mid: message.mid\n                  });\n\n                  if(this.isMessageIsTopMessage(message)) {\n                    rootScope.dispatchEvent('dialogs_multiupdate', {\n                      [peerId]: this.getDialogOnly(peerId)\n                    });\n                  }\n                }\n              });\n            }\n          } else {\n            const a = document.createElement('i');\n            a.dataset.savedFrom = pinnedMessage.peerId + '_' + pinnedMessage.mid;\n            a.dir = 'auto';\n            a.append(this.wrapMessageForReply(pinnedMessage, undefined, undefined, plain as any));\n            args.push(a);\n          }\n\n          break;\n        }\n\n        case 'messageActionChatJoinedByRequest': {\n          const isBroadcast = appPeersManager.isBroadcast(message.peerId);\n          if(message.pFlags.out) {\n            langPackKey = isBroadcast ? 'RequestToJoinChannelApproved' : 'RequestToJoinGroupApproved';\n          } else {\n            langPackKey = isBroadcast ? 'ChatService.UserJoinedChannelByRequest' : 'ChatService.UserJoinedGroupByRequest';\n            args = [getNameDivHTML(message.fromId, plain)];\n          }\n          break;\n        }\n\n        case 'messageActionContactSignUp':\n        case 'messageActionChatReturn':\n        case 'messageActionChatLeave':\n        case 'messageActionChatJoined':\n        case 'messageActionChatEditPhoto':\n        case 'messageActionChatDeletePhoto':\n        case 'messageActionChatEditVideo':\n        case 'messageActionChatJoinedByLink':\n        case 'messageActionChannelEditVideo':\n        case 'messageActionChannelDeletePhoto': {\n          args = [getNameDivHTML(message.fromId, plain)];\n          break;\n        }\n\n        case 'messageActionChannelEditTitle':\n        case 'messageActionChatEditTitle': {\n          args = [];\n          if(action._ === 'messageActionChatEditTitle') {\n            args.push(getNameDivHTML(message.fromId, plain));\n          }\n\n          args.push(plain ? action.title : htmlToSpan(RichTextProcessor.wrapEmojiText(action.title)));\n          break;\n        }\n\n        case 'messageActionChatDeleteUser':\n        case 'messageActionChatAddUsers':\n        case 'messageActionChatAddUser': {\n          const users = (action as MessageAction.messageActionChatAddUser).users \n            || [(action as MessageAction.messageActionChatDeleteUser).user_id];\n\n          args = [getNameDivHTML(message.fromId, plain)];\n\n          if(users.length > 1) {\n            const joined = join(\n              users.map((userId: UserId) => getNameDivHTML(userId.toPeerId(), plain)),\n              false,\n              plain\n            );\n            \n            if(plain) {\n              args.push(...joined);\n            } else {\n              const fragment = document.createElement('span');\n              fragment.append(...joined);\n              args.push(fragment);\n            }\n          } else {\n            args.push(getNameDivHTML(users[0].toPeerId(), plain));\n          }\n\n          break;\n        }\n\n        case 'messageActionBotAllowed': {\n          const anchorHTML = RichTextProcessor.wrapRichText(action.domain, {\n            entities: [{\n              _: 'messageEntityUrl',\n              length: action.domain.length,\n              offset: 0\n            }]\n          });\n\n          const node = htmlToSpan(anchorHTML);\n\n          args = [node];\n          break;\n        }\n\n        default:\n          langPackKey = (langPack[_] || `[${action._}]`) as any;\n          break;\n      }\n\n      if(!langPackKey) {\n        langPackKey = langPack[_];\n        if(langPackKey === undefined) {\n          langPackKey = '[' + _ + ']' as any;\n        }\n      }\n\n      if(plain) {\n        return I18n.format(langPackKey, true, args);\n      } else {\n        return _i18n(element, langPackKey, args);\n      }\n\n      //str = !langPackKey || langPackKey[0].toUpperCase() === langPackKey[0] ? langPackKey : getNameDivHTML(message.fromId) + langPackKey + (suffix ? ' ' : '');\n    }\n  }\n\n  public wrapMessageActionTextNew(message: MyMessage, plain: true): string;\n  public wrapMessageActionTextNew(message: MyMessage, plain?: false): HTMLElement;\n  public wrapMessageActionTextNew(message: MyMessage, plain: boolean): HTMLElement | string;\n  public wrapMessageActionTextNew(message: MyMessage, plain?: boolean): HTMLElement | string {\n    try {\n      return this.wrapMessageActionTextNewUnsafe(message, plain);\n    } catch(err) {\n      this.log.error('wrapMessageActionTextNewUnsafe error:', err);\n      return plain ? '' : document.createElement('span');\n    }\n  }\n\n  public reportMessages(peerId: PeerId, mids: number[], reason: ReportReason['_'], message?: string) {\n    return apiManager.invokeApiSingle('messages.report', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      id: mids.map(mid => appMessagesIdsManager.getServerMessageId(mid)),\n      reason: {\n        _: reason\n      },\n      message\n    });\n  }\n\n  public startBot(botId: BotId, chatId?: ChatId, startParam?: string) {\n    const peerId = chatId ? chatId.toPeerId(true) : botId.toPeerId();\n    if(startParam) {\n      const randomId = randomLong();\n\n      return apiManager.invokeApi('messages.startBot', {\n        bot: appUsersManager.getUserInput(botId),\n        peer: appPeersManager.getInputPeerById(peerId),\n        random_id: randomId,\n        start_param: startParam\n      }).then((updates) => {\n        apiUpdatesManager.processUpdateMessage(updates);\n      });\n    }\n\n    const str = '/start';\n    if(chatId) {\n      let promise: Promise<void>;\n      if(appChatsManager.isChannel(chatId)) {\n        promise = appChatsManager.inviteToChannel(chatId, [botId]);\n      } else {\n        promise = appChatsManager.addChatUser(chatId, botId, 0);\n      }\n\n      return promise.catch((error) => {\n        if(error && error.type == 'USER_ALREADY_PARTICIPANT') {\n          error.handled = true;\n          return;\n        }\n\n        throw error;\n      }).then(() => {\n        const bot = appUsersManager.getUser(botId);\n        return this.sendText(peerId, str + '@' + bot.username);\n      });\n    }\n\n    return this.sendText(peerId, str);\n  }\n\n  public editPeerFolders(peerIds: PeerId[], folderId: number) {\n    apiManager.invokeApi('folders.editPeerFolders', {\n      folder_peers: peerIds.map(peerId => {\n        return {\n          _: 'inputFolderPeer',\n          peer: appPeersManager.getInputPeerById(peerId),\n          folder_id: folderId\n        };\n      })\n    }).then(updates => {\n      //this.log('editPeerFolders updates:', updates);\n      apiUpdatesManager.processUpdateMessage(updates); // WARNING! возможно тут нужно добавлять channelId, и вызывать апдейт для каждого канала отдельно\n    });\n  }\n\n  public toggleDialogPin(peerId: PeerId, filterId?: number) {\n    if(filterId > 1) {\n      return this.filtersStorage.toggleDialogPin(peerId, filterId);\n    }\n\n    const dialog = this.getDialogOnly(peerId);\n    if(!dialog) return Promise.reject();\n\n    const pinned = dialog.pFlags?.pinned ? undefined : true;\n\n    if(pinned) {\n      const max = filterId === 1 ? rootScope.config.pinned_infolder_count_max : rootScope.config.pinned_dialogs_count_max;\n      if(this.dialogsStorage.getPinnedOrders(filterId).length >= max) {\n        return Promise.reject({type: 'PINNED_DIALOGS_TOO_MUCH'});\n      }\n    }\n\n    return apiManager.invokeApi('messages.toggleDialogPin', {\n      peer: appPeersManager.getInputDialogPeerById(peerId),\n      pinned\n    }).then(bool => {\n      if(bool) {\n        const pFlags: Update.updateDialogPinned['pFlags'] = pinned ? {pinned} : {};\n        apiUpdatesManager.saveUpdate({\n          _: 'updateDialogPinned',\n          peer: appPeersManager.getDialogPeer(peerId),\n          folder_id: filterId,\n          pFlags\n        });\n      }\n    });\n  }\n\n  public markDialogUnread(peerId: PeerId, read?: true) {\n    const dialog = this.getDialogOnly(peerId);\n    if(!dialog) return Promise.reject();\n\n    const unread = read || dialog.pFlags?.unread_mark ? undefined : true;\n    return apiManager.invokeApi('messages.markDialogUnread', {\n      peer: appPeersManager.getInputDialogPeerById(peerId),\n      unread\n    }).then(bool => {\n      if(bool) {\n        const pFlags: Update.updateDialogUnreadMark['pFlags'] = unread ? {unread} : {};\n        this.onUpdateDialogUnreadMark({\n          _: 'updateDialogUnreadMark',\n          peer: appPeersManager.getDialogPeer(peerId),\n          pFlags\n        });\n      }\n    });\n  }\n\n  public migrateChecks(migrateFrom: PeerId, migrateTo: PeerId) {\n    if(!this.migratedFromTo[migrateFrom] &&\n      !this.migratedToFrom[migrateTo] &&\n      appChatsManager.hasChat(migrateTo.toChatId())) {\n      const fromChat = appChatsManager.getChat(migrateFrom.toChatId());\n      if(fromChat &&\n        fromChat.migrated_to &&\n        fromChat.migrated_to.channel_id === migrateTo.toChatId()) {\n          this.migratedFromTo[migrateFrom] = migrateTo;\n          this.migratedToFrom[migrateTo] = migrateFrom;\n\n        //setTimeout(() => {\n          rootScope.dispatchEvent('dialog_migrate', {migrateFrom, migrateTo});\n\n          this.dialogsStorage.dropDialogWithEvent(migrateFrom);\n        //}, 100);\n      }\n    }\n  }\n\n  private canMessageBeEdited(message: any, kind: 'text' | 'poll') {\n    if(message.pFlags.is_outgoing) {\n      return false;\n    }\n\n    const goodMedias = [\n      'messageMediaPhoto',\n      'messageMediaDocument',\n      'messageMediaWebPage'\n    ];\n\n    if(kind === 'poll') {\n      goodMedias.push('messageMediaPoll');\n    }\n\n    if(message._ !== 'message' ||\n        message.deleted ||\n        message.fwd_from ||\n        message.via_bot_id ||\n        message.media && goodMedias.indexOf(message.media._) === -1 ||\n        message.fromId && appUsersManager.isBot(message.fromId)) {\n      return false;\n    }\n    \n    if(message.media &&\n        message.media._ === 'messageMediaDocument' &&\n        (message.media.document.sticker || message.media.document.type === 'round')) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public canEditMessage(message: Message.message | Message.messageService, kind: 'text' | 'poll' = 'text') {\n    if(!message || !this.canMessageBeEdited(message, kind)) {\n      return false;\n    }\n\n    // * second rule for saved messages, because there is no 'out' flag\n    if(/* message.pFlags.out ||  */this.getMessagePeer(message) === appUsersManager.getSelf().id) {\n      return true;\n    }\n\n    if(!message.pFlags.out || (\n        message.peer_id._ !== 'peerChannel' &&  \n        message.date < (tsNow(true) - rootScope.config.edit_time_limit) && \n        (message as Message.message).media?._ !== 'messageMediaPoll'\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  public canDeleteMessage(message: MyMessage) {\n    return message && (\n      message.peerId.isUser() \n      || message.fromId === rootScope.myId \n      || appChatsManager.getChat(message.peerId.toChatId())._ === 'chat' \n      || appChatsManager.hasRights(message.peerId.toChatId(), 'delete_messages')\n    ) && !message.pFlags.is_outgoing;\n  }\n\n  public getReplyKeyboard(peerId: PeerId) {\n    return this.getHistoryStorage(peerId).replyMarkup;\n  }\n\n  public mergeReplyKeyboard(historyStorage: HistoryStorage, message: Message.messageService | Message.message) {\n    // this.log('merge', message.mid, message.reply_markup, historyStorage.reply_markup)\n    let messageReplyMarkup = (message as Message.message).reply_markup;\n    if(!messageReplyMarkup &&\n      !message.pFlags?.out &&\n      !(message as Message.messageService).action) {\n      return false;\n    }\n\n    if(messageReplyMarkup?._ === 'replyInlineMarkup') {\n      return false;\n    }\n\n    const lastReplyMarkup = historyStorage.replyMarkup;\n    if(messageReplyMarkup) {\n      if(lastReplyMarkup && lastReplyMarkup.mid >= message.mid) {\n        return false;\n      }\n\n      if(messageReplyMarkup.pFlags.selective) {\n        return false;\n      }\n\n      if(historyStorage.maxOutId &&\n        message.mid < historyStorage.maxOutId &&\n        (messageReplyMarkup as ReplyMarkup.replyKeyboardMarkup | ReplyMarkup.replyKeyboardForceReply).pFlags.single_use) {\n        (messageReplyMarkup as ReplyMarkup.replyKeyboardMarkup | ReplyMarkup.replyKeyboardForceReply).pFlags.hidden = true;\n      }\n\n      messageReplyMarkup.mid = message.mid;\n      /* messageReplyMarkup = Object.assign({\n        mid: message.mid\n      }, messageReplyMarkup); */\n\n      if(messageReplyMarkup._ !== 'replyKeyboardHide') {\n        messageReplyMarkup.fromId = appPeersManager.getPeerId(message.from_id);\n      }\n\n      historyStorage.replyMarkup = messageReplyMarkup;\n      // this.log('set', historyStorage.reply_markup)\n      return true;\n    }\n\n    if(message.pFlags.out) {\n      if(lastReplyMarkup) {\n        assumeType<ReplyMarkup.replyKeyboardMarkup>(lastReplyMarkup);\n        if(lastReplyMarkup.pFlags.single_use &&\n          !lastReplyMarkup.pFlags.hidden &&\n          (message.mid > lastReplyMarkup.mid || message.pFlags.is_outgoing) &&\n          (message as Message.message).message) {\n          lastReplyMarkup.pFlags.hidden = true;\n          // this.log('set', historyStorage.reply_markup)\n          return true;\n        }\n      } else if(!historyStorage.maxOutId ||\n        message.mid > historyStorage.maxOutId) {\n        historyStorage.maxOutId = message.mid;\n      }\n    }\n\n    assumeType<Message.messageService>(message);\n    if(message.action?._ === 'messageActionChatDeleteUser' &&\n      (lastReplyMarkup\n        ? message.action.user_id === (lastReplyMarkup as ReplyMarkup.replyKeyboardMarkup).fromId\n        : appUsersManager.isBot(message.action.user_id)\n      )\n    ) {\n      historyStorage.replyMarkup = {\n        _: 'replyKeyboardHide',\n        mid: message.mid,\n        pFlags: {}\n      };\n      // this.log('set', historyStorage.reply_markup)\n      return true;\n    }\n\n    return false;\n  }\n\n  public getSearchStorage(peerId: PeerId, inputFilter: MyInputMessagesFilter) {\n    if(!this.searchesStorage[peerId]) this.searchesStorage[peerId] = {};\n    if(!this.searchesStorage[peerId][inputFilter]) this.searchesStorage[peerId][inputFilter] = {history: []};\n    return this.searchesStorage[peerId][inputFilter];\n  }\n\n  public getSearchCounters(peerId: PeerId, filters: MessagesFilter[], canCache = true): Promise<MessagesSearchCounter[]> {\n    if(appPeersManager.isRestricted(peerId)) {\n      return Promise.resolve(filters.map((filter) => {\n        return {\n          _: 'messages.searchCounter',\n          pFlags: {},\n          filter: filter,\n          count: 0\n        };\n      }));\n    }\n\n    const func = (canCache ? apiManager.invokeApiCacheable : apiManager.invokeApi).bind(apiManager);\n    return func('messages.getSearchCounters', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      filters\n    });\n  }\n\n  public filterMessagesByInputFilter(inputFilter: MyInputMessagesFilter, history: number[], storage: MessagesStorage, limit: number) {\n    const foundMsgs: MyMessage[] = [];\n    if(!history.length) {\n      return foundMsgs;\n    }\n\n    let filtering = true;\n    const neededContents: Partial<{\n      [messageMediaType in MessageMedia['_']]: boolean\n    }> & Partial<{\n      avatar: boolean,\n      url: boolean\n    }> = {},\n      neededDocTypes: MyDocument['type'][] = [], \n      excludeDocTypes: MyDocument['type'][] = []/* ,\n      neededFlags: string[] = [] */;\n\n    switch(inputFilter) {\n      case 'inputMessagesFilterPhotos':\n        neededContents['messageMediaPhoto'] = true;\n        break;\n\n      case 'inputMessagesFilterPhotoVideo':\n        neededContents['messageMediaPhoto'] = true;\n        neededContents['messageMediaDocument'] = true;\n        neededDocTypes.push('video');\n        break;\n\n      case 'inputMessagesFilterVideo':\n        neededContents['messageMediaDocument'] = true;\n        neededDocTypes.push('video');\n        break;\n\n      case 'inputMessagesFilterDocument':\n        neededContents['messageMediaDocument'] = true;\n        excludeDocTypes.push('video');\n        break;\n\n      case 'inputMessagesFilterVoice':\n        neededContents['messageMediaDocument'] = true;\n        neededDocTypes.push('voice');\n        break;\n\n      case 'inputMessagesFilterRoundVoice':\n        neededContents['messageMediaDocument'] = true;\n        neededDocTypes.push('round', 'voice');\n        break;\n\n      case 'inputMessagesFilterRoundVideo':\n        neededContents['messageMediaDocument'] = true;\n        neededDocTypes.push('round');\n        break;\n\n      case 'inputMessagesFilterMusic':\n        neededContents['messageMediaDocument'] = true;\n        neededDocTypes.push('audio');\n        break;\n\n      case 'inputMessagesFilterUrl':\n        neededContents['url'] = true;\n        break;\n\n      case 'inputMessagesFilterChatPhotos':\n        neededContents['avatar'] = true;\n        break;\n\n      /* case 'inputMessagesFilterPinned':\n        neededFlags.push('pinned');\n        break; */\n\n      /* case 'inputMessagesFilterMyMentions':\n        neededContents['mentioned'] = true;\n        break; */\n\n      default:\n        filtering = false;\n        break;\n        /* return Promise.resolve({\n          count: 0,\n          next_rate: 0,\n          history: [] as number[]\n        }); */\n    }\n\n    if(!filtering) {\n      return foundMsgs;\n    }\n\n    for(let i = 0, length = history.length; i < length; ++i) {\n      const message: Message.message | Message.messageService = storage.get(history[i]);\n      if(!message) continue;\n  \n      //|| (neededContents['mentioned'] && message.totalEntities.find((e: any) => e._ === 'messageEntityMention'));\n  \n      let found = false;\n      if(message._ === 'message') {\n        if(message.media && neededContents[message.media._]/*  && !message.fwd_from */) {\n          const doc = (message.media as MessageMedia.messageMediaDocument).document as MyDocument;\n          if(doc && ((neededDocTypes.length && !neededDocTypes.includes(doc.type)) \n            || excludeDocTypes.includes(doc.type))) {\n            continue;\n          }\n  \n          found = true;\n        } else if(neededContents['url'] && message.message) {\n          const goodEntities = ['messageEntityTextUrl', 'messageEntityUrl'];\n          if((message.totalEntities as MessageEntity[]).find(e => goodEntities.includes(e._)) || RichTextProcessor.matchUrl(message.message)) {\n            found = true;\n          }\n        }\n      } else if(neededContents['avatar'] && \n        message.action && \n        ([\n          'messageActionChannelEditPhoto' as const, \n          'messageActionChatEditPhoto' as const, \n          'messageActionChannelEditVideo' as const, \n          'messageActionChatEditVideo' as const\n        ] as MessageAction['_'][]).includes(message.action._)) {\n        found = true;\n      }/*  else if(neededFlags.find(flag => message.pFlags[flag])) {\n        found = true;\n      } */\n  \n      if(found) {\n        foundMsgs.push(message);\n        if(foundMsgs.length >= limit) {\n          break;\n        }\n      }\n    }\n\n    return foundMsgs;\n  }\n\n  public getSearch({peerId, query, inputFilter, maxId, limit, nextRate, backLimit, threadId, folderId, minDate, maxDate}: {\n    peerId?: PeerId,\n    maxId?: number,\n    limit?: number,\n    nextRate?: number,\n    backLimit?: number,\n    threadId?: number,\n    folderId?: number,\n    query?: string,\n    inputFilter?: {\n      _: MyInputMessagesFilter\n    },\n    minDate?: number,\n    maxDate?: number\n  }): Promise<{\n    count: number,\n    next_rate: number,\n    offset_id_offset: number,\n    history: MyMessage[]\n  }> {\n    if(appPeersManager.isRestricted(peerId)) {\n      return Promise.resolve({\n        count: 0,\n        offset_id_offset: 0,\n        next_rate: undefined,\n        history: []\n      });\n    }\n\n    if(!query) query = '';\n    if(!inputFilter) inputFilter = {_: 'inputMessagesFilterEmpty'};\n    if(limit === undefined) limit = 20;\n    if(!nextRate) nextRate = 0;\n    if(!backLimit) backLimit = 0;\n\n    minDate = minDate ? minDate / 1000 | 0 : 0;\n    maxDate = maxDate ? maxDate / 1000 | 0 : 0;\n\n    let foundMsgs: MyMessage[] = [];\n\n    //this.log('search', maxId);\n\n    if(backLimit) {\n      limit += backLimit;\n    }\n\n    //const beta = inputFilter._ === 'inputMessagesFilterPinned' && !backLimit;\n    const beta = false;\n\n    let storage: {\n      count?: number;\n      history: SlicedArray;\n    };\n\n    // * костыль для limit 1, если нужно и получить сообщение, и узнать количество сообщений\n    if(peerId && !backLimit && !maxId && !query && limit !== 1 && !threadId/*  && inputFilter._ !== 'inputMessagesFilterPinned' */) {\n      storage = beta ? \n        this.getSearchStorage(peerId, inputFilter._) as any : \n        this.getHistoryStorage(peerId);\n      foundMsgs = this.filterMessagesByInputFilter(inputFilter._, storage.history.slice, this.getMessagesStorage(peerId), limit);\n    }\n\n    if(foundMsgs.length) {\n      if(foundMsgs.length < limit && (beta ? storage.count !== storage.history.length : true)) {\n        maxId = foundMsgs[foundMsgs.length - 1].mid;\n        limit = limit - foundMsgs.length;\n      } else {\n        return Promise.resolve({\n          count: beta ? storage.count : 0,\n          next_rate: 0,\n          offset_id_offset: 0,\n          history: foundMsgs\n        });\n      }\n    } else if(beta && storage?.count) {\n      return Promise.resolve({\n        count: storage.count,\n        next_rate: 0,\n        offset_id_offset: 0,\n        history: []\n      });\n    }\n\n    const canCache = false && (['inputMessagesFilterChatPhotos', 'inputMessagesFilterPinned'] as MyInputMessagesFilter[]).includes(inputFilter._);\n    const method = (canCache ? apiManager.invokeApiCacheable : apiManager.invokeApi).bind(apiManager);\n\n    let apiPromise: Promise<any>;\n    if(peerId && !nextRate && folderId === undefined/*  || !query */) {\n      apiPromise = method('messages.search', {\n        peer: appPeersManager.getInputPeerById(peerId),\n        q: query || '',\n        filter: inputFilter as any as MessagesFilter,\n        min_date: minDate,\n        max_date: maxDate,\n        limit,\n        offset_id: appMessagesIdsManager.getServerMessageId(maxId) || 0,\n        add_offset: backLimit ? -backLimit : 0,\n        max_id: 0,\n        min_id: 0,\n        hash: '',\n        top_msg_id: appMessagesIdsManager.getServerMessageId(threadId) || 0\n      }, {\n        //timeout: APITIMEOUT,\n        noErrorBox: true\n      });\n    } else {\n      //var offsetDate = 0;\n      let offsetPeerId: PeerId;\n      let offsetId = 0;\n      let offsetMessage = maxId && this.getMessageByPeer(peerId, maxId);\n\n      if(offsetMessage && offsetMessage.date) {\n        //offsetDate = offsetMessage.date + serverTimeManager.serverTimeOffset;\n        offsetId = offsetMessage.id;\n        offsetPeerId = this.getMessagePeer(offsetMessage);\n      }\n\n      apiPromise = method('messages.searchGlobal', {\n        q: query,\n        filter: inputFilter as any as MessagesFilter,\n        min_date: minDate,\n        max_date: maxDate,\n        offset_rate: nextRate,\n        offset_peer: appPeersManager.getInputPeerById(offsetPeerId),\n        offset_id: offsetId,\n        limit,\n        folder_id: folderId\n      }, {\n        //timeout: APITIMEOUT,\n        noErrorBox: true\n      });\n    }\n\n    return apiPromise.then((searchResult: any) => {\n      appUsersManager.saveApiUsers(searchResult.users);\n      appChatsManager.saveApiChats(searchResult.chats);\n      this.saveMessages(searchResult.messages);\n\n      /* if(beta && storage && (!maxId || storage.history[storage.history.length - 1] === maxId)) {\n        const storage = this.getSearchStorage(peerId, inputFilter._);\n        const add = (searchResult.messages.map((m: any) => m.mid) as number[]).filter(mid => storage.history.indexOf(mid) === -1);\n        storage.history.push(...add);\n        storage.history.sort((a, b) => b - a);\n        storage.count = searchResult.count;\n      } */\n\n      if(DEBUG) {\n        this.log('getSearch result:', inputFilter, searchResult);\n      }\n\n      const foundCount: number = searchResult.count || (foundMsgs.length + searchResult.messages.length);\n\n      searchResult.messages.forEach((message: MyMessage) => {\n        const peerId = this.getMessagePeer(message);\n        if(peerId.isAnyChat()) {\n          const chat: Chat.chat = appChatsManager.getChat(peerId.toChatId());\n          if(chat.migrated_to) {\n            this.migrateChecks(peerId, (chat.migrated_to as InputChannel.inputChannel).channel_id.toPeerId(true));\n          }\n        }\n\n        foundMsgs.push(message);\n      });\n\n      return {\n        count: foundCount,\n        offset_id_offset: searchResult.offset_id_offset || 0,\n        next_rate: searchResult.next_rate,\n        history: foundMsgs\n      };\n    });\n  }\n\n  public subscribeRepliesThread(peerId: PeerId, mid: number) {\n    const repliesKey = peerId + '_' + mid;\n    for(const threadKey in this.threadsToReplies) {\n      if(this.threadsToReplies[threadKey] === repliesKey) return;\n    }\n\n    this.getDiscussionMessage(peerId, mid);\n  }\n\n  public generateThreadServiceStartMessage(message: Message.message | Message.messageService) {\n    const threadKey = message.peerId + '_' + message.mid;\n    if(this.threadsServiceMessagesIdsStorage[threadKey]) return;\n\n    const maxMessageId = appMessagesIdsManager.getServerMessageId(Math.max(...this.getMidsByMessage(message)));\n    const serviceStartMessage: Message.messageService = {\n      _: 'messageService',\n      pFlags: {\n        is_single: true\n      },\n      id: appMessagesIdsManager.generateMessageId(maxMessageId, true),\n      date: message.date,\n      from_id: {_: 'peerUser', user_id: NULL_PEER_ID}/* message.from_id */,\n      peer_id: message.peer_id,\n      action: {\n        _: 'messageActionDiscussionStarted'\n      },\n      reply_to: this.generateReplyHeader(message.id)\n    };\n\n    this.saveMessages([serviceStartMessage], {isOutgoing: true});\n    this.threadsServiceMessagesIdsStorage[threadKey] = serviceStartMessage.mid;\n  } \n\n  public getDiscussionMessage(peerId: PeerId, mid: number) {\n    return apiManager.invokeApiSingle('messages.getDiscussionMessage', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      msg_id: appMessagesIdsManager.getServerMessageId(mid)\n    }).then(result => {\n      appChatsManager.saveApiChats(result.chats);\n      appUsersManager.saveApiUsers(result.users);\n      this.saveMessages(result.messages);\n\n      const message = this.filterMessages(result.messages[0] as Message.message, message => !!(message as Message.message).replies)[0] as Message.message;\n      const threadKey = message.peerId + '_' + message.mid;\n\n      this.generateThreadServiceStartMessage(message);\n      \n      const historyStorage = this.getHistoryStorage(message.peerId, message.mid);\n      result.max_id = historyStorage.maxId = appMessagesIdsManager.generateMessageId(result.max_id) || 0;\n      result.read_inbox_max_id = historyStorage.readMaxId = appMessagesIdsManager.generateMessageId(result.read_inbox_max_id ?? message.mid);\n      result.read_outbox_max_id = historyStorage.readOutboxMaxId = appMessagesIdsManager.generateMessageId(result.read_outbox_max_id) || 0;\n\n      this.threadsToReplies[threadKey] = peerId + '_' + mid;\n\n      return message;\n    });\n  }\n\n  private handleNewMessage(peerId: PeerId, mid: number) {\n    if(this.newMessagesToHandle[peerId] === undefined) {\n      this.newMessagesToHandle[peerId] = new Set();\n    }\n\n    this.newMessagesToHandle[peerId].add(mid);\n    if(!this.newMessagesHandleTimeout) {\n      this.newMessagesHandleTimeout = window.setTimeout(this.handleNewMessages, 0);\n    }\n  }\n\n  private handleNewMessages = () => {\n    clearTimeout(this.newMessagesHandleTimeout);\n    this.newMessagesHandleTimeout = 0;\n\n    rootScope.dispatchEvent('history_multiappend', this.newMessagesToHandle);\n    this.newMessagesToHandle = {};\n  };\n\n  private handleNewDialogs = () => {\n    let newMaxSeenId = 0;\n    const obj = this.newDialogsToHandle;\n    for(const peerId in obj) {\n      const dialog = obj[peerId];\n      if(!dialog) {\n        this.reloadConversation(peerId.toPeerId());\n        delete obj[peerId];\n      } else {\n        this.dialogsStorage.pushDialog(dialog);\n        if(!appPeersManager.isChannel(peerId.toPeerId())) {\n          newMaxSeenId = Math.max(newMaxSeenId, dialog.top_message || 0);\n        }\n      }\n    }\n\n    //this.log('after order:', this.dialogsStorage[0].map(d => d.peerId));\n\n    if(newMaxSeenId !== 0) {\n      this.incrementMaxSeenId(newMaxSeenId);\n    }\n\n    rootScope.dispatchEvent('dialogs_multiupdate', obj);\n    this.newDialogsToHandle = {};\n  };\n\n  public scheduleHandleNewDialogs(peerId?: PeerId, dialog?: Dialog) {\n    if(peerId !== undefined) {\n      this.newDialogsToHandle[peerId] = dialog;\n    }\n\n    if(this.newDialogsHandlePromise) return this.newDialogsHandlePromise;\n    return this.newDialogsHandlePromise = new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n        this.newDialogsHandlePromise = undefined;\n        this.handleNewDialogs();\n      }, 0);\n    });\n  }\n\n  public deleteMessages(peerId: PeerId, mids: number[], revoke?: boolean) {\n    let promise: Promise<any>;\n\n    const localMessageIds = mids.map(mid => appMessagesIdsManager.getServerMessageId(mid));\n\n    if(peerId.isAnyChat() && appPeersManager.isChannel(peerId)) {\n      const channelId = peerId.toChatId();\n      const channel: Chat.channel = appChatsManager.getChat(channelId);\n      if(!channel.pFlags.creator && !channel.admin_rights?.pFlags?.delete_messages) {\n        mids = mids.filter((mid) => {\n          const message = this.getMessageByPeer(peerId, mid);\n          return !!message.pFlags.out;\n        });\n\n        if(!mids.length) {\n          return;\n        }\n      }\n\n      promise = apiManager.invokeApi('channels.deleteMessages', {\n        channel: appChatsManager.getChannelInput(channelId),\n        id: localMessageIds\n      }).then((affectedMessages) => {\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateDeleteChannelMessages',\n          channel_id: channelId,\n          messages: mids,\n          pts: affectedMessages.pts,\n          pts_count: affectedMessages.pts_count\n        });\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.deleteMessages', {\n        revoke,\n        id: localMessageIds\n      }).then((affectedMessages) => {\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateDeleteMessages',\n          messages: mids,\n          pts: affectedMessages.pts,\n          pts_count: affectedMessages.pts_count\n        });\n      });\n    }\n\n    return promise;\n  }\n\n  public readHistory(peerId: PeerId, maxId = 0, threadId?: number, force = false) {\n    if(DO_NOT_READ_HISTORY) {\n      return Promise.resolve();\n    }\n\n    // console.trace('start read')\n    this.log('readHistory:', peerId, maxId, threadId);\n    if(!this.getReadMaxIdIfUnread(peerId, threadId) && !force) {\n      this.log('readHistory: isn\\'t unread');\n      return Promise.resolve();\n    }\n\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\n\n    if(historyStorage.triedToReadMaxId >= maxId) {\n      return Promise.resolve();\n    }\n\n    let apiPromise: Promise<any>;\n    if(threadId) {\n      if(!historyStorage.readPromise) {\n        apiPromise = apiManager.invokeApi('messages.readDiscussion', {\n          peer: appPeersManager.getInputPeerById(peerId),\n          msg_id: appMessagesIdsManager.getServerMessageId(threadId),\n          read_max_id: appMessagesIdsManager.getServerMessageId(maxId)\n        });\n      }\n\n      apiUpdatesManager.processLocalUpdate({\n        _: 'updateReadChannelDiscussionInbox',\n        channel_id: peerId.toChatId(),\n        top_msg_id: threadId,\n        read_max_id: maxId\n      });\n    } else if(appPeersManager.isChannel(peerId)) {\n      if(!historyStorage.readPromise) {\n        apiPromise = apiManager.invokeApi('channels.readHistory', {\n          channel: appChatsManager.getChannelInput(peerId.toChatId()),\n          max_id: appMessagesIdsManager.getServerMessageId(maxId)\n        });\n      }\n\n      apiUpdatesManager.processLocalUpdate({\n        _: 'updateReadChannelInbox',\n        max_id: maxId,\n        channel_id: peerId.toChatId(),\n        still_unread_count: undefined,\n        pts: undefined\n      });\n    } else {\n      if(!historyStorage.readPromise) {\n        apiPromise = apiManager.invokeApi('messages.readHistory', {\n          peer: appPeersManager.getInputPeerById(peerId),\n          max_id: appMessagesIdsManager.getServerMessageId(maxId)\n        }).then((affectedMessages) => {\n          apiUpdatesManager.processUpdateMessage({\n            _: 'updateShort',\n            update: {\n              _: 'updatePts',\n              pts: affectedMessages.pts,\n              pts_count: affectedMessages.pts_count\n            }\n          });\n        });\n      }\n\n      apiUpdatesManager.processLocalUpdate({\n        _: 'updateReadHistoryInbox',\n        max_id: maxId,\n        peer: appPeersManager.getOutputPeer(peerId),\n        still_unread_count: undefined,\n        pts: undefined,\n        pts_count: undefined\n      });\n    }\n\n    appNotificationsManager.soundReset(appPeersManager.getPeerString(peerId));\n\n    if(historyStorage.readPromise) {\n      return historyStorage.readPromise;\n    }\n\n    historyStorage.triedToReadMaxId = maxId;\n\n    apiPromise.finally(() => {\n      delete historyStorage.readPromise;\n\n      const {readMaxId} = historyStorage;\n      this.log('readHistory: promise finally', maxId, readMaxId);\n\n      if(readMaxId > maxId) {\n        this.readHistory(peerId, readMaxId, threadId, true);\n      }\n    });\n\n    return historyStorage.readPromise = apiPromise;\n  }\n\n  public readAllHistory(peerId: PeerId, threadId?: number, force = false) {\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\n    if(historyStorage.maxId) {\n      this.readHistory(peerId, historyStorage.maxId, threadId, force); // lol\n    }\n  }\n\n  public fixDialogUnreadMentionsIfNoMessage(peerId: PeerId) {\n    const dialog = this.getDialogOnly(peerId);\n    if(dialog?.unread_mentions_count) {\n      this.reloadConversation(peerId);\n    }\n  }\n\n  public modifyCachedMentions(peerId: PeerId, mid: number, add: boolean) {\n    const slicedArray = this.unreadMentions[peerId];\n    if(!slicedArray) return;\n\n    if(add) {\n      if(slicedArray.first.isEnd(SliceEnd.Top)) {\n        slicedArray.insertSlice([mid]);\n      }\n    } else {\n      slicedArray.delete(mid);\n    }\n  }\n\n  private fixUnreadMentionsCountIfNeeded(peerId: PeerId, slicedArray: SlicedArray) {\n    const dialog = this.getDialogOnly(peerId);\n    if(!slicedArray.length && dialog?.unread_mentions_count) {\n      this.reloadConversation(peerId);\n    }\n  }\n\n  public goToNextMention(peerId: PeerId) {\n    /* this.getUnreadMentions(peerId, 1, 2, 0).then(messages => {\n      console.log(messages);\n    }); */\n\n    const promise = this.goToNextMentionPromises[peerId];\n    if(promise) {\n      return promise;\n    }\n\n    const slicedArray = this.unreadMentions[peerId] ?? (this.unreadMentions[peerId] = new SlicedArray());\n    const length = slicedArray.length;\n    const isTopEnd = slicedArray.first.isEnd(SliceEnd.Top);\n    if(!length && isTopEnd) {\n      this.fixUnreadMentionsCountIfNeeded(peerId, slicedArray);\n      return Promise.resolve();\n    }\n\n    let loadNextPromise = Promise.resolve();\n    if(!isTopEnd && length < 25) {\n      loadNextPromise = this.loadNextMentions(peerId);\n    }\n\n    return this.goToNextMentionPromises[peerId] = loadNextPromise.then(() => {\n      const last = slicedArray.last;\n      const mid = last && last[last.length - 1];\n      if(mid) {\n        slicedArray.delete(mid);\n        rootScope.dispatchEvent('history_focus', {peerId, mid});\n      } else {\n        this.fixUnreadMentionsCountIfNeeded(peerId, slicedArray);\n      }\n    }).finally(() => {\n      delete this.goToNextMentionPromises[peerId];\n    });\n  }\n\n  public loadNextMentions(peerId: PeerId) {\n    const slicedArray = this.unreadMentions[peerId];\n    const maxId = slicedArray.first[0] || 1;\n\n    const backLimit = 50;\n    const add_offset = -backLimit;\n    const limit = backLimit;\n    return this.getUnreadMentions(peerId, maxId, add_offset, limit).then(messages => {\n      this.mergeHistoryResult(slicedArray, messages, maxId === 1 ? 0 : maxId, limit, add_offset);\n    });\n  }\n\n  public getUnreadMentions(peerId: PeerId, offsetId: number, add_offset: number, limit: number, maxId = 0, minId = 0) {\n    return apiManager.invokeApiSingle('messages.getUnreadMentions', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      offset_id: appMessagesIdsManager.getServerMessageId(offsetId),\n      add_offset,\n      limit,\n      max_id: appMessagesIdsManager.getServerMessageId(maxId),\n      min_id: appMessagesIdsManager.getServerMessageId(minId)\n    }).then(messagesMessages => {\n      assumeType<Exclude<MessagesMessages, MessagesMessages.messagesMessagesNotModified>>(messagesMessages);\n      appUsersManager.saveApiUsers(messagesMessages.users);\n      appChatsManager.saveApiChats(messagesMessages.chats);\n      this.saveMessages(messagesMessages.messages);\n\n      return messagesMessages;\n    });\n  }\n\n  public readMessages(peerId: PeerId, msgIds: number[]) {\n    if(DO_NOT_READ_HISTORY) {\n      return Promise.resolve();\n    }\n\n    if(!msgIds.length) {\n      return Promise.resolve();\n    }\n\n    msgIds = msgIds.map(mid => appMessagesIdsManager.getServerMessageId(mid));\n    let promise: Promise<any>, update: Update.updateChannelReadMessagesContents | Update.updateReadMessagesContents;\n    if(peerId.isAnyChat() && appPeersManager.isChannel(peerId)) {\n      const channelId = peerId.toChatId();\n\n      update = {\n        _: 'updateChannelReadMessagesContents',\n        channel_id: channelId,\n        messages: msgIds\n      };\n\n      promise = apiManager.invokeApi('channels.readMessageContents', {\n        channel: appChatsManager.getChannelInput(channelId),\n        id: msgIds\n      });\n    } else {\n      update = {\n        _: 'updateReadMessagesContents',\n        messages: msgIds,\n        pts: undefined,\n        pts_count: undefined\n      };\n\n      promise = apiManager.invokeApi('messages.readMessageContents', {\n        id: msgIds\n      }).then((affectedMessages) => {\n        (update as Update.updateReadMessagesContents).pts = affectedMessages.pts;\n        (update as Update.updateReadMessagesContents).pts_count = affectedMessages.pts_count;\n        apiUpdatesManager.processLocalUpdate(update);\n      });\n    }\n\n    apiUpdatesManager.processLocalUpdate(update);\n\n    return promise;\n  }\n\n  public getHistoryStorage(peerId: PeerId, threadId?: number) {\n    if(threadId) {\n      //threadId = this.getLocalMessageId(threadId);\n      if(!this.threadsStorage[peerId]) this.threadsStorage[peerId] = {};\n      return this.threadsStorage[peerId][threadId] ?? (this.threadsStorage[peerId][threadId] = {count: null, history: new SlicedArray()});\n    }\n\n    return this.historiesStorage[peerId] ?? (this.historiesStorage[peerId] = {count: null, history: new SlicedArray()});\n  }\n\n  private getNotifyPeerSettings(peerId: PeerId) {\n    return Promise.all([\n      appNotificationsManager.getNotifyPeerTypeSettings(),\n      appNotificationsManager.getNotifySettings(appPeersManager.getInputNotifyPeerById(peerId, true))\n    ]).then(([_, peerTypeNotifySettings]) => {\n      return {\n        muted: appNotificationsManager.isPeerLocalMuted(peerId, true),\n        peerTypeNotifySettings\n      };\n    });\n  }\n\n  private handleNotifications = () => {\n    window.clearTimeout(this.notificationsHandlePromise);\n    this.notificationsHandlePromise = 0;\n\n    //var timeout = $rootScope.idle.isIDLE && StatusManager.isOtherDeviceActive() ? 30000 : 1000;\n    //const timeout = 1000;\n\n    for(const _peerId in this.notificationsToHandle) {\n      const peerId = _peerId.toPeerId();\n      if(rootScope.peerId === peerId && !rootScope.idle.isIDLE) {\n        continue;\n      }\n\n      const notifyPeerToHandle = this.notificationsToHandle[peerId];\n      this.getNotifyPeerSettings(peerId).then(({muted, peerTypeNotifySettings}) => {\n        const topMessage = notifyPeerToHandle.topMessage;\n        if(muted || !topMessage.pFlags.unread) {\n          return;\n        }\n\n        //setTimeout(() => {\n          if(topMessage.pFlags.unread) {\n            this.notifyAboutMessage(topMessage, {\n              fwdCount: notifyPeerToHandle.fwdCount,\n              peerTypeNotifySettings\n            });\n          }\n        //}, timeout);\n      });\n    }\n\n    this.notificationsToHandle = {};\n  };\n\n  private onUpdateMessageId = (update: Update.updateMessageID) => {\n    const randomId = update.random_id;\n    const pendingData = this.pendingByRandomId[randomId];\n    //this.log('AMM updateMessageID:', update, pendingData);\n    if(pendingData) {\n      const {peerId, tempId, threadId, storage} = pendingData;\n      const mid = appMessagesIdsManager.generateMessageId(update.id);\n      const message = this.getMessageFromStorage(storage, mid);\n      if(!message.deleted) {\n        [this.getHistoryStorage(peerId), threadId ? this.getHistoryStorage(peerId, threadId) : undefined]\n        .filter(Boolean)\n        .forEach(storage => {\n          storage.history.delete(tempId);\n        });\n\n        this.finalizePendingMessageCallbacks(storage, tempId, message);\n      } else {\n        this.pendingByMessageId[mid] = randomId;\n      }\n    }\n  };\n\n  private onUpdateNewMessage = (update: Update.updateNewDiscussionMessage | Update.updateNewMessage | Update.updateNewChannelMessage) => {\n    const message = update.message as MyMessage;\n    const peerId = this.getMessagePeer(message);\n    const storage = this.getMessagesStorage(peerId);\n    const dialog = this.getDialogOnly(peerId);\n\n    // * local update\n    const isLocalThreadUpdate = update._ === 'updateNewDiscussionMessage';\n\n    // * temporary save the message for info (peerId, reply mids...)\n    this.saveMessages([message], {storage: new Map()});\n\n    const threadKey = this.getThreadKey(message);\n    const threadId = threadKey ? +threadKey.split('_')[1] : undefined;\n    if(threadId && !isLocalThreadUpdate && this.threadsStorage[peerId] && this.threadsStorage[peerId][threadId]) {\n      const update = {\n        _: 'updateNewDiscussionMessage',\n        message\n      } as Update.updateNewDiscussionMessage;\n\n      this.onUpdateNewMessage(update);\n    }\n\n    if(!dialog && !isLocalThreadUpdate) {\n      let good = true;\n      if(peerId.isAnyChat()) {\n        good = appChatsManager.isInChat(peerId.toChatId());\n      }\n\n      if(good) {\n        const set = this.newUpdatesAfterReloadToHandle[peerId] ?? (this.newUpdatesAfterReloadToHandle[peerId] = new Set());\n        if(set.has(update)) {\n          this.log.error('here we go again', peerId);\n          return;\n        }\n\n        (update as any).ignoreExisting = true;\n        set.add(update);\n        this.scheduleHandleNewDialogs(peerId);\n      }\n\n      return;\n    }\n\n    /* if(update._ === 'updateNewChannelMessage') {\n      const chat = appChatsManager.getChat(peerId.toChatId());\n      if(chat.pFlags && (chat.pFlags.left || chat.pFlags.kicked)) {\n        return;\n      }\n    } */\n\n    this.saveMessages([message], {storage});\n    // this.log.warn(dT(), 'message unread', message.mid, message.pFlags.unread)\n\n    /* if((message as Message.message).grouped_id) {\n      this.log('updateNewMessage', message);\n    } */\n\n    const pendingMessage = this.checkPendingMessage(message);\n    const historyStorage = this.getHistoryStorage(peerId, isLocalThreadUpdate ? threadId : undefined);\n\n    if(!isLocalThreadUpdate) {\n      this.updateMessageRepliesIfNeeded(message);\n    }\n\n    // * so message can exist if reloadConversation came back earlier with mid\n    const ignoreExisting: boolean = (update as any).ignoreExisting;\n    const isExisting = !!historyStorage.history.findSlice(message.mid);\n    if(isExisting) {\n      if(!ignoreExisting) {\n        return false;\n      }\n    } else {\n      // * catch situation with disconnect. if message's id is lower than we already have (in bottom end slice), will sort it\n      const firstSlice = historyStorage.history.first;\n      if(firstSlice.isEnd(SliceEnd.Bottom)) {\n        let i = 0;\n        for(const length = firstSlice.length; i < length; ++i) {\n          if(message.mid > firstSlice[i]) {\n            break;\n          }\n        }\n\n        firstSlice.splice(i, 0, message.mid);\n      } else {\n        historyStorage.history.unshift(message.mid);\n      }\n\n      if(historyStorage.count !== null) {\n        historyStorage.count++;\n      }\n    }\n\n    if(this.mergeReplyKeyboard(historyStorage, message)) {\n      rootScope.dispatchEvent('history_reply_markup', {peerId});\n    }\n\n    const fromId = message.fromId;\n    if(fromId.isUser() && !message.pFlags.out && message.from_id) {\n      appUsersManager.forceUserOnline(fromId, message.date);\n\n      const action: SendMessageAction = {\n        _: 'sendMessageCancelAction'\n      };\n\n      let update: Update.updateUserTyping | Update.updateChatUserTyping | Update.updateChannelUserTyping;\n      if(peerId.isUser()) {\n        update = {\n          _: 'updateUserTyping',\n          action,\n          user_id: fromId\n        };\n      } else if(appPeersManager.isChannel(peerId)) {\n        update = {\n          _: 'updateChannelUserTyping',\n          action,\n          channel_id: peerId.toChatId(),\n          from_id: appPeersManager.getOutputPeer(fromId),\n          top_msg_id: threadId ? appMessagesIdsManager.getServerMessageId(threadId) : undefined\n        };\n      } else {\n        update = {\n          _: 'updateChatUserTyping',\n          action,\n          chat_id: peerId.toChatId(),\n          from_id: appPeersManager.getOutputPeer(fromId)\n        };\n      }\n\n      apiUpdatesManager.processLocalUpdate(update);\n    }\n\n    if(!pendingMessage) {\n      this.handleNewMessage(peerId, message.mid);\n    }\n\n    if(isLocalThreadUpdate) {\n      return;\n    }\n    \n    const inboxUnread = !message.pFlags.out && message.pFlags.unread;\n    if(dialog) {\n      if(inboxUnread && message.mid > dialog.top_message) {\n        const releaseUnreadCount = this.dialogsStorage.prepareDialogUnreadCountModifying(dialog);\n\n        ++dialog.unread_count;\n        if(message.pFlags.mentioned) {\n          ++dialog.unread_mentions_count;\n          this.modifyCachedMentions(peerId, message.mid, true);\n        }\n\n        releaseUnreadCount();\n      }\n\n      if(message.mid >= dialog.top_message) {\n        this.setDialogTopMessage(message, dialog);\n      }\n    }\n\n    if(inboxUnread/*  && ($rootScope.selectedPeerID != peerID || $rootScope.idle.isIDLE) */) {\n      const notifyPeer = peerId;\n      let notifyPeerToHandle = this.notificationsToHandle[notifyPeer];\n      if(notifyPeerToHandle === undefined) {\n        notifyPeerToHandle = this.notificationsToHandle[notifyPeer] = {\n          fwdCount: 0,\n          fromId: NULL_PEER_ID\n        };\n      }\n\n      if(notifyPeerToHandle.fromId !== fromId) {\n        notifyPeerToHandle.fromId = fromId;\n        notifyPeerToHandle.fwdCount = 0;\n      }\n\n      if((message as Message.message).fwd_from) {\n        ++notifyPeerToHandle.fwdCount;\n      }\n\n      notifyPeerToHandle.topMessage = message;\n\n      if(!this.notificationsHandlePromise) {\n        this.notificationsHandlePromise = window.setTimeout(this.handleNotifications, 0);\n      }\n    }\n  };\n\n  private onUpdateMessageReactions = (update: Update.updateMessageReactions) => {\n    const {peer, msg_id, reactions} = update;\n    const mid = appMessagesIdsManager.generateMessageId(msg_id);\n    const peerId = appPeersManager.getPeerId(peer);\n    const message: MyMessage = this.getMessageByPeer(peerId, mid);\n\n    if(message._ !== 'message') {\n      return;\n    }\n\n    const recentReactions = reactions?.recent_reactions;\n    if(recentReactions?.length) {\n      const recentReaction = recentReactions[recentReactions.length - 1];\n      const previousReactions = message.reactions;\n      const previousRecentReactions = previousReactions?.recent_reactions;\n      if(\n        appPeersManager.getPeerId(recentReaction.peer_id) !== rootScope.myId && (\n          !previousRecentReactions ||\n          previousRecentReactions.length <= recentReactions.length\n        ) && (\n          !previousRecentReactions || \n          !deepEqual(recentReaction, previousRecentReactions[previousRecentReactions.length - 1])\n        )\n      ) {\n        this.getNotifyPeerSettings(peerId).then(({muted, peerTypeNotifySettings}) => {\n          if(muted || !peerTypeNotifySettings.show_previews) return;\n          this.notifyAboutMessage(message, {\n            userReaction: recentReaction,\n            peerTypeNotifySettings\n          });\n        });\n      }\n    }\n\n    const results = reactions?.results ?? [];\n    const previousResults = message.reactions?.results ?? [];\n    const changedResults = results.filter(reactionCount => {\n      const previousReactionCount = previousResults.find(_reactionCount => _reactionCount.reaction === reactionCount.reaction);\n      return (\n        message.pFlags.out && (\n          !previousReactionCount || \n          reactionCount.count > previousReactionCount.count\n        )\n      ) || (\n        reactionCount.pFlags.chosen && (\n          !previousReactionCount || \n          !previousReactionCount.pFlags.chosen\n        )\n      );\n    });\n\n    message.reactions = reactions;\n\n    rootScope.dispatchEvent('message_reactions', {message, changedResults});\n\n    if(!update.local) {\n      this.setDialogToStateIfMessageIsTop(message);\n    }\n  };\n\n  private onUpdateDialogUnreadMark = (update: Update.updateDialogUnreadMark) => {\n    //this.log('updateDialogUnreadMark', update);\n    const peerId = appPeersManager.getPeerId((update.peer as DialogPeer.dialogPeer).peer);\n    const dialog = this.getDialogOnly(peerId);\n\n    if(!dialog) {\n      this.scheduleHandleNewDialogs(peerId);\n    } else {\n      const releaseUnreadCount = this.dialogsStorage.prepareDialogUnreadCountModifying(dialog);\n\n      if(!update.pFlags.unread) {\n        delete dialog.pFlags.unread_mark;\n      } else {\n        dialog.pFlags.unread_mark = true;\n      }\n\n      releaseUnreadCount();\n      rootScope.dispatchEvent('dialogs_multiupdate', {[peerId]: dialog});\n      this.dialogsStorage.setDialogToState(dialog);\n    }\n  };\n\n  private onUpdateEditMessage = (update: Update.updateEditMessage | Update.updateEditChannelMessage) => {\n    const message = update.message as MyMessage;\n    const peerId = this.getMessagePeer(message);\n    const mid = appMessagesIdsManager.generateMessageId(message.id);\n    const storage = this.getMessagesStorage(peerId);\n    if(!storage.has(mid)) {\n      // this.fixDialogUnreadMentionsIfNoMessage(peerId);\n      return;\n    }\n\n    // console.trace(dT(), 'edit message', message)\n    \n    const oldMessage: Message = this.getMessageFromStorage(storage, mid);\n    this.saveMessages([message], {storage});\n    const newMessage: Message = this.getMessageFromStorage(storage, mid);\n\n    this.handleEditedMessage(oldMessage, newMessage);\n\n    const dialog = this.getDialogOnly(peerId);\n\n    // if sender erased mention\n    /* if(dialog.unread_mentions_count && (oldMessage as Message.message)?.pFlags?.mentioned && !message.pFlags.mentioned) {\n      --dialog.unread_mentions_count;\n      this.modifyCachedMentions(peerId, mid, false);\n    } */\n\n    const isTopMessage = dialog && dialog.top_message === mid;\n    if((message as Message.messageService).clear_history) {\n      if(isTopMessage) {\n        rootScope.dispatchEvent('dialog_flush', {peerId});\n      }\n    } else {\n      // no sense in dispatching message_edit since only reactions have changed\n      if(oldMessage?._ === 'message' && !deepEqual(oldMessage.reactions, (newMessage as Message.message).reactions)) {\n        const newReactions = (newMessage as Message.message).reactions;\n        (newMessage as Message.message).reactions = oldMessage.reactions;\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateMessageReactions',\n          peer: appPeersManager.getOutputPeer(peerId),\n          msg_id: message.id,\n          reactions: newReactions\n        });\n\n        return;\n      }\n\n      rootScope.dispatchEvent('message_edit', {\n        storage,\n        peerId,\n        mid\n      });\n\n      if(isTopMessage || (message as Message.message).grouped_id) {\n        const updatedDialogs: {[peerId: PeerId]: Dialog} = {};\n        updatedDialogs[peerId] = dialog;\n        rootScope.dispatchEvent('dialogs_multiupdate', updatedDialogs);\n        this.dialogsStorage.setDialogToState(dialog);\n      }\n    }\n  };\n\n  private onUpdateReadHistory = (update: Update.updateReadChannelDiscussionInbox | Update.updateReadChannelDiscussionOutbox \n    | Update.updateReadHistoryInbox | Update.updateReadHistoryOutbox \n    | Update.updateReadChannelInbox | Update.updateReadChannelOutbox) => {\n    const channelId = (update as Update.updateReadChannelInbox).channel_id;\n    const maxId = appMessagesIdsManager.generateMessageId((update as Update.updateReadChannelInbox).max_id || (update as Update.updateReadChannelDiscussionInbox).read_max_id);\n    const threadId = appMessagesIdsManager.generateMessageId((update as Update.updateReadChannelDiscussionInbox).top_msg_id);\n    const peerId = channelId ? channelId.toPeerId(true) : appPeersManager.getPeerId((update as Update.updateReadHistoryInbox).peer);\n\n    const isOut = update._ === 'updateReadHistoryOutbox' || update._ === 'updateReadChannelOutbox' || update._ === 'updateReadChannelDiscussionOutbox' ? true : undefined;\n\n    const storage = this.getMessagesStorage(peerId);\n    const history = getObjectKeysAndSort(storage, 'desc');\n    const foundDialog = this.getDialogOnly(peerId);\n    const stillUnreadCount = (update as Update.updateReadChannelInbox).still_unread_count;\n    let newUnreadCount = 0;\n    let newUnreadMentionsCount = 0;\n    let foundAffected = false;\n\n    //this.log.warn(dT(), 'read', peerId, isOut ? 'out' : 'in', maxId)\n\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\n\n    if(peerId.isUser() && isOut) {\n      appUsersManager.forceUserOnline(peerId);\n    }\n\n    if(threadId) {\n      const repliesKey = this.threadsToReplies[peerId + '_' + threadId];\n      if(repliesKey) {\n        const [peerId, mid] = repliesKey.split('_');\n        this.updateMessage(peerId.toPeerId(), +mid, 'replies_updated');\n      }\n    }\n\n    const releaseUnreadCount = !threadId && foundDialog && this.dialogsStorage.prepareDialogUnreadCountModifying(foundDialog);\n\n    for(let i = 0, length = history.length; i < length; i++) {\n      const mid = history[i];\n      if(mid > maxId) {\n        continue;\n      }\n      \n      const message: MyMessage = storage.get(mid);\n\n      if(message.pFlags.out !== isOut) {\n        continue;\n      }\n\n      if(!message.pFlags.unread) {\n        break;\n      }\n\n      if(threadId) {\n        const replyTo = message.reply_to;\n        if(!replyTo || (replyTo.reply_to_top_id || replyTo.reply_to_msg_id) !== threadId) {\n          continue;\n        }\n      }\n      \n      // this.log.warn('read', messageId, message.pFlags.unread, message)\n      if(message.pFlags.unread) {\n        delete message.pFlags.unread;\n        if(!foundAffected) {\n          foundAffected = true;\n        }\n\n        if(!message.pFlags.out && !threadId && foundDialog) {\n          if(stillUnreadCount === undefined) {\n            newUnreadCount = --foundDialog.unread_count;\n          }\n\n          if(message.pFlags.mentioned) {\n            newUnreadMentionsCount = --foundDialog.unread_mentions_count;\n            this.modifyCachedMentions(peerId, message.mid, false);\n          }\n        }\n        \n        appNotificationsManager.cancel('msg' + mid);\n      }\n    }\n\n    if(isOut) historyStorage.readOutboxMaxId = maxId;\n    else historyStorage.readMaxId = maxId;\n\n    if(!threadId && foundDialog) {\n      if(isOut) foundDialog.read_outbox_max_id = maxId;\n      else foundDialog.read_inbox_max_id = maxId;\n\n      if(!isOut) {\n        let setCount: number;\n        if(stillUnreadCount !== undefined) {\n          setCount = stillUnreadCount;\n        } else if(newUnreadCount < 0 || !this.getReadMaxIdIfUnread(peerId)) {\n          setCount = 0;\n        } else if(newUnreadCount && foundDialog.top_message > maxId) {\n          setCount = newUnreadCount;\n        }\n\n        if(setCount !== undefined) {\n          foundDialog.unread_count = setCount;\n        }\n\n        if(newUnreadMentionsCount < 0 || !foundDialog.unread_count) {\n          foundDialog.unread_mentions_count = 0;\n        }\n      }\n\n      if(releaseUnreadCount) {\n        releaseUnreadCount();\n      }\n\n      this.dialogsStorage.processDialogForFilters(foundDialog);\n      \n      rootScope.dispatchEvent('dialog_unread', {peerId});\n      this.dialogsStorage.setDialogToState(foundDialog);\n    }\n\n    if(foundAffected) {\n      rootScope.dispatchEvent('messages_read');\n    }\n\n    if(!threadId && channelId) {\n      const threadKeyPart = peerId + '_';\n      for(const threadKey in this.threadsToReplies) {\n        if(threadKey.indexOf(threadKeyPart) === 0) {\n          const [peerId, mid] = this.threadsToReplies[threadKey].split('_');\n          rootScope.dispatchEvent('replies_updated', this.getMessageByPeer(peerId.toPeerId(), +mid));\n        }\n      }\n    }\n  };\n\n  private onUpdateReadMessagesContents = (update: Update.updateChannelReadMessagesContents | Update.updateReadMessagesContents) => {\n    const channelId = (update as Update.updateChannelReadMessagesContents).channel_id;\n    const mids = (update as Update.updateReadMessagesContents).messages.map(id => appMessagesIdsManager.generateMessageId(id));\n    const peerId = channelId ? channelId.toPeerId(true) : this.getMessageById(mids[0]).peerId;\n    for(let i = 0, length = mids.length; i < length; ++i) {\n      const mid = mids[i];\n      const message: MyMessage = this.getMessageByPeer(peerId, mid);\n      if(!message.deleted) {\n        if(message.pFlags.media_unread) {\n          delete message.pFlags.media_unread;\n          this.setDialogToStateIfMessageIsTop(message);\n  \n          if(!message.pFlags.out && message.pFlags.mentioned) {\n            this.modifyCachedMentions(peerId, mid, false);\n          }\n        }\n      } else {\n        this.fixDialogUnreadMentionsIfNoMessage(peerId);\n      }\n    }\n\n    rootScope.dispatchEvent('messages_media_read', {peerId, mids});\n  };\n\n  private onUpdateChannelAvailableMessages = (update: Update.updateChannelAvailableMessages) => {\n    const peerId = update.channel_id.toPeerId(true);\n    const history = this.getHistoryStorage(peerId).history.slice;\n    const availableMinId = appMessagesIdsManager.generateMessageId(update.available_min_id);\n    const messages = history.filter(mid => mid <= availableMinId);\n\n    (update as any as Update.updateDeleteChannelMessages).messages = messages;\n    this.onUpdateDeleteMessages(update as any as Update.updateDeleteChannelMessages);\n  };\n\n  private onUpdateDeleteMessages = (update: Update.updateDeleteMessages | Update.updateDeleteChannelMessages) => {\n    const channelId = (update as Update.updateDeleteChannelMessages).channel_id;\n    //const messages = (update as any as Update.updateDeleteChannelMessages).messages;\n    const messages = (update as any as Update.updateDeleteChannelMessages).messages.map(id => appMessagesIdsManager.generateMessageId(id));\n    const peerId: PeerId = channelId ? channelId.toPeerId(true) : this.getMessageById(messages[0]).peerId;\n    \n    if(!peerId) {\n      return;\n    }\n\n    apiManager.clearCache('messages.getSearchCounters', (params) => {\n      return appPeersManager.getPeerId(params.peer) === peerId;\n    });\n\n    const threadKeys: Set<string> = new Set();\n    for(const mid of messages) {\n      const message = this.getMessageByPeer(peerId, mid);\n      const threadKey = this.getThreadKey(message);\n      if(threadKey && this.threadsStorage[peerId] && this.threadsStorage[peerId][+threadKey.split('_')[1]]) {\n        threadKeys.add(threadKey);\n      }\n    }\n    \n    const historyUpdated = this.handleDeletedMessages(peerId, this.getMessagesStorage(peerId), messages);\n\n    const threadsStorages = Array.from(threadKeys).map(threadKey => {\n      const [peerId, mid] = threadKey.split('_');\n      return this.getHistoryStorage(peerId.toPeerId(), +mid);\n    });\n\n    const historyStorage = this.getHistoryStorage(peerId);\n    [historyStorage].concat(threadsStorages).forEach(historyStorage => {\n      for(const mid of historyUpdated.msgs) {\n        historyStorage.history.delete(mid);\n      }\n      \n      if(historyUpdated.count && historyStorage.count) {\n        historyStorage.count = Math.max(0, historyStorage.count - historyUpdated.count);\n      }\n    });\n\n    rootScope.dispatchEvent('history_delete', {peerId, msgs: historyUpdated.msgs});\n\n    const foundDialog = this.getDialogOnly(peerId);\n    if(foundDialog) {\n      const affected = historyUpdated.unreadMentions || historyUpdated.unread;\n      const releaseUnreadCount = affected && this.dialogsStorage.prepareDialogUnreadCountModifying(foundDialog);\n      \n      if(historyUpdated.unread) {\n        foundDialog.unread_count = Math.max(0, foundDialog.unread_count - historyUpdated.unread);\n      }\n\n      if(historyUpdated.unreadMentions) {\n        foundDialog.unread_mentions_count = !foundDialog.unread_count ? 0 : Math.max(0, foundDialog.unread_mentions_count - historyUpdated.unreadMentions);\n      }\n\n      if(affected) {\n        releaseUnreadCount();\n        rootScope.dispatchEvent('dialog_unread', {peerId});\n      }\n\n      if(historyUpdated.msgs.has(foundDialog.top_message)) {\n        const slice = historyStorage.history.first;\n        if(slice.isEnd(SliceEnd.Bottom) && slice.length) {\n          const mid = slice[0];\n          const message = this.getMessageByPeer(peerId, mid);\n          this.setDialogTopMessage(message, foundDialog);\n        } else {\n          this.reloadConversation(peerId);\n        }\n      }\n    }\n  };\n\n  private onUpdateChannel = (update: Update.updateChannel) => {\n    const channelId = update.channel_id;\n    const peerId = channelId.toPeerId(true);\n    const channel: Chat.channel = appChatsManager.getChat(channelId);\n\n    const needDialog = appChatsManager.isInChat(channelId);\n    \n    const canViewHistory = !!channel.username || !channel.pFlags.left;\n    const hasHistory = this.historiesStorage[peerId] !== undefined;\n    \n    if(canViewHistory !== hasHistory) {\n      delete this.historiesStorage[peerId];\n      rootScope.dispatchEvent('history_forbidden', peerId);\n    }\n    \n    const dialog = this.getDialogOnly(peerId);\n    if(!!dialog !== needDialog) {\n      if(needDialog) {\n        this.reloadConversation(peerId);\n      } else {\n        this.dialogsStorage.dropDialogOnDeletion(peerId);\n      }\n    }\n  };\n\n  private onUpdateChannelReload = (update: Update.updateChannelReload) => {\n    const peerId = update.channel_id.toPeerId(true);\n\n    this.dialogsStorage.dropDialog(peerId);\n\n    delete this.historiesStorage[peerId];\n    this.reloadConversation(peerId).then(() => {\n      rootScope.dispatchEvent('history_reload', peerId);\n    });\n  };\n  \n  private onUpdateChannelMessageViews = (update: Update.updateChannelMessageViews) => {\n    const views = update.views;\n    const peerId = update.channel_id.toPeerId(true);\n    const mid = appMessagesIdsManager.generateMessageId(update.id);\n    const message: Message.message = this.getMessageByPeer(peerId, mid);\n    if(!message.deleted && message.views !== undefined && message.views < views) {\n      message.views = views;\n      rootScope.dispatchEvent('message_views', {peerId, mid, views});\n      this.setDialogToStateIfMessageIsTop(message);\n    }\n  };\n\n  private onUpdateServiceNotification = (update: Update.updateServiceNotification) => {\n    //this.log('updateServiceNotification', update);\n    const fromId = SERVICE_PEER_ID;\n    const peerId = fromId;\n    const messageId = this.generateTempMessageId(peerId);\n    const message: Message.message = {\n      _: 'message',\n      id: messageId,\n      from_id: appPeersManager.getOutputPeer(fromId),\n      peer_id: appPeersManager.getOutputPeer(peerId),\n      pFlags: {unread: true},\n      date: (update.inbox_date || tsNow(true)) + serverTimeManager.serverTimeOffset,\n      message: update.message,\n      media: update.media,\n      entities: update.entities\n    };\n    if(!appUsersManager.hasUser(fromId)) {\n      appUsersManager.saveApiUsers([{\n        _: 'user',\n        id: fromId,\n        pFlags: {verified: true},\n        access_hash: '0',\n        first_name: 'Telegram',\n        phone: '42777'\n      }]);\n    }\n    this.saveMessages([message], {isOutgoing: true});\n\n    if(update.inbox_date) {\n      this.pendingTopMsgs[peerId] = messageId;\n      this.onUpdateNewMessage({\n        _: 'updateNewMessage',\n        message,\n        pts: undefined,\n        pts_count: undefined\n      });\n    }\n  };\n\n  private onUpdatePinnedMessages = (update: Update.updatePinnedMessages | Update.updatePinnedChannelMessages) => {\n    const channelId = update._ === 'updatePinnedChannelMessages' ? update.channel_id : undefined;\n    const peerId = channelId ? channelId.toPeerId(true) : appPeersManager.getPeerId((update as Update.updatePinnedMessages).peer);\n\n    /* const storage = this.getSearchStorage(peerId, 'inputMessagesFilterPinned');\n    if(storage.count !== storage.history.length) {\n      if(storage.count !== undefined) {\n        delete this.searchesStorage[peerId]['inputMessagesFilterPinned'];  \n      }\n\n      rootScope.broadcast('peer_pinned_messages', peerId);\n      break;\n    } */\n\n    const messages = update.messages.map(id => appMessagesIdsManager.generateMessageId(id)); \n\n    const storage = this.getMessagesStorage(peerId);\n    const missingMessages = messages.filter(mid => !storage.has(mid));\n    const getMissingPromise = missingMessages.length ? Promise.all(missingMessages.map(mid => this.wrapSingleMessage(peerId, mid))) : Promise.resolve();\n    getMissingPromise.finally(() => {\n      const werePinned = update.pFlags?.pinned;\n      if(werePinned) {\n        for(const mid of messages) {\n          //storage.history.push(mid);\n          const message = storage.get(mid);\n          message.pFlags.pinned = true;\n        }\n\n        /* if(this.pinnedMessages[peerId]?.maxId) {\n          const maxMid = Math.max(...messages);\n          this.pinnedMessages\n        } */\n\n        //storage.history.sort((a, b) => b - a);\n      } else {\n        for(const mid of messages) {\n          //storage.history.findAndSplice(_mid => _mid === mid);\n          const message = storage.get(mid);\n          delete message.pFlags.pinned;\n        }\n      }\n\n      /* const info = this.pinnedMessages[peerId];\n      if(info) {\n        info.count += messages.length * (werePinned ? 1 : -1);\n      } */\n  \n      delete this.pinnedMessages[peerId];\n      appStateManager.getState().then(state => {\n        delete state.hiddenPinnedMessages[peerId];\n        rootScope.dispatchEvent('peer_pinned_messages', {peerId, mids: messages, pinned: werePinned});\n      });\n    });\n  };\n\n  private onUpdateNotifySettings = (update: Update.updateNotifySettings) => {\n    const {peer, notify_settings} = update;\n    if(peer._ === 'notifyPeer') {\n      const peerId = appPeersManager.getPeerId((peer as NotifyPeer.notifyPeer).peer);\n    \n      const dialog = this.getDialogOnly(peerId);\n      if(dialog) {\n        dialog.notify_settings = notify_settings;\n        rootScope.dispatchEvent('dialog_notify_settings', dialog);\n        this.dialogsStorage.setDialogToState(dialog);\n      }\n    }\n  };\n\n  private onUpdateNewScheduledMessage = (update: Update.updateNewScheduledMessage) => {\n    const message = update.message as MyMessage;\n    const peerId = this.getMessagePeer(message);\n\n    const storage = this.scheduledMessagesStorage[peerId];\n    if(storage) {\n      const mid = appMessagesIdsManager.generateMessageId(message.id);\n\n      const oldMessage = this.getMessageFromStorage(storage, mid);\n      this.saveMessages([message], {storage, isScheduled: true});\n      const newMessage = this.getMessageFromStorage(storage, mid);\n\n      if(!oldMessage.deleted) {\n        this.handleEditedMessage(oldMessage, newMessage);\n        rootScope.dispatchEvent('message_edit', {storage, peerId, mid: message.mid});\n      } else {\n        const pendingMessage = this.checkPendingMessage(message);\n        if(!pendingMessage) {\n          rootScope.dispatchEvent('scheduled_new', {peerId, mid: message.mid});\n        }\n      }\n    }\n  };\n\n  private onUpdateDeleteScheduledMessages = (update: Update.updateDeleteScheduledMessages) => {\n    const peerId = appPeersManager.getPeerId(update.peer);\n\n    const storage = this.scheduledMessagesStorage[peerId];\n    if(storage) {\n      const mids = update.messages.map(id => appMessagesIdsManager.generateMessageId(id));\n      this.handleDeletedMessages(peerId, storage, mids);\n\n      rootScope.dispatchEvent('scheduled_delete', {peerId, mids});\n    }\n  };\n\n  public setDialogToStateIfMessageIsTop(message: MyMessage) {\n    if(this.isMessageIsTopMessage(message)) {\n      this.dialogsStorage.setDialogToState(this.getDialogOnly(message.peerId));\n    }\n  }\n\n  public isMessageIsTopMessage(message: MyMessage) {\n    const dialog = this.getDialogOnly(message.peerId);\n    return dialog && dialog.top_message === message.mid;\n  }\n\n  private updateMessageRepliesIfNeeded(threadMessage: MyMessage) {\n    try { // * на всякий случай, скорее всего это не понадобится\n      const threadKey = this.getThreadKey(threadMessage);\n      if(threadKey) {\n        const repliesKey = this.threadsToReplies[threadKey];\n        if(repliesKey) {\n          const [peerId, mid] = repliesKey.split('_');\n\n          this.updateMessage(peerId.toPeerId(), +mid, 'replies_updated');\n        }\n      }\n    } catch(err) {\n      this.log.error('incrementMessageReplies err', err, threadMessage);\n    }\n  }\n\n  private getThreadKey(threadMessage: MyMessage) {\n    let threadKey = '';\n    if(threadMessage.peerId?.isAnyChat() && threadMessage.reply_to) {\n      const threadId = threadMessage.reply_to.reply_to_top_id || threadMessage.reply_to.reply_to_msg_id;\n      threadKey = threadMessage.peerId + '_' + threadId;\n    }\n\n    return threadKey;\n  }\n\n  public updateMessage(peerId: PeerId, mid: number, broadcastEventName?: 'replies_updated'): Promise<Message.message> {\n    const promise: Promise<Message.message> = this.wrapSingleMessage(peerId, mid, true).then(() => {\n      const message = this.getMessageByPeer(peerId, mid);\n\n      if(broadcastEventName) {\n        rootScope.dispatchEvent(broadcastEventName, message);\n      }\n\n      return message;\n    });\n    \n    return promise;\n  }\n\n  private checkPendingMessage(message: MyMessage) {\n    const randomId = this.pendingByMessageId[message.mid];\n    let pendingMessage: ReturnType<AppMessagesManager['finalizePendingMessage']>;\n    if(randomId) {\n      const pendingData = this.pendingByRandomId[randomId];\n      if(pendingMessage = this.finalizePendingMessage(randomId, message)) {\n        rootScope.dispatchEvent('history_update', {storage: pendingData.storage, peerId: message.peerId, mid: message.mid});\n      }\n\n      delete this.pendingByMessageId[message.mid];\n    }\n\n    return pendingMessage;\n  }\n\n  public mutePeer(peerId: PeerId, muteUntil: number) {\n    const settings: InputPeerNotifySettings = {\n      _: 'inputPeerNotifySettings'\n    };\n\n    settings.mute_until = muteUntil;\n\n    return appNotificationsManager.updateNotifySettings({\n      _: 'inputNotifyPeer',\n      peer: appPeersManager.getInputPeerById(peerId)\n    }, settings);\n  }\n\n  public togglePeerMute(peerId: PeerId, mute?: boolean) {\n    if(mute === undefined) {\n      mute = !appNotificationsManager.isPeerLocalMuted(peerId, false);\n    }\n\n    return this.mutePeer(peerId, mute ? MUTE_UNTIL : 0);\n  }\n\n  public canSendToPeer(peerId: PeerId, threadId?: number, action: ChatRights = 'send_messages') {\n    if(appPeersManager.isRestricted(peerId)) {\n      return false;\n    }\n    \n    if(peerId.isAnyChat()) {\n      //const isChannel = appPeersManager.isChannel(peerId);\n      const chat: Chat.chat = appChatsManager.getChat(peerId.toChatId());\n      const hasRights = /* isChannel &&  */appChatsManager.hasRights(peerId.toChatId(), action, undefined, !!threadId); \n      return /* !isChannel ||  */hasRights && (!chat.pFlags.left || !!threadId);\n    } else {\n      return appUsersManager.canSendToUser(peerId);\n    }\n  }\n\n  public finalizePendingMessage(randomId: Long, finalMessage: MyMessage) {\n    const pendingData = this.pendingByRandomId[randomId];\n    // this.log('pdata', randomID, pendingData)\n\n    if(pendingData) {\n      const {peerId, tempId, threadId, storage} = pendingData;\n\n      [this.getHistoryStorage(peerId), threadId ? this.getHistoryStorage(peerId, threadId) : undefined]\n      .filter(Boolean)\n      .forEach(storage => {\n        storage.history.delete(tempId);\n      });\n\n      // this.log('pending', randomID, historyStorage.pending)\n\n      const tempMessage: MyMessage = this.getMessageFromStorage(storage, tempId);\n      if(!tempMessage.deleted) {\n        delete finalMessage.pFlags.is_outgoing;\n        delete finalMessage.pending;\n        delete finalMessage.error;\n        delete finalMessage.random_id;\n        delete finalMessage.send;\n      }\n\n      rootScope.dispatchEvent('messages_pending');\n      \n      delete this.pendingByRandomId[randomId];\n\n      this.finalizePendingMessageCallbacks(storage, tempId, finalMessage);\n\n      return tempMessage;\n    }\n  }\n\n  public finalizePendingMessageCallbacks(storage: MessagesStorage, tempId: number, message: MyMessage) {\n    const callbacks = this.tempFinalizeCallbacks[tempId];\n    //this.log.warn(callbacks, tempId);\n    if(callbacks !== undefined) {\n      for(const name in callbacks) {\n        const {deferred, callback} = callbacks[name];\n        //this.log(`finalizePendingMessageCallbacks: will invoke ${name} callback`);\n        callback(message).then(deferred.resolve, deferred.reject);\n      }\n\n      delete this.tempFinalizeCallbacks[tempId];\n    }\n\n    // set cached url to media\n    if((message as Message.message).media) {\n      assumeType<Message.message>(message);\n      const {photo: newPhoto, document: newDoc} = message.media as any;\n      if(newPhoto) {\n        const photo = appPhotosManager.getPhoto('' + tempId);\n        if(/* photo._ !== 'photoEmpty' */photo) {\n          const newPhotoSize = newPhoto.sizes[newPhoto.sizes.length - 1];\n          const cacheContext = appDownloadManager.getCacheContext(newPhoto, newPhotoSize.type);\n          const oldCacheContext = appDownloadManager.getCacheContext(photo, 'full');\n          Object.assign(cacheContext, oldCacheContext);\n\n          const photoSize = newPhoto.sizes[newPhoto.sizes.length - 1] as PhotoSize.photoSize;\n\n          const downloadOptions = appPhotosManager.getPhotoDownloadOptions(newPhoto, photoSize);\n          const fileName = getFileNameByLocation(downloadOptions.location);\n          appDownloadManager.fakeDownload(fileName, oldCacheContext.url);\n        }\n      } else if(newDoc) {\n        const doc = appDocsManager.getDoc('' + tempId);\n        if(doc) {\n          if(/* doc._ !== 'documentEmpty' &&  */doc.type && doc.type !== 'sticker' && doc.mime_type !== 'image/gif') {\n            const cacheContext = appDownloadManager.getCacheContext(newDoc);\n            const oldCacheContext = appDownloadManager.getCacheContext(doc);\n            Object.assign(cacheContext, oldCacheContext);\n\n            const fileName = appDocsManager.getInputFileName(newDoc);\n            appDownloadManager.fakeDownload(fileName, oldCacheContext.url);\n          }\n        }\n      } else if((message.media as MessageMedia.messageMediaPoll).poll) {\n        delete appPollsManager.polls[tempId];\n        delete appPollsManager.results[tempId];\n      }\n    }\n\n    const tempMessage = this.getMessageFromStorage(storage, tempId);\n    storage.delete(tempId);\n    \n    this.handleReleasingMessage(tempMessage, storage);\n\n    rootScope.dispatchEvent('message_sent', {storage, tempId, tempMessage, mid: message.mid, message});\n  }\n\n  public incrementMaxSeenId(maxId: number) {\n    if(!maxId || !(!this.maxSeenId || maxId > this.maxSeenId)) {\n      return false;\n    }\n\n    this.maxSeenId = maxId;\n    appStateManager.pushToState('maxSeenMsgId', maxId);\n\n    apiManager.invokeApi('messages.receivedMessages', {\n      max_id: appMessagesIdsManager.getServerMessageId(maxId)\n    });\n  }\n\n  public getMessageReactionsListAndReadParticipants(\n    message: Message.message, \n    limit?: number, \n    reaction?: string, \n    offset?: string,\n    skipReadParticipants?: boolean,\n    skipReactionsList?: boolean\n  ) {\n    const emptyMessageReactionsList = {\n      reactions: [] as MessagePeerReaction[],\n      count: 0,\n      next_offset: undefined as string\n    };\n\n    const canViewMessageReadParticipants = this.canViewMessageReadParticipants(message);\n    if(canViewMessageReadParticipants && limit === undefined) {\n      limit = 100;\n    } else if(limit === undefined) {\n      limit = 50;\n    }\n\n    return Promise.all([\n      canViewMessageReadParticipants && !reaction && !skipReadParticipants ? this.getMessageReadParticipants(message.peerId, message.mid).catch(() => [] as UserId[]) : [] as UserId[],\n\n      message.reactions?.recent_reactions?.length && !skipReactionsList ? appReactionsManager.getMessageReactionsList(message.peerId, message.mid, limit, reaction, offset).catch(err => emptyMessageReactionsList) : emptyMessageReactionsList\n    ]).then(([userIds, messageReactionsList]) => {\n      const readParticipantsPeerIds = userIds.map(userId => userId.toPeerId());\n      \n      const filteredReadParticipants = readParticipantsPeerIds.slice();\n      forEachReverse(filteredReadParticipants, (peerId, idx, arr) => {\n        if(messageReactionsList.reactions.some(reaction => appPeersManager.getPeerId(reaction.peer_id) === peerId)) {\n          arr.splice(idx, 1);\n        }\n      });\n\n      let combined: {peerId: PeerId, reaction?: string}[] = messageReactionsList.reactions.map(reaction => ({peerId: appPeersManager.getPeerId(reaction.peer_id), reaction: reaction.reaction}));\n      combined = combined.concat(filteredReadParticipants.map(readPeerId => ({peerId: readPeerId})));\n      \n      return {\n        reactions: messageReactionsList.reactions,\n        reactionsCount: messageReactionsList.count,\n        readParticipants: readParticipantsPeerIds,\n        combined: combined,\n        nextOffset: messageReactionsList.next_offset\n      };\n    });\n  }\n\n  public getMessageReadParticipants(peerId: PeerId, mid: number): Promise<UserId[]> {\n    return apiManager.invokeApiSingle('messages.getMessageReadParticipants', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      msg_id: appMessagesIdsManager.getServerMessageId(mid)\n    }).then(userIds => { // ! convert long to number\n      return userIds.map(userId => userId.toUserId());\n    });\n  }\n\n  public canViewMessageReadParticipants(message: Message) {\n    if(\n      message._ !== 'message' || \n      message.pFlags.is_outgoing || \n      !message.pFlags.out || \n      !appPeersManager.isAnyGroup(message.peerId)\n    ) {\n      return false;\n    }\n\n    const chat: Chat.chat | Chat.channel = appChatsManager.getChat(message.peerId.toChatId());\n    return chat.participants_count < rootScope.appConfig.chat_read_mark_size_threshold && \n      (tsNow(true) - message.date) < rootScope.appConfig.chat_read_mark_expire_period;\n  }\n\n  public incrementMessageViews(peerId: PeerId, mids: number[]) {\n    if(!mids.length) {\n      return;\n    }\n\n    return apiManager.invokeApiSingle('messages.getMessagesViews', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      id: mids.map(mid => appMessagesIdsManager.getServerMessageId(mid)),\n      increment: true\n    }).then(views => {\n      const updates: Update[] = new Array(mids.length);\n      const channelId = peerId.toChatId();\n      for(let i = 0, length = mids.length; i < length; ++i) {\n        updates[i] = {\n          _: 'updateChannelMessageViews',\n          channel_id: channelId,\n          id: mids[i],\n          views: views.views[i].views\n        };\n      }\n\n      apiUpdatesManager.processUpdateMessage({\n        _: 'updates',\n        updates,\n        chats: views.chats,\n        users: views.users\n      });\n    });\n  }\n\n  private notifyAboutMessage(message: MyMessage, options: Partial<{\n    fwdCount: number,\n    userReaction: MessagePeerReaction,\n    peerTypeNotifySettings: PeerNotifySettings\n  }> = {}) {\n    const peerId = this.getMessagePeer(message);\n\n    if(appPeersManager.isRestricted(peerId)) {\n      return;\n    }\n\n    const isAnyChat = peerId.isAnyChat();\n    const notification: NotifyOptions = {};\n    const peerString = appPeersManager.getPeerString(peerId);\n    let notificationMessage: string;\n\n    if(options.peerTypeNotifySettings.show_previews) {\n      if(message._ === 'message' && message.fwd_from && options.fwdCount) {\n        notificationMessage = I18n.format('Notifications.Forwarded', true, [options.fwdCount]);\n      } else {\n        notificationMessage = this.wrapMessageForReply(message, undefined, undefined, true);\n\n        if(options.userReaction) {\n          const langPackKey: LangPackKey = /* isAnyChat ? 'Notification.Group.Reacted' :  */'Notification.Contact.Reacted';\n          const args: FormatterArguments = [\n            options.userReaction.reaction, \n            notificationMessage\n          ];\n  \n          /* if(isAnyChat) {\n            args.unshift(appPeersManager.getPeerTitle(message.fromId, true));\n          } */\n  \n          notificationMessage = I18n.format(langPackKey, true, args);\n        }\n      }\n    } else {\n      notificationMessage = I18n.format('Notifications.New', true);\n    }\n\n    notification.title = appPeersManager.getPeerTitle(peerId, true);\n    if(isAnyChat && message.fromId !== message.peerId) {\n      notification.title = appPeersManager.getPeerTitle(message.fromId, true) +\n        ' @ ' +\n        notification.title;\n    }\n\n    notification.title = RichTextProcessor.wrapPlainText(notification.title);\n\n    notification.onclick = () => {\n      rootScope.dispatchEvent('history_focus', {peerId, mid: message.mid});\n    };\n\n    notification.message = notificationMessage;\n    notification.key = 'msg' + message.mid;\n    notification.tag = peerString;\n    notification.silent = true;//message.pFlags.silent || false;\n\n    const peerPhoto = appPeersManager.getPeerPhoto(peerId);\n    if(peerPhoto) {\n      appAvatarsManager.loadAvatar(peerId, peerPhoto, 'photo_small').loadPromise.then(url => {\n        if(message.pFlags.unread || options.userReaction) {\n          notification.image = url;\n          appNotificationsManager.notify(notification);\n        }\n      });\n    } else {\n      appNotificationsManager.notify(notification);\n    }\n  }\n\n  public getScheduledMessagesStorage(peerId: PeerId) {\n    return this.scheduledMessagesStorage[peerId] ?? (this.scheduledMessagesStorage[peerId] = this.createMessageStorage());\n  }\n\n  public getScheduledMessageByPeer(peerId: PeerId, mid: number) {\n    return this.getMessageFromStorage(this.getScheduledMessagesStorage(peerId), mid);\n  }\n\n  public getScheduledMessages(peerId: PeerId): Promise<number[]> {\n    if(!this.canSendToPeer(peerId)) return Promise.resolve([]);\n\n    const storage = this.getScheduledMessagesStorage(peerId);\n    if(storage.size) {\n      return Promise.resolve([...storage.keys()]);\n    }\n\n    return apiManager.invokeApiSingle('messages.getScheduledHistory', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      hash: ''\n    }).then(historyResult => {\n      if(historyResult._ !== 'messages.messagesNotModified') {\n        appUsersManager.saveApiUsers(historyResult.users);\n        appChatsManager.saveApiChats(historyResult.chats);\n        \n        const storage = this.getScheduledMessagesStorage(peerId);\n        this.saveMessages(historyResult.messages, {storage, isScheduled: true});\n        return [...storage.keys()];\n      }\n      \n      return [];\n    });\n  }\n\n  public sendScheduledMessages(peerId: PeerId, mids: number[]) {\n    return apiManager.invokeApi('messages.sendScheduledMessages', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      id: mids.map(mid => appMessagesIdsManager.getServerMessageId(mid))\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public deleteScheduledMessages(peerId: PeerId, mids: number[]) {\n    return apiManager.invokeApi('messages.deleteScheduledMessages', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      id: mids.map(mid => appMessagesIdsManager.getServerMessageId(mid))\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public getMessageWithReplies(message: Message.message) {\n    if(message.peerId !== REPLIES_PEER_ID) {\n      message = this.filterMessages(message, message => !!(message as Message.message).replies)[0] as any;\n      if(!(message && message.replies && message.replies.pFlags.comments && message.replies.channel_id !== '777')) {\n        return;\n      }\n    }\n\n    return message;\n  }\n\n  public isFetchIntervalNeeded(peerId: PeerId) {\n    return peerId.isAnyChat() && !appChatsManager.isInChat(peerId.toChatId());\n  }\n\n  public isRestricted(message: Message.message) {\n    return !!(message.restriction_reason && isRestricted(message.restriction_reason));\n  }\n\n  public async getNewHistory(peerId: PeerId, threadId?: number) {\n    if(!this.isFetchIntervalNeeded(peerId)) {\n      return;\n    }\n\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\n    const slice = historyStorage.history.slice;\n    if(!slice.isEnd(SliceEnd.Bottom)) {\n      return;\n    }\n\n    delete historyStorage.maxId;\n    slice.unsetEnd(SliceEnd.Bottom);\n\n    // if there is no id - then request by first id because cannot request by id 0 with backLimit\n    let historyResult = this.getHistory(peerId, slice[0] ?? 1, 0, 50, threadId);\n    if(historyResult instanceof Promise) {\n      historyResult = await historyResult;\n    }\n\n    for(let i = 0, length = historyResult.history.length; i < length; ++i) {\n      this.handleNewMessage(peerId, historyResult.history[i]);\n    }\n\n    return historyStorage;\n  }\n\n  /**\n   * * https://core.telegram.org/api/offsets, offset_id is inclusive\n   */\n  public getHistory(peerId: PeerId, maxId = 0, limit: number, backLimit?: number, threadId?: number): Promise<HistoryResult> | HistoryResult {\n    const historyStorage = this.getHistoryStorage(peerId, threadId);\n\n    if(appPeersManager.isRestricted(peerId)) {\n      const first = historyStorage.history.first;\n      first.setEnd(SliceEnd.Both);\n\n      const slice = first.slice(0, 0);\n      slice.setEnd(SliceEnd.Both);\n      \n      return {\n        count: 0,\n        history: slice,\n        offsetIdOffset: 0\n      };\n    }\n\n    let offset = 0;\n    /* \n    let offsetFound = true;\n\n    if(maxId) {\n      offsetFound = false;\n      for(; offset < historyStorage.history.length; offset++) {\n        if(maxId > historyStorage.history.slice[offset]) {\n          offsetFound = true;\n          break;\n        }\n      }\n    }\n\n    if(offsetFound && (\n      historyStorage.count !== null && historyStorage.history.length === historyStorage.count ||\n      historyStorage.history.length >= offset + limit\n      )) {\n      if(backLimit) {\n        backLimit = Math.min(offset, backLimit);\n        offset = Math.max(0, offset - backLimit);\n        limit += backLimit;\n      } else {\n        limit = limit;\n      }\n\n      const history = historyStorage.history.slice.slice(offset, offset + limit);\n      return {\n        count: historyStorage.count,\n        history: history,\n        offsetIdOffset: offset\n      };\n    }\n\n    if(offsetFound) {\n      offset = 0;\n    } */\n\n    if(backLimit) {\n      offset = -backLimit;\n      limit += backLimit;\n\n      /* return this.requestHistory(reqPeerId, maxId, limit, offset, undefined, threadId).then((historyResult) => {\n        historyStorage.count = (historyResult as MessagesMessages.messagesMessagesSlice).count || historyResult.messages.length;\n\n        const history = (historyResult.messages as MyMessage[]).map(message => message.mid);\n        return {\n          count: historyStorage.count,\n          history,\n          offsetIdOffset: (historyResult as MessagesMessages.messagesMessagesSlice).offset_id_offset || 0\n        };\n      }); */\n    }\n\n    const haveSlice = historyStorage.history.sliceMe(maxId, offset, limit);\n    if(haveSlice && (haveSlice.slice.length === limit || (haveSlice.fulfilled & SliceEnd.Both) === SliceEnd.Both)) {\n      return {\n        count: historyStorage.count,\n        history: haveSlice.slice,\n        offsetIdOffset: haveSlice.offsetIdOffset\n      }; \n    }\n\n    return this.fillHistoryStorage(peerId, maxId, limit, offset, historyStorage, threadId).then(() => {\n      const slice = historyStorage.history.sliceMe(maxId, offset, limit);\n      return {\n        count: historyStorage.count,\n        history: slice?.slice || historyStorage.history.constructSlice(),\n        offsetIdOffset: slice?.offsetIdOffset || historyStorage.count\n      };\n    });\n  }\n\n  public isHistoryResultEnd(historyResult: Exclude<MessagesMessages, MessagesMessages.messagesMessagesNotModified>, limit: number, add_offset: number) {\n    const {offset_id_offset, messages} = historyResult as MessagesMessages.messagesMessagesSlice;\n\n    const count = (historyResult as MessagesMessages.messagesMessagesSlice).count || messages.length;\n    const offsetIdOffset = offset_id_offset || 0;\n\n    const topWasMeantToLoad = add_offset < 0 ? limit + add_offset : limit;\n\n    const isTopEnd = offsetIdOffset >= (count - topWasMeantToLoad) || count < topWasMeantToLoad;\n    const isBottomEnd = !offsetIdOffset || (add_offset < 0 && (offsetIdOffset + add_offset) <= 0);\n\n    return {count, offsetIdOffset, isTopEnd, isBottomEnd};\n  }\n\n  public mergeHistoryResult(slicedArray: SlicedArray, \n    historyResult: Parameters<AppMessagesManager['isHistoryResultEnd']>[0], \n    offset_id: number, \n    limit: number, \n    add_offset: number) {\n    const {messages} = historyResult as MessagesMessages.messagesMessagesSlice;\n    const isEnd = this.isHistoryResultEnd(historyResult, limit, add_offset);\n    const {count, offsetIdOffset, isTopEnd, isBottomEnd} = isEnd;\n    const mids = messages.map((message) => {\n      return (message as MyMessage).mid;\n    });\n\n    // * add bound manually. \n    // * offset_id will be inclusive only if there is 'add_offset' <= -1 (-1 - will only include the 'offset_id')\n    // * check that offset_id is not 0\n    if(offset_id && appMessagesIdsManager.getServerMessageId(offset_id) && !mids.includes(offset_id) && offsetIdOffset < count) {\n      let i = 0;\n      for(const length = mids.length; i < length; ++i) {\n        if(offset_id > mids[i]) {\n          break;\n        }\n      }\n\n      mids.splice(i, 0, offset_id);\n    }\n\n    const slice = slicedArray.insertSlice(mids) || slicedArray.slice;\n    if(isTopEnd) {\n      slice.setEnd(SliceEnd.Top);\n    }\n  \n    if(isBottomEnd) {\n      slice.setEnd(SliceEnd.Bottom);\n    }\n\n    return {slice, mids, messages, ...isEnd};\n  }\n\n  public fillHistoryStorage(peerId: PeerId, offset_id: number, limit: number, add_offset: number, historyStorage: HistoryStorage, threadId?: number): Promise<void> {\n    return this.requestHistory(peerId, offset_id, limit, add_offset, undefined, threadId).then((historyResult) => {\n      const {count, isBottomEnd, slice, messages} = this.mergeHistoryResult(historyStorage.history, historyResult, offset_id, limit, add_offset);\n\n      historyStorage.count = count;\n\n      /* if(!maxId && historyResult.messages.length) {\n        maxId = this.incrementMessageId((historyResult.messages[0] as MyMessage).mid, 1);\n      }\n\n      const wasTotalCount = historyStorage.history.length; */\n\n      for(let i = 0, length = messages.length; i < length; ++i) {\n        const message = messages[i] as MyMessage;\n        if(this.mergeReplyKeyboard(historyStorage, message)) {\n          rootScope.dispatchEvent('history_reply_markup', {peerId});\n        }\n      }\n\n      if(isBottomEnd) {\n        historyStorage.maxId = slice[0]; // ! WARNING\n      }\n      \n      /* const isBackLimit = offset < 0 && -offset !== fullLimit;\n      if(isBackLimit) {\n        return;\n      }\n\n      const totalCount = historyStorage.history.length;\n      fullLimit -= (totalCount - wasTotalCount);\n\n      const migratedNextPeer = this.migratedFromTo[peerId];\n      const migratedPrevPeer = this.migratedToFrom[peerId]\n      const isMigrated = migratedNextPeer !== undefined || migratedPrevPeer !== undefined;\n\n      if(isMigrated) {\n        historyStorage.count = Math.max(historyStorage.count, totalCount) + 1;\n      }\n\n      if(fullLimit > 0) {\n        maxId = historyStorage.history.slice[totalCount - 1];\n        if(isMigrated) {\n          if(!historyResult.messages.length) {\n            if(migratedPrevPeer) {\n              maxId = 0;\n              peerId = migratedPrevPeer;\n            } else {\n              historyStorage.count = totalCount;\n              return true;\n            }\n          }\n\n          return this.fillHistoryStorage(peerId, maxId, fullLimit, historyStorage, threadId);\n        } else if(totalCount < historyStorage.count) {\n          return this.fillHistoryStorage(peerId, maxId, fullLimit, offset, historyStorage, threadId);\n        }\n      } */\n    });\n  }\n\n  public requestHistory(peerId: PeerId, maxId: number, limit = 0, offset = 0, offsetDate = 0, threadId = 0): Promise<Exclude<MessagesMessages, MessagesMessages.messagesMessagesNotModified>> {\n    //console.trace('requestHistory', peerId, maxId, limit, offset);\n\n    //rootScope.broadcast('history_request');\n\n    const options: any = {\n      peer: appPeersManager.getInputPeerById(peerId),\n      offset_id: appMessagesIdsManager.getServerMessageId(maxId) || 0,\n      offset_date: offsetDate,\n      add_offset: offset,\n      limit,\n      max_id: 0,\n      min_id: 0,\n      hash: 0\n    };\n\n    if(threadId) {\n      options.msg_id = appMessagesIdsManager.getServerMessageId(threadId) || 0;\n    }\n\n    const promise: ReturnType<AppMessagesManager['requestHistory']> = apiManager.invokeApiSingle(threadId ? 'messages.getReplies' : 'messages.getHistory', options, {\n      //timeout: APITIMEOUT,\n      noErrorBox: true\n    }) as any;\n\n    return promise.then((historyResult) => {\n      if(DEBUG) {\n        this.log('requestHistory result:', peerId, historyResult, maxId, limit, offset);\n      }\n\n      appUsersManager.saveApiUsers(historyResult.users);\n      appChatsManager.saveApiChats(historyResult.chats);\n      this.saveMessages(historyResult.messages);\n\n      if(appPeersManager.isChannel(peerId)) {\n        apiUpdatesManager.addChannelState(peerId.toChatId(), (historyResult as MessagesMessages.messagesChannelMessages).pts);\n      }\n\n      let length = historyResult.messages.length, count = (historyResult as MessagesMessages.messagesMessagesSlice).count;\n      if(length && historyResult.messages[length - 1].deleted) {\n        historyResult.messages.splice(length - 1, 1);\n        length--;\n        count--;\n      }\n\n      // will load more history if last message is album grouped (because it can be not last item)\n      // historyResult.messages: desc sorted\n      const historyStorage = this.getHistoryStorage(peerId, threadId);\n      const oldestMessage: Message.message = historyResult.messages[length - 1] as any;\n      if(length && oldestMessage.grouped_id) {\n        const foundSlice = historyStorage.history.findSlice(oldestMessage.mid);\n        if(foundSlice && (foundSlice.slice.length + historyResult.messages.length) < count) {\n          return this.requestHistory(peerId, oldestMessage.mid, 10, 0, offsetDate, threadId).then((_historyResult) => {\n            return historyResult;\n          });\n        }\n      }\n\n      return historyResult;\n    }, (error) => {\n      switch (error.type) {\n        case 'CHANNEL_PRIVATE':\n          let channel = appChatsManager.getChat(peerId.toChatId());\n          channel = {_: 'channelForbidden', access_hash: channel.access_hash, title: channel.title};\n          apiUpdatesManager.processUpdateMessage({\n            _: 'updates',\n            updates: [{\n              _: 'updateChannel',\n              channel_id: peerId.toChatId()\n            }],\n            chats: [channel],\n            users: []\n          });\n          break;\n      }\n\n      throw error;\n    });\n  }\n\n  public fetchSingleMessages() {\n    if(this.fetchSingleMessagesPromise) {\n      return this.fetchSingleMessagesPromise;\n    }\n\n    return this.fetchSingleMessagesPromise = new Promise((resolve) => {\n      setTimeout(() => {\n        const requestPromises: Promise<void>[] = [];\n        \n        for(const [peerId, map] of this.needSingleMessages) {\n          const mids = [...map.keys()];\n          const msgIds: InputMessage[] = mids.map((mid) => {\n            return {\n              _: 'inputMessageID',\n              id: appMessagesIdsManager.getServerMessageId(mid)\n            };\n          });\n    \n          let promise: Promise<MethodDeclMap['channels.getMessages']['res'] | MethodDeclMap['messages.getMessages']['res']>;\n          if(peerId.isAnyChat() && appPeersManager.isChannel(peerId)) {\n            promise = apiManager.invokeApiSingle('channels.getMessages', {\n              channel: appChatsManager.getChannelInput(peerId.toChatId()),\n              id: msgIds\n            });\n          } else {\n            promise = apiManager.invokeApiSingle('messages.getMessages', {\n              id: msgIds\n            });\n          }\n\n          const after = promise.then(getMessagesResult => {\n            assumeType<Exclude<MessagesMessages.messagesMessages, MessagesMessages.messagesMessagesNotModified>>(getMessagesResult);\n\n            appUsersManager.saveApiUsers(getMessagesResult.users);\n            appChatsManager.saveApiChats(getMessagesResult.chats);\n            this.saveMessages(getMessagesResult.messages);\n\n            for(let i = 0; i < getMessagesResult.messages.length; ++i) {\n              const message = getMessagesResult.messages[i];\n              const mid = appMessagesIdsManager.generateMessageId(message.id);\n              const promise = map.get(mid);\n              promise.resolve(getMessagesResult.messages[i]);\n              map.delete(mid);\n            }\n\n            if(map.size) {\n              for(const [mid, promise] of map) {\n                promise.resolve(this.generateEmptyMessage(mid));\n              }\n            }\n          }).finally(() => {\n            rootScope.dispatchEvent('messages_downloaded', {peerId, mids});\n          });\n    \n          requestPromises.push(after);\n        }\n\n        this.needSingleMessages.clear();\n\n        Promise.all(requestPromises).finally(() => {\n          this.fetchSingleMessagesPromise = null;\n          if(this.needSingleMessages.size) this.fetchSingleMessages();\n          resolve();\n        });\n      }, 0);\n    });\n  }\n\n  public wrapSingleMessage(peerId: PeerId, mid: number, overwrite = false): Promise<Message> {\n    const message = this.getMessageByPeer(peerId, mid);\n    if(!message.deleted && !overwrite) {\n      rootScope.dispatchEvent('messages_downloaded', {peerId, mids: [mid]});\n      return Promise.resolve(message);\n    } else {\n      let map = this.needSingleMessages.get(peerId);\n      if(!map) {\n        this.needSingleMessages.set(peerId, map = new Map());\n      }\n\n      let promise = map.get(mid);\n      if(promise) {\n        return promise;\n      }\n\n      promise = deferredPromise();\n      map.set(mid, promise);\n      this.fetchSingleMessages();\n      return promise;\n    }\n  }\n\n  public fetchMessageReplyTo(message: MyMessage): Promise<Message> {\n    if(!message.reply_to_mid) return Promise.resolve(this.generateEmptyMessage(0));\n    const replyToPeerId = message.reply_to.reply_to_peer_id ? appPeersManager.getPeerId(message.reply_to.reply_to_peer_id) : message.peerId;\n    return this.wrapSingleMessage(replyToPeerId, message.reply_to_mid).then(originalMessage => {\n      if(originalMessage.deleted) { // ! чтобы не пыталось бесконечно загрузить удалённое сообщение\n        delete message.reply_to_mid; // ! WARNING!\n      }\n\n      return originalMessage;\n    });\n  }\n\n  public setTyping(peerId: PeerId, action: SendMessageAction, force?: boolean): Promise<boolean> {\n    let typing = this.typings[peerId];\n    if(!rootScope.myId || \n      !peerId || \n      !this.canSendToPeer(peerId) || \n      peerId === rootScope.myId ||\n      // (!force && deepEqual(typing?.action, action))\n      (!force && typing?.action?._ === action._)\n    ) {\n      return Promise.resolve(false);\n    }\n\n    if(typing?.timeout) {\n      clearTimeout(typing.timeout);\n    }\n\n    typing = this.typings[peerId] = {\n      action\n    };\n\n    return apiManager.invokeApi('messages.setTyping', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      action\n    }).finally(() => {\n      if(typing === this.typings[peerId]) {\n        typing.timeout = window.setTimeout(() => {\n          delete this.typings[peerId];\n        }, 6000);\n      }\n    });\n  }\n\n  private handleReleasingMessage(message: MyMessage, storage: MessagesStorage) {\n    const media = (message as Message.message).media;\n    if(media) {\n      const c = (media as MessageMedia.messageMediaWebPage).webpage as WebPage.webPage || media as MessageMedia.messageMediaPhoto | MessageMedia.messageMediaDocument;\n      const smth: Photo.photo | MyDocument = (c as MessageMedia.messageMediaPhoto).photo as any || (c as MessageMedia.messageMediaDocument).document as any;\n\n      if(smth?.file_reference) {\n        referenceDatabase.deleteContext(smth.file_reference, {type: 'message', peerId: message.peerId, messageId: message.mid});\n      }\n\n      if('webpage' in media && media.webpage) {\n        const isScheduled = this.getScheduledMessagesStorage(message.peerId) === storage;\n        const messageKey = appWebPagesManager.getMessageKeyForPendingWebPage(message.peerId, message.mid, isScheduled);\n        appWebPagesManager.deleteWebPageFromPending(media.webpage, messageKey);\n      }\n\n      if((media as MessageMedia.messageMediaPoll).poll) {\n        appPollsManager.updatePollToMessage(message as Message.message, false);\n      }\n    }\n  }\n\n  private handleDeletedMessages(peerId: PeerId, storage: MessagesStorage, messages: number[]) {\n    const history: {\n      count: number, \n      unread: number, \n      unreadMentions: number, \n      msgs: Set<number>,\n      albums?: {[groupId: string]: Set<number>},\n    } = {\n      count: 0, \n      unread: 0, \n      unreadMentions: 0, \n      msgs: new Set()\n    };\n\n    for(const mid of messages) {\n      const message: MyMessage = this.getMessageFromStorage(storage, mid);\n      if(message.deleted) {\n        this.fixDialogUnreadMentionsIfNoMessage(peerId);\n        continue;\n      }\n\n      this.handleReleasingMessage(message, storage);\n\n      this.updateMessageRepliesIfNeeded(message);\n\n      if(!message.pFlags.out && !message.pFlags.is_outgoing && message.pFlags.unread) {\n        ++history.unread;\n        appNotificationsManager.cancel('msg' + mid);\n\n        if(message.pFlags.mentioned) {\n          ++history.unreadMentions;\n          this.modifyCachedMentions(peerId, mid, false);\n        }\n      }\n\n      ++history.count;\n      history.msgs.add(mid);\n\n      message.deleted = true;\n\n      const groupedId = (message as Message.message).grouped_id;\n      if(groupedId) {\n        const groupedStorage = this.groupedMessagesStorage[groupedId];\n        if(groupedStorage) {\n          groupedStorage.delete(mid);\n\n          if(!history.albums) history.albums = {};\n          (history.albums[groupedId] || (history.albums[groupedId] = new Set())).add(mid);\n\n          if(!groupedStorage.size) {\n            delete history.albums;\n            delete this.groupedMessagesStorage[groupedId];\n          }\n        }\n      }\n\n      storage.delete(mid);\n\n      const peerMessagesToHandle = this.newMessagesToHandle[peerId];\n      if(peerMessagesToHandle && peerMessagesToHandle.has(mid)) {\n        peerMessagesToHandle.delete(mid);\n      }\n    }\n\n    if(history.albums) {\n      for(const groupId in history.albums) {\n        rootScope.dispatchEvent('album_edit', {peerId, groupId, deletedMids: [...history.albums[groupId]]});\n        /* const mids = this.getMidsByAlbum(groupId);\n        if(mids.length) {\n          const mid = Math.max(...mids);\n          rootScope.$broadcast('message_edit', {peerId, mid, justMedia: false});\n        } */\n      }\n    }\n\n    return history;\n  }\n  \n  private handleEditedMessage(oldMessage: Message, newMessage: Message) {\n    if(oldMessage._ === 'message') {\n      if((oldMessage.media as MessageMedia.messageMediaWebPage)?.webpage) {\n        const messageKey = appWebPagesManager.getMessageKeyForPendingWebPage(oldMessage.peerId, oldMessage.mid, !!oldMessage.pFlags.is_scheduled);\n        appWebPagesManager.deleteWebPageFromPending((oldMessage.media as MessageMedia.messageMediaWebPage).webpage, messageKey);\n      }\n    }\n  }\n\n  public getMediaFromMessage(message: any) {\n    return message.action ? \n      message.action.photo : \n      message.media && (\n        message.media.photo || \n        message.media.document || (\n          message.media.webpage && (\n            message.media.webpage.document || \n            message.media.webpage.photo\n          )\n        )\n      );\n  }\n\n  public isMentionUnread(message: MyMessage) {\n    const doc = ((message as Message.message).media as MessageMedia.messageMediaDocument)?.document as MyDocument;\n    return message.pFlags.media_unread && \n      message.pFlags.mentioned && \n      (\n        !doc || \n        !(['voice', 'round'] as MyDocument['type'][]).includes(doc.type)\n      );\n  }\n\n  public getDialogUnreadCount(dialog: Dialog) {\n    return dialog.unread_count || +!!dialog.pFlags.unread_mark;\n  }\n\n  public isDialogUnread(dialog: Dialog) {\n    return !!this.getDialogUnreadCount(dialog);\n  }\n\n  public canForward(message: Message.message | Message.messageService) {\n    return !(message as Message.message).pFlags.noforwards && !appPeersManager.noForwards(message.peerId);\n  }\n}\n\nconst appMessagesManager = new AppMessagesManager();\nMOUNT_CLASS_TO.appMessagesManager = appMessagesManager;\nexport default appMessagesManager;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { Chat, ChatPhoto, DialogPeer, InputChannel, InputDialogPeer, InputNotifyPeer, InputPeer, Peer, Update, User, UserProfilePhoto } from \"../../layer\";\r\nimport type { LangPackKey } from \"../langPack\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { isObject } from \"../../helpers/object\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport I18n from '../langPack';\r\nimport { NULL_PEER_ID } from \"../mtproto/mtproto_config\";\r\nimport { getRestrictionReason } from \"../../helpers/restrictions\";\r\n\r\n// https://github.com/eelcohn/Telegram-API/wiki/Calculating-color-for-a-Telegram-user-on-IRC\r\n/*\r\n  HTML-color  IRC-color  Description\r\n  #c03d33     4          red\r\n  #4fad2d     3          green\r\n  #d09306     7          yellow\r\n  #168acd     10         blue\r\n  #8544d6     6          purple\r\n  #cd4073     13         pink\r\n  #2996ad     11         sea\r\n  #ce671b     5          orange\r\n  */\r\nconst DialogColorsFg = ['#fc5c51', '#0fb297', '#d09306', '#3d72ed', '#895dd5', '#cd4073', '#00c1a6', '#fa790f'];\r\nconst DialogColors = ['red', 'green', 'yellow', 'blue', 'violet', 'pink', 'cyan', 'orange'];\r\nconst DialogColorsMap = [0, 7, 4, 1, 6, 3, 5];\r\n\r\nexport type PeerType = 'channel' | 'chat' | 'megagroup' | 'group' | 'saved';\r\nexport class AppPeersManager {\r\n  /* public savePeerInstance(peerId: PeerId, instance: any) {\r\n    if(peerId < 0) appChatsManager.saveApiChat(instance);\r\n    else appUsersManager.saveApiUser(instance);\r\n  } */\r\n\r\n  public canPinMessage(peerId: PeerId) {\r\n    return peerId.isUser() || appChatsManager.hasRights(peerId.toChatId(), 'pin_messages');\r\n  }\r\n\r\n  public getPeerPhoto(peerId: PeerId): UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto {\r\n    if(this.isRestricted(peerId)) {\r\n      return;\r\n    }\r\n\r\n    const photo = peerId.isUser() \r\n      ? appUsersManager.getUserPhoto(peerId.toUserId())\r\n      : appChatsManager.getChatPhoto(peerId.toChatId());\r\n\r\n    return photo._ !== 'chatPhotoEmpty' && photo._ !== 'userProfilePhotoEmpty' ? photo : undefined;\r\n  }\r\n\r\n  public getPeerMigratedTo(peerId: PeerId) {\r\n    if(peerId.isUser()) {\r\n      return false;\r\n    }\r\n\r\n    const chat: Chat.chat = appChatsManager.getChat(peerId.toChatId());\r\n    if(chat && chat.migrated_to && chat.pFlags.deactivated) {\r\n      return this.getPeerId(chat.migrated_to as InputChannel.inputChannel);\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public getPeerTitle(peerId: PeerId, plainText = false, onlyFirstName = false) {\r\n    if(!peerId) {\r\n      peerId = rootScope.myId;\r\n    }\r\n    \r\n    let title = '';\r\n    if(peerId.isUser()) {\r\n      const user = appUsersManager.getUser(peerId.toUserId());\r\n      if(user.first_name) title += user.first_name;\r\n      if(user.last_name && (!onlyFirstName || !title)) title += ' ' + user.last_name;\r\n  \r\n      if(!title) title = user.pFlags.deleted ? I18n.format('HiddenName', true) : user.username;\r\n      else title = title.trim();\r\n    } else {\r\n      const chat: Chat.chat = appChatsManager.getChat(peerId.toChatId());\r\n      title = chat.title;\r\n\r\n      if(onlyFirstName) {\r\n        title = title.split(' ')[0];\r\n      }\r\n    }\r\n    \r\n    return plainText ? title : RichTextProcessor.wrapEmojiText(title);\r\n  }\r\n\r\n  public getOutputPeer(peerId: PeerId): Peer {\r\n    if(peerId.isUser()) {\r\n      return {_: 'peerUser', user_id: peerId.toUserId()};\r\n    }\r\n\r\n    const chatId = peerId.toChatId();\r\n    if(appChatsManager.isChannel(chatId)) {\r\n      return {_: 'peerChannel', channel_id: chatId};\r\n    }\r\n\r\n    return {_: 'peerChat', chat_id: chatId};\r\n  }\r\n\r\n  public getPeerString(peerId: PeerId) {\r\n    if(peerId.isUser()) {\r\n      return appUsersManager.getUserString(peerId.toUserId());\r\n    }\r\n    return appChatsManager.getChatString(peerId.toChatId());\r\n  }\r\n\r\n  public getPeerUsername(peerId: PeerId): string {\r\n    return this.getPeer(peerId).username || '';\r\n  }\r\n\r\n  public getPeer(peerId: PeerId) {\r\n    return peerId.isUser()\r\n      ? appUsersManager.getUser(peerId.toUserId())\r\n      : appChatsManager.getChat(peerId.toChatId());\r\n  }\r\n\r\n  public getPeerId(peerId: {user_id: UserId} | {channel_id: ChatId} | {chat_id: ChatId} | InputPeer | PeerId | string): PeerId {\r\n    if(peerId !== undefined && ((peerId as string).isPeerId ? (peerId as string).isPeerId() : false)) return peerId as PeerId;\r\n    // if(typeof(peerId) === 'string' && /^[uc]/.test(peerId)) return peerId as PeerId;\r\n    // if(typeof(peerId) === 'number') return peerId;\r\n    else if(isObject(peerId)) {\r\n      const userId = (peerId as Peer.peerUser).user_id;\r\n      if(userId !== undefined) {\r\n        return userId.toPeerId(false);\r\n      }\r\n\r\n      const chatId = (peerId as Peer.peerChannel).channel_id || (peerId as Peer.peerChat).chat_id;\r\n      if(chatId !== undefined) {\r\n        return chatId.toPeerId(true);\r\n      }\r\n\r\n      return rootScope.myId; // maybe it is an inputPeerSelf\r\n    // } else if(!peerId) return 'u0';\r\n    } else if(!peerId) return NULL_PEER_ID;\r\n    \r\n    const isUser = (peerId as string).charAt(0) === 'u';\r\n    const peerParams = (peerId as string).substr(1).split('_');\r\n\r\n    return isUser ? peerParams[0].toPeerId() : (peerParams[0] || '').toPeerId(true);\r\n  }\r\n\r\n  public getDialogPeer(peerId: PeerId): DialogPeer {\r\n    return {\r\n      _: 'dialogPeer',\r\n      peer: this.getOutputPeer(peerId)\r\n    };\r\n  }\r\n\r\n  public isChannel(peerId: PeerId): boolean {\r\n    return !peerId.isUser() && appChatsManager.isChannel(peerId.toChatId());\r\n  }\r\n\r\n  public isMegagroup(peerId: PeerId) {\r\n    return !peerId.isUser() && appChatsManager.isMegagroup(peerId.toChatId());\r\n  }\r\n\r\n  public isAnyGroup(peerId: PeerId): boolean {\r\n    return !peerId.isUser() && !appChatsManager.isBroadcast(peerId.toChatId());\r\n  }\r\n\r\n  public isBroadcast(peerId: PeerId): boolean {\r\n    return this.isChannel(peerId) && !this.isMegagroup(peerId);\r\n  }\r\n\r\n  public isBot(peerId: PeerId): boolean {\r\n    return peerId.isUser() && appUsersManager.isBot(peerId.toUserId());\r\n  }\r\n\r\n  public isContact(peerId: PeerId): boolean {\r\n    return peerId.isUser() && appUsersManager.isContact(peerId.toUserId());\r\n  }\r\n\r\n  public isUser(peerId: PeerId)/* : peerId is UserId */ {\r\n    return +peerId >= 0;\r\n  }\r\n  \r\n  public isAnyChat(peerId: PeerId) {\r\n    return !this.isUser(peerId);\r\n  }\r\n\r\n  public isRestricted(peerId: PeerId) {\r\n    return peerId.isUser() ? appUsersManager.isRestricted(peerId.toUserId()) : appChatsManager.isRestricted(peerId.toChatId());\r\n  }\r\n\r\n  public getRestrictionReasonText(peerId: PeerId) {\r\n    const peer: Chat.channel | User.user = this.getPeer(peerId);\r\n    const reason = peer.restriction_reason ? getRestrictionReason(peer.restriction_reason) : undefined;\r\n    if(reason) {\r\n      return reason.text;\r\n    } else {\r\n      return peerId.isUser() ? 'This user is restricted' : 'This chat is restricted';\r\n    }\r\n  }\r\n\r\n  /* public getInputPeer(peerString: string): InputPeer {\r\n    var firstChar = peerString.charAt(0);\r\n    var peerParams = peerString.substr(1).split('_');\r\n    let id = +peerParams[0];\r\n\r\n    if(firstChar === 'u') {\r\n      //appUsersManager.saveUserAccess(id, peerParams[1]);\r\n\r\n      return {\r\n        _: 'inputPeerUser',\r\n        user_id: id,\r\n        access_hash: peerParams[1]\r\n      };\r\n    } else if(firstChar === 'c' || firstChar === 's') {\r\n      //appChatsManager.saveChannelAccess(id, peerParams[1]);\r\n      if(firstChar === 's') {\r\n        appChatsManager.saveIsMegagroup(id);\r\n      }\r\n\r\n      return {\r\n        _: 'inputPeerChannel',\r\n        channel_id: id,\r\n        access_hash: peerParams[1] || '0'\r\n      };\r\n    } else {\r\n      return {\r\n        _: 'inputPeerChat',\r\n        chat_id: id\r\n      };\r\n    }\r\n  } */\r\n\r\n  public getInputNotifyPeerById(peerId: PeerId, ignorePeerId: true): Exclude<InputNotifyPeer, InputNotifyPeer.inputNotifyPeer>;\r\n  public getInputNotifyPeerById(peerId: PeerId, ignorePeerId?: false): InputNotifyPeer.inputNotifyPeer;\r\n  public getInputNotifyPeerById(peerId: PeerId, ignorePeerId?: boolean): InputNotifyPeer {\r\n    if(ignorePeerId) {\r\n      if(peerId.isUser()) {\r\n        return {_: 'inputNotifyUsers'};\r\n      } else {\r\n        if(this.isBroadcast(peerId)) {\r\n          return {_: 'inputNotifyBroadcasts'};\r\n        } else {\r\n          return {_: 'inputNotifyChats'};\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        _: 'inputNotifyPeer', \r\n        peer: this.getInputPeerById(peerId)\r\n      };\r\n    }\r\n  }\r\n\r\n  public getInputPeerById(peerId: PeerId): InputPeer {\r\n    if(!peerId) {\r\n      return {_: 'inputPeerEmpty'};\r\n    }\r\n\r\n    if(!peerId.isUser()) {\r\n      const chatId = peerId.toChatId();\r\n      return appChatsManager.getInputPeer(chatId);\r\n    }\r\n\r\n    const userId = peerId.toUserId();\r\n    return appUsersManager.getUserInputPeer(userId);\r\n  }\r\n\r\n  public getInputPeerSelf(): InputPeer.inputPeerSelf {\r\n    return {_: 'inputPeerSelf'};\r\n  }\r\n\r\n  public getInputDialogPeerById(peerId: PeerId | InputPeer): InputDialogPeer {\r\n    return {\r\n      _: 'inputDialogPeer',\r\n      peer: isObject<InputPeer>(peerId) ? peerId : this.getInputPeerById(peerId)\r\n    };\r\n  }\r\n\r\n  public getPeerColorById(peerId: PeerId, pic = true) {\r\n    if(!peerId) return '';\r\n\r\n    const idx = DialogColorsMap[Math.abs(+peerId) % 7];\r\n    const color = (pic ? DialogColors : DialogColorsFg)[idx];\r\n    return color;\r\n  }\r\n\r\n  public getPeerSearchText(peerId: PeerId) {\r\n    let text: string;\r\n    if(this.isUser(peerId)) {\r\n      text = '%pu ' + appUsersManager.getUserSearchText(peerId.toUserId());\r\n    } else {\r\n      const chat = appChatsManager.getChat(peerId.toChatId());\r\n      text = '%pg ' + (chat.title || '');\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  public getDialogType(peerId: PeerId): PeerType {\r\n    if(this.isMegagroup(peerId)) {\r\n      return 'megagroup';\r\n    } else if(this.isChannel(peerId)) {\r\n      return 'channel';\r\n    } else if(!this.isUser(peerId)) {\r\n      return 'group';\r\n    } else {\r\n      return peerId === rootScope.myId ? 'saved' : 'chat';\r\n    }\r\n  }\r\n\r\n  public getDeleteButtonText(peerId: PeerId): LangPackKey {\r\n    switch(this.getDialogType(peerId)) {\r\n      case 'channel':\r\n        return appChatsManager.hasRights(peerId.toChatId(), 'delete_chat') ? 'ChannelDelete' : 'ChatList.Context.LeaveChannel';\r\n\r\n      case 'megagroup':\r\n      case 'group':\r\n        return appChatsManager.hasRights(peerId.toChatId(), 'delete_chat') ? 'DeleteMega' : 'ChatList.Context.LeaveGroup';\r\n      \r\n      default:\r\n        return 'ChatList.Context.DeleteChat';\r\n    }\r\n  }\r\n\r\n  public noForwards(peerId: PeerId) {\r\n    if(peerId.isUser()) return false;\r\n    else {\r\n      const chat = appChatsManager.getChatTyped(peerId.toChatId());\r\n      return !!(chat as Chat.chat).pFlags?.noforwards;\r\n    }\r\n  }\r\n}\r\n\r\nexport type IsPeerType = 'isChannel' | 'isMegagroup' | 'isAnyGroup' | 'isBroadcast' | 'isBot' | 'isContact' | 'isUser' | 'isAnyChat';\r\n\r\n[\r\n  'isChannel',\r\n  'isMegagroup',\r\n  'isAnyGroup',\r\n  'isBroadcast',\r\n  'isBot',\r\n  'isContact',\r\n  'isUser',\r\n  'isAnyChat',\r\n].forEach((value) => {\r\n  const newMethod = Array.isArray(value) ? value[0] : value;\r\n  const originMethod = Array.isArray(value) ? value[1] : value;\r\n  // @ts-ignore\r\n  String.prototype[newMethod] = function() {\r\n    // @ts-ignore\r\n    return appPeersManager[originMethod](this.toString());\r\n  };\r\n\r\n  // @ts-ignore\r\n  Number.prototype[newMethod] = function() {\r\n    // @ts-ignore\r\n    return appPeersManager[originMethod](this);\r\n  };\r\n});\r\n\r\ndeclare global {\r\n  interface String {\r\n    isChannel(): boolean;\r\n    isMegagroup(): boolean;\r\n    isAnyGroup(): boolean;\r\n    isBroadcast(): boolean;\r\n    isBot(): boolean;\r\n    isContact(): boolean;\r\n    isUser(): boolean;\r\n    isAnyChat(): boolean;\r\n  }\r\n\r\n  interface Number {\r\n    isChannel(): boolean;\r\n    isMegagroup(): boolean;\r\n    isAnyGroup(): boolean;\r\n    isBroadcast(): boolean;\r\n    isBot(): boolean;\r\n    isContact(): boolean;\r\n    isUser(): boolean;\r\n    isAnyChat(): boolean;\r\n  }\r\n}\r\n\r\nconst appPeersManager = new AppPeersManager();\r\nMOUNT_CLASS_TO.appPeersManager = appPeersManager;\r\nexport default appPeersManager;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { isObject, safeReplaceObject, copy, deepEqual } from \"../../helpers/object\";\nimport { isRestricted } from \"../../helpers/restrictions\";\nimport { ChannelParticipant, Chat, ChatAdminRights, ChatBannedRights, ChatParticipant, ChatPhoto, InputChannel, InputChatPhoto, InputFile, InputPeer, Update, Updates, ChannelsCreateChannel } from \"../../layer\";\nimport apiManagerProxy from \"../mtproto/mtprotoworker\";\nimport apiManager from '../mtproto/mtprotoworker';\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from \"./appStateManager\";\nimport appUsersManager from \"./appUsersManager\";\n\nexport type Channel = Chat.channel;\nexport type ChatRights = keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags'] | 'change_type' | 'change_permissions' | 'delete_chat' | 'view_participants';\n\nexport class AppChatsManager {\n  private storage = appStateManager.storages.chats;\n  \n  private chats: {[id: ChatId]: Chat.channel | Chat.chat | any};\n  //private usernames: any;\n  //private channelAccess: any;\n  //private megagroups: {[id: number]: true};\n\n  constructor() {\n    this.clear(true);\n\n    rootScope.addMultipleEventsListeners({\n      /* updateChannel: (update) => {\n        const channelId = update.channel_id;\n        //console.log('updateChannel:', update);\n        rootScope.broadcast('channel_settings', {channelId});\n      }, */\n\n      updateChannelParticipant: (update) => {\n        apiManagerProxy.clearCache('channels.getParticipants', (params) => {\n          return (params.channel as InputChannel.inputChannel).channel_id === update.channel_id;\n        });\n      },\n\n      updateChatDefaultBannedRights: (update) => {\n        const chatId = appPeersManager.getPeerId(update.peer).toChatId();\n        const chat: Chat.chat = this.chats[chatId];\n        if(chat) {\n          chat.default_banned_rights = update.default_banned_rights;\n          rootScope.dispatchEvent('chat_update', chatId);\n        }\n      }\n    });\n\n    appStateManager.getState().then((state) => {\n      const chats = appStateManager.storagesResults.chats;\n      if(chats.length) {\n        for(let i = 0, length = chats.length; i < length; ++i) {\n          const chat = chats[i];\n          if(chat) {\n            this.chats[chat.id] = chat;\n          }\n        }\n      }\n\n      appStateManager.addEventListener('peerNeeded', (peerId) => {\n        if(peerId.isUser() || this.storage.getFromCache(peerId.toChatId())) {\n          return;\n        }\n\n        this.storage.set({\n          [peerId.toChatId()]: this.getChat(peerId.toChatId())\n        });\n      });\n\n      appStateManager.addEventListener('peerUnneeded', (peerId) => {\n        if(peerId.isUser() || !this.storage.getFromCache(peerId.toChatId())) {\n          return;\n        }\n\n        this.storage.delete(peerId.toChatId());\n      });\n    });\n  }\n\n  public clear(init = false) {\n    if(!init) {\n      const chats = appStateManager.storagesResults.chats;\n      for(const chatId in this.chats) {\n        if(!chatId) continue;\n        if(!appStateManager.isPeerNeeded(chatId.toPeerId(true))) {\n          /* const chat = this.chats[chatId];\n          if(chat.username) {\n            delete this.usernames[cleanUsername(chat.username)];\n          } */\n          \n          chats.findAndSplice((chat) => chat.id === chatId);\n          this.storage.delete(chatId);\n          delete this.chats[chatId];\n        }\n      }\n    } else {\n      this.chats = {};\n    }\n  }\n\n  public saveApiChats(apiChats: any[], override?: boolean) {\n    if((apiChats as any).saved) return;\n    (apiChats as any).saved = true;\n    apiChats.forEach(chat => this.saveApiChat(chat, override));\n  }\n\n  public saveApiChat(chat: Chat, override?: boolean) {\n    if(chat._ === 'chatEmpty') return;\n    /* if(chat._ !== 'chat' && chat._ !== 'channel') {\n      return;\n    } */\n    \n    // * exclude from state\n    // defineNotNumerableProperties(chat, ['rTitle', 'initials']);\n\n    const oldChat: Exclude<Chat, Chat.chatEmpty> = this.chats[chat.id];\n\n    /* if(oldChat && !override) {\n      return;\n    } */\n\n    if((chat as Chat.chat).pFlags === undefined) {\n      (chat as Chat.chat).pFlags = {};\n    }\n\n    if((chat as Chat.channel).pFlags.min && oldChat !== undefined) {\n      return;\n    }\n\n    chat.initials = RichTextProcessor.getAbbreviation(chat.title);\n\n    if(chat._ === 'channel' &&\n        chat.participants_count === undefined &&\n        oldChat !== undefined &&\n        (oldChat as Chat.channel).participants_count) {\n      chat.participants_count = (oldChat as Chat.channel).participants_count;\n    }\n\n    /* if(chat.username) {\n      let searchUsername = searchIndexManager.cleanUsername(chat.username);\n      this.usernames[searchUsername] = chat.id;\n    } */\n\n    let changedPhoto = false, changedTitle = false;\n    if(oldChat === undefined) {\n      this.chats[chat.id] = chat;\n    } else {\n      const oldPhotoId = ((oldChat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      const newPhotoId = ((chat as Chat.chat).photo as ChatPhoto.chatPhoto)?.photo_id;\n      if(oldPhotoId !== newPhotoId) {\n        changedPhoto = true;\n      }\n\n      if(oldChat.title !== chat.title) {\n        changedTitle = true;\n      }\n\n      safeReplaceObject(oldChat, chat);\n      rootScope.dispatchEvent('chat_update', chat.id);\n    }\n\n    const peerId = chat.id.toPeerId(true);\n    if(changedPhoto) {\n      rootScope.dispatchEvent('avatar_update', peerId);\n    }\n\n    if(changedTitle) {\n      rootScope.dispatchEvent('peer_title_edit', peerId);\n    }\n\n    if(appStateManager.isPeerNeeded(peerId)) {\n      this.storage.set({\n        [chat.id]: chat\n      });\n    }\n  }\n\n  public getChat(id: ChatId) {\n    return this.chats[id] || {_: 'chatEmpty', id, deleted: true, access_hash: '', pFlags: {}/* this.channelAccess[id] */};\n  }\n\n  public getChatTyped(id: ChatId): Chat {\n    return this.getChat(id);\n  }\n\n  public combineParticipantBannedRights(id: ChatId, rights: ChatBannedRights) {\n    const chat: Chat.channel = this.getChat(id);\n\n    if(chat.default_banned_rights) {\n      rights = copy(rights);\n      const defaultRights = chat.default_banned_rights.pFlags;\n      for(let i in defaultRights) {\n        // @ts-ignore\n        rights.pFlags[i] = defaultRights[i];\n      }\n    }\n\n    return rights;\n  }\n\n  /**\n   * Check the user's ability to do an action in chat\n   * @param id \n   * @param action creator can still send messages to left channel. so this function shows server rights. see canSendToPeer for local rights in messages manager.\n   * @param rights do not provide this parameter when checking rights for self\n   * @param isThread \n   * @returns \n   */\n  public hasRights(id: ChatId, action: ChatRights, rights?: ChatAdminRights | ChatBannedRights, isThread?: boolean) {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty') return false;\n\n    if((chat as Chat.chat).pFlags.deactivated && action !== 'view_messages') {\n      return false;\n    }\n\n    const isCheckingRightsForSelf = rights === undefined;\n    if((chat as Chat.chat).pFlags.creator && isCheckingRightsForSelf) {\n      return true;\n    }\n\n    if(chat._ === 'chatForbidden' ||\n        chat._ === 'channelForbidden' ||\n        (chat as Chat.chat).pFlags.kicked ||\n        (chat.pFlags.left && !(chat as Chat.channel).pFlags.megagroup)) {\n      return false;\n    }\n\n    // const adminRights = chat.admin_rights;\n    // const bannedRights = (chat as Chat.channel).banned_rights || chat.default_banned_rights;\n\n    if(!rights) {\n      rights = chat.admin_rights || (chat as Chat.channel).banned_rights || chat.default_banned_rights;\n\n      if(!rights) {\n        return false;\n      }\n    }\n\n    let myFlags: Partial<{[flag in keyof ChatBannedRights['pFlags'] | keyof ChatAdminRights['pFlags']]: true}> = {};\n    if(rights) {\n      myFlags = rights.pFlags as any;\n    }\n\n    // const adminFlags = adminRights?.pFlags || {};\n    // const bannedFlags = bannedRights?.pFlags || {};\n\n    switch(action) {\n      case 'embed_links':\n      case 'send_games':\n      case 'send_gifs':\n      case 'send_inline':\n      case 'send_media':\n      case 'send_messages':\n      case 'send_polls':\n      case 'send_stickers': {\n        if(!isThread && chat.pFlags.left) {\n          return false;\n        }\n\n        if(rights._ === 'chatBannedRights' && myFlags[action]) {\n          return false;\n        }\n\n        if(chat._ === 'channel') {\n          if(!chat.pFlags.megagroup && !myFlags.post_messages) {\n            return false;\n          }\n        }\n\n        break;\n      }\n\n      // * revoke foreign messages\n      case 'delete_messages':\n      case 'manage_call': {\n        return !!myFlags[action];\n      }\n\n      case 'pin_messages': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] || !!myFlags.post_messages : !myFlags[action];\n      }\n\n      // case 'change_info': {\n        // return adminRights || isCheckingRightsForSelf ? adminFlags[action] : !myFlags[action];\n      // }\n\n      case 'change_info':\n      case 'invite_users': {\n        return rights._ === 'chatAdminRights' ? myFlags[action] : !myFlags[action];\n      }\n\n      // * only creator can do that\n      case 'change_type':\n      case 'delete_chat': {\n        return false;\n      }\n\n      case 'ban_users':\n      case 'change_permissions': {\n        return rights._ === 'chatAdminRights' && !!myFlags['ban_users'];\n      }\n\n      case 'view_participants': {\n        return !!(chat._ === 'chat' || !chat.pFlags.broadcast || chat.pFlags.creator || chat.admin_rights);\n      }\n    }\n\n    return true;\n  }\n\n  public editChatDefaultBannedRights(id: ChatId, banned_rights: ChatBannedRights) {\n    const chat: Chat.chat = this.getChat(id);\n    if(chat.default_banned_rights) {\n      if(chat.default_banned_rights.until_date === banned_rights.until_date && deepEqual(chat.default_banned_rights.pFlags, banned_rights.pFlags)) {\n        return Promise.resolve();\n      }\n    }\n    \n    return apiManager.invokeApi('messages.editChatDefaultBannedRights', {\n      peer: appPeersManager.getInputPeerById(id.toPeerId(true)),\n      banned_rights\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  /* public resolveUsername(username: string) {\n    return this.usernames[username] || 0;\n  } */\n\n  /* public saveChannelAccess(id: ChatId, accessHash: string) {\n    this.channelAccess[id] = accessHash;\n  } */\n\n  /* public saveIsMegagroup(id: ChatId) {\n    this.megagroups[id] = true;\n  } */\n\n  public isChannel(id: ChatId) {\n    const chat = this.chats[id];\n    return !!(chat && (chat._ === 'channel' || chat._ === 'channelForbidden')/*  || this.channelAccess[id] */);\n  }\n\n  public isMegagroup(id: ChatId) {\n    /* if(this.megagroups[id]) {\n      return true;\n    } */\n\n    const chat: Chat = this.chats[id];\n    return !!(chat && chat._ === 'channel' && chat.pFlags.megagroup);\n  }\n\n  public isBroadcast(id: ChatId) {\n    return this.isChannel(id) && !this.isMegagroup(id);\n  }\n\n  public isInChat(id: ChatId) {\n    let good = true;\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channelForbidden' \n      || chat._ === 'chatForbidden' \n      || chat._ === 'chatEmpty' \n      || (chat as Chat.chat).pFlags.left \n      || (chat as Chat.chat).pFlags.kicked \n      || (chat as Chat.chat).pFlags.deactivated) {\n      good = false;\n    }\n\n    return good;\n  }\n\n  public getChannelInput(id: ChatId): InputChannel {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'chatEmpty' || !(chat as Chat.channel).access_hash) {\n      return {\n        _: 'inputChannelEmpty'\n      };\n    } else {\n      return {\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: (chat as Chat.channel).access_hash/*  || this.channelAccess[id] */ || '0'\n      };\n    }\n  }\n\n  public getInputPeer(id: ChatId) {\n    return this.isChannel(id) ? this.getChannelInputPeer(id) : this.getChatInputPeer(id);\n  }\n\n  public getChatInputPeer(id: ChatId): InputPeer.inputPeerChat {\n    return {\n      _: 'inputPeerChat',\n      chat_id: id\n    };\n  }\n\n  public getChannelInputPeer(id: ChatId): InputPeer.inputPeerChannel {\n    return {\n      _: 'inputPeerChannel',\n      channel_id: id,\n      access_hash: this.getChat(id).access_hash/*  || this.channelAccess[id] */ || 0\n    };\n  }\n\n  public hasChat(id: ChatId, allowMin?: true) {\n    const chat = this.chats[id];\n    return isObject(chat) && (allowMin || !chat.pFlags.min);\n  }\n\n  public getChatPhoto(id: ChatId) {\n    const chat: Chat.chat = this.getChat(id);\n\n    return chat && chat.photo || {\n      _: 'chatPhotoEmpty'\n    };\n  }\n\n  public getChatString(id: ChatId) {\n    const chat = this.getChat(id);\n    if(this.isChannel(id)) {\n      return (this.isMegagroup(id) ? 's' : 'c') + id + '_' + chat.access_hash;\n    }\n    return 'g' + id;\n  }\n\n  /* public wrapForFull(id: number, fullChat: any) {\n    const chatFull = copy(fullChat);\n    const chat = this.getChat(id);\n\n    if(!chatFull.participants_count) {\n      chatFull.participants_count = chat.participants_count;\n    }\n\n    if(chatFull.participants &&\n        chatFull.participants._ === 'chatParticipants') {\n      chatFull.participants.participants = this.wrapParticipants(id, chatFull.participants.participants);\n    }\n\n    if(chatFull.about) {\n      chatFull.rAbout = RichTextProcessor.wrapRichText(chatFull.about, {noLinebreaks: true});\n    }\n\n    //chatFull.peerString = this.getChatString(id);\n    chatFull.chat = chat;\n\n    return chatFull;\n  }\n\n  public wrapParticipants(id: number, participants: any[]) {\n    const chat = this.getChat(id);\n    const myId = appUsersManager.getSelf().id;\n    if(this.isChannel(id)) {\n      const isAdmin = chat.pFlags.creator;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = isAdmin && participant._ === 'channelParticipant';\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    } else {\n      const isAdmin = chat.pFlags.creator || chat.pFlags.admins_enabled && chat.pFlags.admin;\n      participants.forEach((participant) => {\n        participant.canLeave = myId === participant.user_id;\n        participant.canKick = !participant.canLeave && (\n          chat.pFlags.creator ||\n          participant._ === 'chatParticipant' && (isAdmin || myId === participant.inviter_id)\n        );\n\n        // just for order by last seen\n        participant.user = appUsersManager.getUser(participant.user_id);\n      });\n    }\n\n    return participants;\n  } */\n\n  public createChannel(options: ChannelsCreateChannel): Promise<ChatId> {\n    return apiManager.invokeApi('channels.createChannel', options).then((updates) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const channelId = (updates as any).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: channelId.toPeerId(true)});\n\n      return channelId;\n    });\n  }\n\n  public inviteToChannel(id: ChatId, userIds: UserId[]) {\n    const input = this.getChannelInput(id);\n    const usersInputs = userIds.map(u => appUsersManager.getUserInput(u));\n\n    return apiManager.invokeApi('channels.inviteToChannel', {\n      channel: input,\n      users: usersInputs\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public createChat(title: string, userIds: UserId[]): Promise<ChatId> {\n    return apiManager.invokeApi('messages.createChat', {\n      users: userIds.map(u => appUsersManager.getUserInput(u)),\n      title\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n\n      const chatId = (updates as any as Updates.updates).chats[0].id;\n      rootScope.dispatchEvent('history_focus', {peerId: chatId.toPeerId(true)});\n\n      return chatId;\n    });\n  }\n\n  private onChatUpdated = (chatId: ChatId, updates?: any) => {\n    //console.log('onChatUpdated', chatId, updates);\n\n    apiUpdatesManager.processUpdateMessage(updates);\n    if(updates?.updates?.length && this.isChannel(chatId)) {\n      rootScope.dispatchEvent('invalidate_participants', chatId);\n    }\n  };\n\n  public leaveChannel(id: ChatId) {\n    return apiManager.invokeApi('channels.leaveChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public joinChannel(id: ChatId) {\n    return apiManager.invokeApi('channels.joinChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public addChatUser(id: ChatId, userId: UserId, fwdLimit = 100) {\n    return apiManager.invokeApi('messages.addChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId),\n      fwd_limit: fwdLimit\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChatUser(id: ChatId, userId: UserId) {\n    return apiManager.invokeApi('messages.deleteChatUser', {\n      chat_id: id,\n      user_id: appUsersManager.getUserInput(userId)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public leaveChat(id: ChatId) {\n    return this.deleteChatUser(id, appUsersManager.getSelf().id);\n  }\n\n  public leave(id: ChatId) {\n    return this.isChannel(id) ? this.leaveChannel(id) : this.leaveChat(id);\n  }\n\n  public delete(id: ChatId) {\n    return this.isChannel(id) ? this.deleteChannel(id) : this.deleteChat(id);\n  }\n\n  public deleteChannel(id: ChatId) {\n    return apiManager.invokeApi('channels.deleteChannel', {\n      channel: this.getChannelInput(id)\n    }).then(this.onChatUpdated.bind(this, id));\n  }\n\n  public deleteChat(id: ChatId) {\n    //return this.leaveChat(id).then(() => {\n      return apiManager.invokeApi('messages.deleteChat', {\n        chat_id: id\n      });\n    //});\n  }\n\n  public migrateChat(id: ChatId): Promise<ChatId> {\n    const chat: Chat = this.getChat(id);\n    if(chat._ === 'channel') return Promise.resolve(chat.id);\n    return apiManager.invokeApi('messages.migrateChat', {\n      chat_id: id\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n      const update: Update.updateChannel = (updates as Updates.updates).updates.find(u => u._ === 'updateChannel') as any;\n      return update.channel_id;\n    });\n  }\n\n  public updateUsername(id: ChatId, username: string) {\n    return apiManager.invokeApi('channels.updateUsername', {\n      channel: this.getChannelInput(id),\n      username\n    }).then((bool) => {\n      if(bool) {\n        const chat: Chat.channel = this.getChat(id);\n        chat.username = username;\n      }\n\n      return bool;\n    });\n  }\n\n  public editPhoto(id: ChatId, inputFile: InputFile) {\n    const inputChatPhoto: InputChatPhoto = {\n      _: 'inputChatUploadedPhoto',\n      file: inputFile\n    };\n\n    let promise: any;\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editPhoto', {\n        channel: this.getChannelInput(id),\n        photo: inputChatPhoto\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatPhoto', {\n        chat_id: id,\n        photo: inputChatPhoto\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editTitle(id: ChatId, title: string) {\n    let promise: any;\n\n    if(this.isChannel(id)) {\n      promise = apiManager.invokeApi('channels.editTitle', {\n        channel: this.getChannelInput(id),\n        title\n      });\n    } else {\n      promise = apiManager.invokeApi('messages.editChatTitle', {\n        chat_id: id,\n        title\n      });\n    }\n\n    return promise.then((updates: any) => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public editAbout(id: ChatId, about: string) {\n    const peerId = id.toPeerId(true);\n    return apiManager.invokeApi('messages.editChatAbout', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      about\n    }).then(bool => {\n      if(bool) {\n        rootScope.dispatchEvent('peer_bio_edit', peerId);\n      }\n\n      return bool;\n    });\n  }\n\n  public getParticipantPeerId(participant: ChannelParticipant | ChatParticipant): PeerId {\n    const peerId = (participant as ChannelParticipant.channelParticipantBanned).peer ? \n      appPeersManager.getPeerId((participant as ChannelParticipant.channelParticipantBanned).peer) : \n      (participant as ChatParticipant.chatParticipant).user_id.toPeerId();\n    return peerId;\n  }\n\n  public editBanned(id: ChatId, participant: PeerId | ChannelParticipant, banned_rights: ChatBannedRights) {\n    const peerId = typeof(participant) !== 'object' ? participant : this.getParticipantPeerId(participant);\n    return apiManager.invokeApi('channels.editBanned', {\n      channel: this.getChannelInput(id),\n      participant: appPeersManager.getInputPeerById(peerId),\n      banned_rights\n    }).then((updates) => {\n      this.onChatUpdated(id, updates);\n\n      if(typeof(participant) === 'object') {\n        const timestamp = Date.now() / 1000 | 0;\n        apiUpdatesManager.processLocalUpdate({\n          _: 'updateChannelParticipant',\n          channel_id: id,\n          date: timestamp,\n          actor_id: undefined,\n          qts: undefined,\n          user_id: peerId,\n          prev_participant: participant,\n          new_participant: Object.keys(banned_rights.pFlags).length ? {\n            _: 'channelParticipantBanned',\n            date: timestamp,\n            banned_rights,\n            kicked_by: appUsersManager.getSelf().id,\n            peer: appPeersManager.getOutputPeer(peerId),\n            pFlags: {}\n          } : undefined\n        });\n      }\n    });\n  }\n\n  public clearChannelParticipantBannedRights(id: ChatId, participant: PeerId | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {}\n    });\n  }\n  \n  public kickFromChannel(id: ChatId, participant: PeerId | ChannelParticipant) {\n    return this.editBanned(id, participant, {\n      _: 'chatBannedRights',\n      until_date: 0,\n      pFlags: {\n        view_messages: true\n      }\n    });\n  }\n\n  public kickFromChat(id: ChatId, participant: PeerId | ChannelParticipant) {\n    if(this.isChannel(id)) return this.kickFromChannel(id, participant);\n    else return this.deleteChatUser(id, (participant as PeerId).toUserId());\n  }\n\n  public resolveChannel(id: ChatId) {\n    return apiManager.invokeApiSingle('channels.getChannels', {\n      id: [{\n        _: 'inputChannel',\n        channel_id: id,\n        access_hash: '0'\n      }]\n    }).then(messagesChats => {\n      this.saveApiChats(messagesChats.chats);\n    });\n  }\n\n  public togglePreHistoryHidden(id: ChatId, enabled: boolean) {\n    return this.migrateChat(id).then(channelId => {\n      return apiManager.invokeApi('channels.togglePreHistoryHidden', {\n        channel: this.getChannelInput(channelId),\n        enabled\n      });\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public toggleSignatures(id: ChatId, enabled: boolean) {\n    return apiManager.invokeApi('channels.toggleSignatures', {\n      channel: this.getChannelInput(id),\n      enabled\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public toggleNoForwards(id: ChatId, enabled: boolean) {\n    return apiManager.invokeApi('messages.toggleNoForwards', {\n      peer: this.getInputPeer(id),\n      enabled\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public setChatAvailableReactions(id: ChatId, reactions: Array<string>) {\n    return apiManager.invokeApi('messages.setChatAvailableReactions', {\n      peer: this.getInputPeer(id),\n      available_reactions: reactions\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public isRestricted(chatId: ChatId) {\n    const chat: Chat.channel = this.getChat(chatId);\n    const restrictionReasons = chat.restriction_reason;\n\n    return !!(chat.pFlags.restricted && restrictionReasons && isRestricted(restrictionReasons));\n  }\n}\n\nconst appChatsManager = new AppChatsManager();\nMOUNT_CLASS_TO.appChatsManager = appChatsManager;\nexport default appChatsManager;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport appPeersManager from \"../lib/appManagers/appPeersManager\";\r\nimport rootScope from \"../lib/rootScope\";\r\nimport { i18n } from \"../lib/langPack\";\r\nimport replaceContent from \"../helpers/dom/replaceContent\";\r\nimport appUsersManager from \"../lib/appManagers/appUsersManager\";\r\nimport RichTextProcessor from \"../lib/richtextprocessor\";\r\nimport { NULL_PEER_ID } from \"../lib/mtproto/mtproto_config\";\r\n\r\nexport type PeerTitleOptions = {\r\n  peerId?: PeerId,\r\n  fromName?: string,\r\n  plainText?: boolean,\r\n  onlyFirstName?: boolean,\r\n  dialog?: boolean\r\n};\r\n\r\nconst weakMap: WeakMap<HTMLElement, PeerTitle> = new WeakMap();\r\n\r\nMOUNT_CLASS_TO.peerTitleWeakMap = weakMap;\r\n\r\nrootScope.addEventListener('peer_title_edit', (peerId) => {\r\n  const elements = Array.from(document.querySelectorAll(`.peer-title[data-peer-id=\"${peerId}\"]`)) as HTMLElement[];\r\n  elements.forEach(element => {\r\n    const peerTitle = weakMap.get(element);\r\n    //console.log('in the summer silence i was doing nothing', peerTitle, peerId);\r\n\r\n    if(peerTitle) {\r\n      peerTitle.update();\r\n    }\r\n  });\r\n});\r\n\r\nexport default class PeerTitle {\r\n  public element: HTMLElement;\r\n  public peerId: PeerId;\r\n  public fromName: string;\r\n  public plainText = false;\r\n  public onlyFirstName = false;\r\n  public dialog = false;\r\n\r\n  constructor(options: PeerTitleOptions) {\r\n    this.element = document.createElement('span');\r\n    this.element.classList.add('peer-title');\r\n    this.element.setAttribute('dir', 'auto');\r\n    \r\n    this.update(options);\r\n    weakMap.set(this.element, this);\r\n  }\r\n\r\n  public update(options?: PeerTitleOptions) {\r\n    if(options) {\r\n      for(let i in options) {\r\n        // @ts-ignore\r\n        this.element.dataset[i] = options[i] ? '' + (typeof(options[i]) === 'boolean' ? +options[i] : options[i]) : '0';\r\n        // @ts-ignore\r\n        this[i] = options[i];\r\n      }\r\n    }\r\n\r\n    if(this.fromName !== undefined) {\r\n      this.element.innerHTML = RichTextProcessor.wrapEmojiText(this.fromName);\r\n      return;\r\n    }\r\n\r\n    if(this.peerId === undefined) {\r\n      this.peerId = NULL_PEER_ID;\r\n    }\r\n\r\n    if(this.peerId !== rootScope.myId || !this.dialog) {\r\n      if(this.peerId.isUser() && appUsersManager.getUser(this.peerId).pFlags.deleted) {\r\n        replaceContent(this.element, i18n(this.onlyFirstName ? 'Deleted' : 'HiddenName'));\r\n      } else {\r\n        this.element.innerHTML = appPeersManager.getPeerTitle(this.peerId, this.plainText, this.onlyFirstName);\r\n      }\r\n    } else {\r\n      replaceContent(this.element, i18n(this.onlyFirstName ? 'Saved' : 'SavedMessages'));\r\n    }\r\n  }\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { DownloadOptions } from \"../mtproto/apiFileManager\";\nimport { bytesFromHex } from \"../../helpers/bytes\";\nimport { CancellablePromise } from \"../../helpers/cancellablePromise\";\nimport { getFileNameByLocation } from \"../../helpers/fileName\";\nimport { safeReplaceArrayInObject, isObject } from \"../../helpers/object\";\nimport { IS_SAFARI } from \"../../environment/userAgent\";\nimport { InputFileLocation, InputMedia, InputPhoto, Photo, PhotoSize, PhotosPhotos } from \"../../layer\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport referenceDatabase, { ReferenceContext } from \"../mtproto/referenceDatabase\";\nimport { MyDocument } from \"./appDocsManager\";\nimport appDownloadManager, { ThumbCache } from \"./appDownloadManager\";\nimport appUsersManager from \"./appUsersManager\";\nimport blur from \"../../helpers/blur\";\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { renderImageFromUrlPromise } from \"../../helpers/dom/renderImageFromUrl\";\nimport calcImageInBox from \"../../helpers/calcImageInBox\";\nimport { makeMediaSize, MediaSize } from \"../../helpers/mediaSizes\";\nimport windowSize from \"../../helpers/windowSize\";\n\nexport type MyPhoto = Photo.photo;\n\n// TIMES = 2 DUE TO SIDEBAR AND CHAT\n//let TEST_FILE_REFERENCE = \"5440692274120994569\", TEST_FILE_REFERENCE_TIMES = 2;\n\nexport class AppPhotosManager {\n  private photos: {\n    [id: string]: MyPhoto\n  } = {};\n\n  private static jpegHeader = bytesFromHex('ffd8ffe000104a46494600010100000100010000ffdb004300281c1e231e19282321232d2b28303c64413c37373c7b585d4964918099968f808c8aa0b4e6c3a0aadaad8a8cc8ffcbdaeef5ffffff9bc1fffffffaffe6fdfff8ffdb0043012b2d2d3c353c76414176f8a58ca5f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8f8ffc00011080000000003012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffda000c03010002110311003f00');\n  private static jpegTail = bytesFromHex('ffd9');\n  \n  public savePhoto(photo: Photo, context?: ReferenceContext) {\n    if(photo._ === 'photoEmpty') return undefined;\n\n    /* if(photo.id === TEST_FILE_REFERENCE) {\n      console.warn('Testing FILE_REFERENCE_EXPIRED');\n      const bytes = [2, 67, 175, 43, 190, 0, 0, 20, 62, 95, 111, 33, 45, 99, 220, 116, 218, 11, 167, 127, 213, 18, 127, 32, 243, 202, 117, 80, 30];\n      //photo.file_reference = new Uint8Array(bytes);\n      photo.file_reference = bytes;\n      if(!--TEST_FILE_REFERENCE_TIMES) {\n        TEST_FILE_REFERENCE = '';\n      }\n    } */\n\n    const oldPhoto = this.photos[photo.id];\n    if(photo.file_reference) { // * because we can have a new object w/o the file_reference while sending\n      safeReplaceArrayInObject('file_reference', oldPhoto, photo);\n      referenceDatabase.saveContext(photo.file_reference, context);\n    }\n\n    if(photo.sizes?.length) {\n      const size = photo.sizes[photo.sizes.length - 1];\n      if(size._ === 'photoSizeProgressive') {\n        size.size = size.sizes[size.sizes.length - 1];\n      }\n    }\n\n    if(oldPhoto) {\n      return Object.assign(oldPhoto, photo);\n    }\n\n    return this.photos[photo.id] = photo;\n  }\n  \n  public choosePhotoSize(photo: MyPhoto | MyDocument, boxWidth = 0, boxHeight = 0, useBytes = false, pushDocumentSize = false) {\n    if(window.devicePixelRatio > 1) {\n      boxWidth *= 2;\n      boxHeight *= 2;\n    }\n    \n    /*\n    s\tbox\t100x100\n    m\tbox\t320x320\n    x\tbox\t800x800\n    y\tbox\t1280x1280\n    w\tbox\t2560x2560\n    a\tcrop\t160x160\n    b\tcrop\t320x320\n    c\tcrop\t640x640\n    d\tcrop\t1280x1280 */\n\n    let bestPhotoSize: PhotoSize = {_: 'photoSizeEmpty', type: ''};\n    let sizes = (photo as MyPhoto).sizes || (photo as MyDocument).thumbs as PhotoSize[];\n    if(pushDocumentSize && sizes && photo._ === 'document') {\n      sizes = sizes.concat({\n        _: 'photoSize', \n        w: (photo as MyDocument).w, \n        h: (photo as MyDocument).h, \n        size: (photo as MyDocument).size, \n        type: undefined\n      });\n    }\n\n    if(sizes?.length) {\n      for(let i = 0, length = sizes.length; i < length; ++i) {\n        const photoSize = sizes[i];\n        if(!('w' in photoSize) && !('h' in photoSize)) continue;\n  \n        bestPhotoSize = photoSize;\n  \n        const size = calcImageInBox(photoSize.w, photoSize.h, boxWidth, boxHeight);\n        if(size.width >= boxWidth || size.height >= boxHeight) {\n          break;\n        }\n      }\n\n      if(useBytes && bestPhotoSize._ === 'photoSizeEmpty' && sizes[0]._ === 'photoStrippedSize') {\n        bestPhotoSize = sizes[0];\n      }\n    }\n    \n    return bestPhotoSize;\n  }\n  \n  public getUserPhotos(userId: UserId, maxId: Photo.photo['id'] = '0', limit: number = 20) {\n    const inputUser = appUsersManager.getUserInput(userId);\n    return apiManager.invokeApiCacheable('photos.getUserPhotos', {\n      user_id: inputUser,\n      offset: 0,\n      limit,\n      max_id: maxId\n    }, {cacheSeconds: 60}).then((photosResult) => {\n      appUsersManager.saveApiUsers(photosResult.users);\n      const photoIds = photosResult.photos.map((photo, idx) => {\n        photosResult.photos[idx] = this.savePhoto(photo, {type: 'profilePhoto', peerId: userId.toPeerId()});\n        return photo.id;\n      });\n\n      // ! WARNING !\n      if(maxId !== '0' && maxId) {\n        const idx = photoIds.indexOf(maxId);\n        if(idx !== -1) {\n          photoIds.splice(idx, 1);\n        }\n      }\n      \n      return {\n        count: (photosResult as PhotosPhotos.photosPhotosSlice).count || photoIds.length,\n        photos: photoIds\n      };\n    });\n  }\n\n  public getPreviewURLFromBytes(bytes: Uint8Array | number[], isSticker = false) {\n    let arr: Uint8Array;\n    if(!isSticker) {\n      arr = new Uint8Array(AppPhotosManager.jpegHeader.concat(Array.from(bytes.slice(3)), AppPhotosManager.jpegTail));\n      arr[164] = bytes[1];\n      arr[166] = bytes[2];\n    } else {\n      arr = bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes);\n    }\n\n    let mimeType: string;\n    if(isSticker) {\n      mimeType = IS_SAFARI ? 'image/png' : 'image/webp';\n    } else {\n      mimeType = 'image/jpeg';\n    }\n\n    const blob = new Blob([arr], {type: mimeType});\n    return URL.createObjectURL(blob);\n  }\n\n  /**\n   * https://core.telegram.org/api/files#vector-thumbnails\n   */\n  public getPathFromPhotoPathSize(size: PhotoSize.photoPathSize) {\n    const bytes = size.bytes;\n    const lookup = \"AACAAAAHAAALMAAAQASTAVAAAZaacaaaahaaalmaaaqastava.az0123456789-,\";\n\n    let path = 'M';\n    for(let i = 0, length = bytes.length; i < length; ++i) {\n      const num = bytes[i];\n\n      if(num >= (128 + 64)) {\n        path += lookup[num - 128 - 64];\n      } else {\n        if(num >= 128) {\n          path += ',';\n        } else if(num >= 64) {\n          path += '-'; \n        }\n        path += '' + (num & 63);\n      }\n    }\n    path += 'z';\n\n    return path;\n  }\n\n  public getPreviewURLFromThumb(photo: MyPhoto | MyDocument, thumb: PhotoSize.photoCachedSize | PhotoSize.photoStrippedSize, isSticker = false) {\n    const cacheContext = appDownloadManager.getCacheContext(photo, thumb.type);\n    return cacheContext.url || (cacheContext.url = this.getPreviewURLFromBytes(thumb.bytes, isSticker));\n  }\n  \n  public getImageFromStrippedThumb(photo: MyPhoto | MyDocument, thumb: PhotoSize.photoCachedSize | PhotoSize.photoStrippedSize, useBlur: boolean) {\n    const url = this.getPreviewURLFromThumb(photo, thumb, false);\n\n    const image = new Image();\n    image.classList.add('thumbnail');\n\n    const loadPromise = (useBlur ? blur(url) : Promise.resolve(url)).then(url => {\n      return renderImageFromUrlPromise(image, url);\n    });\n    \n    return {image, loadPromise};\n  }\n  \n  public setAttachmentSize(\n    photo: MyPhoto | MyDocument, \n    element: HTMLElement | SVGForeignObjectElement, \n    boxWidth: number, \n    boxHeight: number, \n    noZoom = true, \n    message?: any,\n    pushDocumentSize?: boolean,\n    photoSize?: ReturnType<AppPhotosManager['choosePhotoSize']>\n  ) {\n    if(!photoSize) {\n      photoSize = this.choosePhotoSize(photo, boxWidth, boxHeight, undefined, pushDocumentSize);\n    }\n    //console.log('setAttachmentSize', photo, photo.sizes[0].bytes, div);\n    \n    let size: MediaSize;\n    const isDocument = photo._ === 'document';\n    if(isDocument) {\n      size = makeMediaSize((photo as MyDocument).w || (photoSize as PhotoSize.photoSize).w || 512, (photo as MyDocument).h || (photoSize as PhotoSize.photoSize).h || 512);\n    } else {\n      size = makeMediaSize((photoSize as PhotoSize.photoSize).w || 100, (photoSize as PhotoSize.photoSize).h || 100);\n    }\n\n    let boxSize = makeMediaSize(boxWidth, boxHeight);\n\n    boxSize = size = size.aspect(boxSize, noZoom);\n\n    let isFit = true;\n\n    if(!isDocument || ['video', 'gif'].includes((photo as MyDocument).type)) {\n      if(boxSize.width < 200 && boxSize.height < 200) { // make at least one side this big\n        boxSize = size = size.aspectCovered(makeMediaSize(200, 200));\n      }\n  \n      if(message && \n        (message.message || \n          message.reply_to_mid || \n          message.media.webpage || \n          (message.replies && message.replies.pFlags.comments && message.replies.channel_id !== 777)\n        )\n      ) { // make sure that bubble block is human-readable\n        if(boxSize.width < 320) {\n          boxSize = makeMediaSize(320, boxSize.height);\n          isFit = false;\n        }\n      }\n  \n      if(isFit && boxSize.width < 120 && message) { // if image is too narrow\n        boxSize = makeMediaSize(120, boxSize.height);\n        isFit = false;\n      }\n    }\n\n    // if(element instanceof SVGForeignObjectElement) {\n    //   element.setAttributeNS(null, 'width', '' + w);\n    //   element.setAttributeNS(null, 'height', '' + h);\n\n    //   //console.log('set dimensions to svg element:', element, w, h);\n    // } else {\n      element.style.width = boxSize.width + 'px';\n      element.style.height = boxSize.height + 'px';\n    // }\n    \n    return {photoSize, size, isFit};\n  }\n\n  public getStrippedThumbIfNeeded(photo: MyPhoto | MyDocument, cacheContext: ThumbCache, useBlur: boolean, ignoreCache = false): ReturnType<AppPhotosManager['getImageFromStrippedThumb']> {\n    if(!cacheContext.downloaded || (['video', 'gif'] as MyDocument['type'][]).includes((photo as MyDocument).type) || ignoreCache) {\n      if(photo._ === 'document' && cacheContext.downloaded && !ignoreCache) {\n        return null;\n      }\n\n      const sizes = (photo as MyPhoto).sizes || (photo as MyDocument).thumbs;\n      const thumb = sizes?.length ? sizes.find(size => size._ === 'photoStrippedSize') : null;\n      if(thumb && ('bytes' in thumb)) {\n        return this.getImageFromStrippedThumb(photo, thumb as any, useBlur);\n      }\n    }\n\n    return null;\n  }\n  \n  public getPhotoDownloadOptions(photo: MyPhoto | MyDocument, photoSize: PhotoSize, queueId?: number, onlyCache?: boolean): DownloadOptions {\n    const isDocument = photo._ === 'document';\n\n    if(!photoSize || photoSize._ === 'photoSizeEmpty') {\n      //console.error('no photoSize by photo:', photo);\n      throw new Error('photoSizeEmpty!');\n    }\n    \n    // maybe it's a thumb\n    const isPhoto = (photoSize._ === 'photoSize' || photoSize._ === 'photoSizeProgressive') && photo.access_hash && photo.file_reference;\n    const location: InputFileLocation.inputPhotoFileLocation | InputFileLocation.inputDocumentFileLocation = {\n      _: isDocument ? 'inputDocumentFileLocation' : 'inputPhotoFileLocation',\n      id: photo.id,\n      access_hash: photo.access_hash,\n      file_reference: photo.file_reference,\n      thumb_size: photoSize.type\n    };\n\n    return {\n      dcId: photo.dc_id, \n      location, \n      size: isPhoto ? (photoSize as PhotoSize.photoSize).size : undefined, \n      queueId, \n      onlyCache\n    };\n  }\n\n  /* public getPhotoURL(photo: MTPhoto | MTMyDocument, photoSize: MTPhotoSize) {\n    const downloadOptions = this.getPhotoDownloadOptions(photo, photoSize);\n\n    return {url: getFileURL('photo', downloadOptions), location: downloadOptions.location};\n  } */\n\n  /* public isDownloaded(media: any) {\n    const isPhoto = media._ === 'photo';\n    const photo = isPhoto ? this.getPhoto(media.id) : null;\n    let isDownloaded: boolean;\n    if(photo) {\n      isDownloaded = photo.downloaded > 0;\n    } else {\n      const cachedThumb = this.getDocumentCachedThumb(media.id);\n      isDownloaded = cachedThumb?.downloaded > 0;\n    }\n\n    return isDownloaded;\n  } */\n  \n  public preloadPhoto(photoId: MyPhoto | MyDocument | string, photoSize?: PhotoSize, queueId?: number, onlyCache?: boolean): CancellablePromise<Blob> {\n    const photo = this.getPhoto(photoId);\n\n    // @ts-ignore\n    if(!photo || photo._ === 'photoEmpty') {\n      throw new Error('preloadPhoto photoEmpty!');\n    }\n\n    if(!photoSize) {\n      const fullWidth = windowSize.width;\n      const fullHeight = windowSize.height;\n      \n      photoSize = this.choosePhotoSize(photo, fullWidth, fullHeight);\n    }\n\n    const cacheContext = appDownloadManager.getCacheContext(photo, photoSize.type);\n    if(cacheContext.downloaded >= ('size' in photoSize ? photoSize.size : 0) && cacheContext.url) {\n      return Promise.resolve() as any;\n    }\n    \n    const downloadOptions = this.getPhotoDownloadOptions(photo, photoSize, queueId, onlyCache);\n    const fileName = getFileNameByLocation(downloadOptions.location);\n\n    let download = appDownloadManager.getDownload(fileName);\n    if(download) {\n      return download;\n    }\n\n    download = appDownloadManager.download(downloadOptions);\n    download.then(blob => {\n      if(!cacheContext.downloaded || cacheContext.downloaded < blob.size) {\n        const url = URL.createObjectURL(blob);\n        cacheContext.downloaded = blob.size;\n        cacheContext.url = url;\n\n        //console.log('wrote photo:', photo, photoSize, cacheContext, blob);\n      }\n\n      return blob;\n    }).catch(() => {});\n\n    return download;\n  }\n  \n  public getPhoto(photoId: any/* MyPhoto | string */): MyPhoto {\n    return isObject(photoId) ? photoId as MyPhoto : this.photos[photoId as any as string];\n  }\n\n  public getInput(photo: MyPhoto): InputPhoto.inputPhoto {\n    return {\n      _: 'inputPhoto',\n      id: photo.id,\n      access_hash: photo.access_hash,\n      file_reference: photo.file_reference\n    };\n  }\n\n  public getMediaInput(photo: MyPhoto): InputMedia.inputMediaPhoto {\n    return {\n      _: 'inputMediaPhoto',\n      id: this.getInput(photo),\n      ttl_seconds: 0\n    };\n  }\n\n  public savePhotoFile(photo: MyPhoto | MyDocument, queueId?: number) {\n    const fullPhotoSize = this.choosePhotoSize(photo, 0xFFFF, 0xFFFF);\n    if(!(fullPhotoSize._ === 'photoSize' || fullPhotoSize._ === 'photoSizeProgressive')) {\n      return;\n    }\n\n    const downloadOptions = this.getPhotoDownloadOptions(photo, fullPhotoSize, queueId);\n    downloadOptions.fileName = 'photo' + photo.id + '.jpg';\n    appDownloadManager.downloadToDisc(downloadOptions, downloadOptions.fileName);\n  }\n}\n\nconst appPhotosManager = new AppPhotosManager();\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.appPhotosManager = appPhotosManager);\nexport default appPhotosManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport { tsNow } from \"../../helpers/date\";\nimport { numberThousandSplitter } from \"../../helpers/number\";\nimport { ChannelParticipantsFilter, ChannelsChannelParticipants, ChannelParticipant, Chat, ChatFull, ChatParticipants, ChatPhoto, ExportedChatInvite, InputChannel, InputFile, SendMessageAction, Update, UserFull } from \"../../layer\";\nimport { LangPackKey, i18n } from \"../langPack\";\n//import apiManager from '../mtproto/apiManager';\nimport apiManager from '../mtproto/mtprotoworker';\nimport { RichTextProcessor } from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport SearchIndex from \"../searchIndex\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appMessagesIdsManager from \"./appMessagesIdsManager\";\nimport appNotificationsManager from \"./appNotificationsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appPhotosManager from \"./appPhotosManager\";\nimport appUsersManager, { MyTopPeer, User } from \"./appUsersManager\";\n\nexport type UserTyping = Partial<{userId: UserId, action: SendMessageAction, timeout: number}>;\n\nexport class AppProfileManager {\n  //private botInfos: any = {};\n  private usersFull: {[id: UserId]: UserFull.userFull} = {};\n  private chatsFull: {[id: ChatId]: ChatFull} = {};\n  private typingsInPeer: {[peerId: PeerId]: UserTyping[]};\n\n  constructor() {\n    rootScope.addMultipleEventsListeners({\n      updateChatParticipants: (update) => {\n        const participants = update.participants;\n        if(participants._ === 'chatParticipants') {\n          const chatId = participants.chat_id;\n          const chatFull = this.chatsFull[chatId] as ChatFull.chatFull;\n          if(chatFull !== undefined) {\n            chatFull.participants = participants;\n            rootScope.dispatchEvent('chat_full_update', chatId);\n          }\n        }\n      },\n\n      updateChatParticipantAdd: (update) => {\n        const chatFull = this.chatsFull[update.chat_id] as ChatFull.chatFull;\n        if(chatFull !== undefined) {\n          const _participants = chatFull.participants as ChatParticipants.chatParticipants;\n          const participants = _participants.participants || [];\n          for(let i = 0, length = participants.length; i < length; i++) {\n            if(participants[i].user_id === update.user_id) {\n              return;\n            }\n          }\n\n          participants.push({\n            _: 'chatParticipant',\n            user_id: update.user_id,\n            inviter_id: update.inviter_id,\n            date: tsNow(true)\n          });\n\n          _participants.version = update.version;\n          rootScope.dispatchEvent('chat_full_update', update.chat_id);\n        }\n      },\n\n      updateChatParticipantDelete: (update) => {\n        const chatFull = this.chatsFull[update.chat_id] as ChatFull.chatFull;\n        if(chatFull !== undefined) {\n          const _participants = chatFull.participants as ChatParticipants.chatParticipants;\n          const participants = _participants.participants || [];\n          for(let i = 0, length = participants.length; i < length; i++) {\n            if(participants[i].user_id === update.user_id) {\n              participants.splice(i, 1);\n              _participants.version = update.version;\n              rootScope.dispatchEvent('chat_full_update', update.chat_id);\n              return;\n            }\n          }\n        }\n      },\n\n      updateUserTyping: this.onUpdateUserTyping,\n      updateChatUserTyping: this.onUpdateUserTyping,\n      updateChannelUserTyping: this.onUpdateUserTyping,\n\n      updatePeerBlocked: this.onUpdatePeerBlocked\n    });\n\n    rootScope.addEventListener('chat_update', (chatId) => {\n      const fullChat = this.chatsFull[chatId];\n      const chat: Chat.chat | Chat.channel | Chat.chatForbidden | Chat.channelForbidden = appChatsManager.getChat(chatId);\n      if(!fullChat || !chat) {\n        return;\n      }\n\n      let updated = false;\n      if(!!fullChat.call !== !!(chat as Chat.chat).pFlags?.call_active) {\n        updated = true;\n      }\n\n      const {photo} = chat as Chat.chat;\n      if(photo) {\n        const hasChatPhoto = photo._ !== 'chatPhotoEmpty';\n        const hasFullChatPhoto = !!(fullChat.chat_photo && fullChat.chat_photo._ !== 'photoEmpty'); // chat_photo can be missing\n        if(hasChatPhoto !== hasFullChatPhoto || (photo as ChatPhoto.chatPhoto).photo_id !== fullChat.chat_photo?.id) {\n          updated = true;\n        }\n      }\n\n      if(updated) {\n        this.refreshFullPeer(chatId.toPeerId(true));\n      }\n    });\n\n    // * genius\n    rootScope.addEventListener('chat_full_update', (chatId) => {\n      rootScope.dispatchEvent('peer_full_update', chatId.toPeerId(true));\n    });\n    \n    // * genius\n    rootScope.addEventListener('user_full_update', (userId) => {\n      rootScope.dispatchEvent('peer_full_update', userId.toPeerId(false));\n    });\n\n    rootScope.addEventListener('invalidate_participants', (chatId) => {\n      this.invalidateChannelParticipants(chatId);\n    });\n\n    this.typingsInPeer = {};\n  }\n\n  /* public saveBotInfo(botInfo: any) {\n    const botId = botInfo && botInfo.user_id;\n    if(!botId) {\n      return null;\n    }\n\n    const commands: any = {};\n    botInfo.commands.forEach((botCommand: any) => {\n      commands[botCommand.command] = botCommand.description;\n    });\n\n    return this.botInfos[botId] = {\n      id: botId,\n      version: botInfo.version,\n      shareText: botInfo.share_text,\n      description: botInfo.description,\n      commands: commands\n    };\n  } */\n\n  public getProfile(id: UserId, override?: true) {\n    if(this.usersFull[id] && !override) {\n      return this.usersFull[id];\n    }\n\n    return apiManager.invokeApiSingleProcess({\n      method: 'users.getFullUser', \n      params: {\n        id: appUsersManager.getUserInput(id)\n      },\n      processResult: (usersUserFull) => {\n        appChatsManager.saveApiChats(usersUserFull.chats, true);\n        appUsersManager.saveApiUsers(usersUserFull.users);\n\n        const userFull = usersUserFull.full_user;\n        const peerId = id.toPeerId(false);\n        if(userFull.profile_photo) {\n          userFull.profile_photo = appPhotosManager.savePhoto(userFull.profile_photo, {type: 'profilePhoto', peerId});\n        }\n\n        appNotificationsManager.savePeerSettings({\n          peerId, \n          settings: userFull.notify_settings\n        });\n\n        this.usersFull[id] = userFull;\n\n        /* if(userFull.bot_info) {\n          userFull.bot_info = this.saveBotInfo(userFull.bot_info) as any;\n        } */\n\n        //appMessagesManager.savePinnedMessage(id, userFull.pinned_msg_id);\n\n        rootScope.dispatchEvent('user_full_update', id);\n        return userFull;\n      }\n    });\n  }\n\n  public getProfileByPeerId(peerId: PeerId, override?: true) {\n    if(appPeersManager.isAnyChat(peerId)) return this.getChatFull(peerId.toChatId(), override);\n    else return this.getProfile(peerId.toUserId(), override);\n  }\n\n  public getCachedFullChat(chatId: ChatId) {\n    return this.chatsFull[chatId];\n  }\n\n  public getCachedFullUser(userId: UserId) {\n    return this.usersFull[userId];\n  }\n\n  public getCachedProfileByPeerId(peerId: PeerId) {\n    return peerId.isUser() ? this.getCachedFullUser(peerId.toUserId()) : this.getCachedFullChat(peerId.toChatId());\n  }\n\n  public async getFullPhoto(peerId: PeerId) {\n    const profile = await this.getProfileByPeerId(peerId);\n    switch(profile._) {\n      case 'userFull':\n        return profile.profile_photo;\n      case 'channelFull':\n      case 'chatFull':\n        return profile.chat_photo;\n    }\n  }\n\n  /* public getPeerBots(peerId: PeerId) {\n    var peerBots: any[] = [];\n    if(peerId >= 0 && !appUsersManager.isBot(peerId) ||\n      (appPeersManager.isChannel(peerId) && !appPeersManager.isMegagroup(peerId))) {\n      return Promise.resolve(peerBots);\n    }\n    if(peerId >= 0) {\n      return this.getProfile(peerId).then((userFull: any) => {\n        var botInfo = userFull.bot_info;\n        if(botInfo && botInfo._ !== 'botInfoEmpty') {\n          peerBots.push(botInfo);\n        }\n        return peerBots;\n      });\n    }\n\n    return this.getChatFull(peerId.toChatId()).then((chatFull: any) => {\n      chatFull.bot_info.forEach((botInfo: any) => {\n        peerBots.push(this.saveBotInfo(botInfo))\n      });\n      return peerBots;\n    });\n  } */\n\n  public getChatFull(id: ChatId, override?: true) {\n    if(appChatsManager.isChannel(id)) {\n      return this.getChannelFull(id, override);\n    }\n\n    const fullChat = this.chatsFull[id] as ChatFull.chatFull;\n    if(fullChat && !override) {\n      const chat = appChatsManager.getChat(id);\n      if(chat.version === (fullChat.participants as ChatParticipants.chatParticipants).version ||\n        chat.pFlags.left) {\n        return fullChat as ChatFull;\n      }\n    }\n    \n    return apiManager.invokeApiSingleProcess({\n      method: 'messages.getFullChat', \n      params: {\n        chat_id: id\n      },\n      processResult: (result) => {\n        appChatsManager.saveApiChats(result.chats, true);\n        appUsersManager.saveApiUsers(result.users);\n        const fullChat = result.full_chat as ChatFull.chatFull;\n        const peerId = id.toPeerId(true);\n        if(fullChat && fullChat.chat_photo && fullChat.chat_photo.id) {\n          fullChat.chat_photo = appPhotosManager.savePhoto(fullChat.chat_photo, {type: 'profilePhoto', peerId});\n        }\n\n        //appMessagesManager.savePinnedMessage(peerId, fullChat.pinned_msg_id);\n        appNotificationsManager.savePeerSettings({\n          peerId, \n          settings: fullChat.notify_settings\n        });\n        \n        this.chatsFull[id] = fullChat;\n        rootScope.dispatchEvent('chat_full_update', id);\n\n        return fullChat;\n      }\n    });\n  }\n\n  public async getChatInviteLink(id: ChatId, force?: boolean) {\n    const chatFull = await this.getChatFull(id);\n    if(!force &&\n      chatFull.exported_invite &&\n      chatFull.exported_invite._ == 'chatInviteExported') {\n      return chatFull.exported_invite.link;\n    }\n    \n    return apiManager.invokeApi('messages.exportChatInvite', {\n      peer: appPeersManager.getInputPeerById(id.toPeerId(true))\n    }).then((exportedInvite) => {\n      if(this.chatsFull[id] !== undefined) {\n        this.chatsFull[id].exported_invite = exportedInvite;\n      }\n\n      return (exportedInvite as ExportedChatInvite.chatInviteExported).link;\n    });\n  }\n\n  public getChannelParticipants(id: ChatId, filter: ChannelParticipantsFilter = {_: 'channelParticipantsRecent'}, limit = 200, offset = 0) {\n    if(filter._ === 'channelParticipantsRecent') {\n      const chat = appChatsManager.getChat(id);\n      if(chat &&\n          chat.pFlags && (\n            chat.pFlags.kicked ||\n            chat.pFlags.broadcast && !chat.pFlags.creator && !chat.admin_rights\n          )) {\n        return Promise.reject();\n      }\n    }\n\n    return apiManager.invokeApiCacheable('channels.getParticipants', {\n      channel: appChatsManager.getChannelInput(id),\n      filter,\n      offset,\n      limit,\n      hash: '0'\n    }, {cacheSeconds: 60}).then(result => {\n      appUsersManager.saveApiUsers((result as ChannelsChannelParticipants.channelsChannelParticipants).users);\n      return result as ChannelsChannelParticipants.channelsChannelParticipants;\n    });\n    /* let maybeAddSelf = (participants: any[]) => {\n      let chat = appChatsManager.getChat(id);\n      let selfMustBeFirst = filter._ === 'channelParticipantsRecent' &&\n                            !offset &&\n                            !chat.pFlags.kicked &&\n                            !chat.pFlags.left;\n\n      if(selfMustBeFirst) {\n        participants = copy(participants);\n        let myID = appUsersManager.getSelf().id;\n        let myIndex = participants.findIndex(p => p.user_id === myID);\n        let myParticipant;\n\n        if(myIndex !== -1) {\n          myParticipant = participants[myIndex];\n          participants.splice(myIndex, 1);\n        } else {\n          myParticipant = {_: 'channelParticipantSelf', user_id: myID};\n        }\n\n        participants.unshift(myParticipant);\n      }\n\n      return participants;\n    } */\n  }\n\n  public getChannelParticipant(id: ChatId, peerId: PeerId) {\n    return apiManager.invokeApiSingle('channels.getParticipant', {\n      channel: appChatsManager.getChannelInput(id),\n      participant: appPeersManager.getInputPeerById(peerId),\n    }).then(channelParticipant => {\n      appUsersManager.saveApiUsers(channelParticipant.users);\n      return channelParticipant.participant;\n    });\n  }\n\n  public getChannelFull(id: ChatId, override?: true) {\n    if(this.chatsFull[id] !== undefined && !override) {\n      return this.chatsFull[id] as ChatFull.channelFull;\n    }\n\n    return apiManager.invokeApiSingleProcess({\n      method: 'channels.getFullChannel', \n      params: {\n        channel: appChatsManager.getChannelInput(id)\n      }, \n      processResult: (result) => {\n        const peerId = id.toPeerId(true);\n        appChatsManager.saveApiChats(result.chats, true);\n        appUsersManager.saveApiUsers(result.users);\n        const fullChannel = result.full_chat as ChatFull.channelFull;\n        if(fullChannel && fullChannel.chat_photo.id) {\n          fullChannel.chat_photo = appPhotosManager.savePhoto(fullChannel.chat_photo, {type: 'profilePhoto', peerId});\n          //appPhotosManager.savePhoto(fullChannel.chat_photo);\n        }\n        appNotificationsManager.savePeerSettings({\n          peerId, \n          settings: fullChannel.notify_settings\n        });\n\n        this.chatsFull[id] = fullChannel;\n        rootScope.dispatchEvent('chat_full_update', id);\n\n        return fullChannel;\n      }, \n      processError: (error) => {\n        switch(error.type) {\n          case 'CHANNEL_PRIVATE':\n            let channel = appChatsManager.getChat(id);\n            channel = {_: 'channelForbidden', access_hash: channel.access_hash, title: channel.title};\n            apiUpdatesManager.processUpdateMessage({\n              _: 'updates',\n              updates: [{\n                _: 'updateChannel',\n                channel_id: id\n              } as Update.updateChannel],\n              chats: [channel],\n              users: []\n            });\n            break;\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  public getMentions(chatId: ChatId, query: string, threadId?: number): Promise<PeerId[]> {\n    const processUserIds = (topPeers: MyTopPeer[]) => {\n      const startsWithAt = query.charAt(0) === '@';\n      if(startsWithAt) query = query.slice(1);\n      /* const startsWithAt = query.charAt(0) === '@';\n      if(startsWithAt) query = query.slice(1);\n      \n      const index = new SearchIndex<number>(!startsWithAt, !startsWithAt); */\n      const index = new SearchIndex<PeerId>({\n        ignoreCase: true\n      });\n\n      const ratingMap: Map<PeerId, number> = new Map();\n      topPeers.forEach(peer => {\n        index.indexObject(peer.id, appUsersManager.getUserSearchText(peer.id));\n        ratingMap.set(peer.id, peer.rating);\n      });\n\n      const peerIds = Array.from(index.search(query));\n      peerIds.sort((a, b) => ratingMap.get(b) - ratingMap.get(a));\n      return peerIds;\n    };\n\n    let promise: Promise<PeerId[]>;\n    if(appChatsManager.isChannel(chatId)) {\n      promise = this.getChannelParticipants(chatId, {\n        _: 'channelParticipantsMentions',\n        q: query,\n        top_msg_id: appMessagesIdsManager.getServerMessageId(threadId)\n      }, 50, 0).then(cP => {\n        return cP.participants.map(p => appChatsManager.getParticipantPeerId(p));\n      });\n    } else if(chatId) {\n      promise = Promise.resolve(this.getChatFull(chatId)).then(chatFull => {\n        return ((chatFull as ChatFull.chatFull).participants as ChatParticipants.chatParticipants).participants.map(p => p.user_id.toPeerId());\n      });\n    } else {\n      promise = Promise.resolve([]);\n    }\n\n    return Promise.all([\n      // [],\n      appUsersManager.getTopPeers('bots_inline').catch(() => [] as MyTopPeer[]), \n      promise\n    ]).then(results => {\n      const peers = results[0].concat(results[1].map(peerId => ({id: peerId, rating: 0})));\n\n      return processUserIds(peers);\n    });\n  }\n\n  public invalidateChannelParticipants(id: ChatId) {\n    apiManager.clearCache('channels.getParticipants', (params) => (params.channel as InputChannel.inputChannel).channel_id === id);\n    this.refreshFullPeer(id.toPeerId(true));\n  }\n\n  private refreshFullPeer(peerId: PeerId) {\n    if(peerId.isUser()) delete this.usersFull[peerId.toUserId()];\n    else delete this.chatsFull[peerId.toChatId()];\n\n    rootScope.dispatchEvent('peer_full_update', peerId);\n\n    // ! эта строчка будет создавать race condition:\n    // ! запрос вернёт chat с установленным флагом call_not_empty, хотя сам апдейт уже будет применён\n    // this.getProfileByPeerId(peerId, true);\n  }\n\n  public updateProfile(first_name: string, last_name: string, about: string) {\n    return apiManager.invokeApi('account.updateProfile', {\n      first_name,\n      last_name,\n      about\n    }).then(user => {\n      appUsersManager.saveApiUser(user);\n      \n      return this.getProfile(rootScope.myId, true);\n    });\n  }\n\n  public uploadProfilePhoto(inputFile: InputFile) {\n    return apiManager.invokeApi('photos.uploadProfilePhoto', {\n      file: inputFile\n    }).then((updateResult) => {\n      appUsersManager.saveApiUsers(updateResult.users);\n\n      const myId = rootScope.myId;\n      appPhotosManager.savePhoto(updateResult.photo, {\n        type: 'profilePhoto',\n        peerId: myId\n      });\n\n      const userId = myId.toUserId();\n      apiUpdatesManager.processLocalUpdate({\n        _: 'updateUserPhoto',\n        user_id: userId,\n        date: tsNow(true),\n        photo: appUsersManager.getUser(userId).photo,\n        previous: true\n      });\n    });\n  }\n\n  public deletePhotos(photoIds: string[]) {\n    return apiManager.invokeApiSingle('photos.deletePhotos', {\n      id: photoIds.map(photoId => {\n        const photo = appPhotosManager.getPhoto(photoId);\n        return appPhotosManager.getInput(photo);\n      })\n    }).then((deletedList) => {\n      \n    });\n  }\n\n  public getChatMembersString(chatId: ChatId) {\n    const chat: Chat = appChatsManager.getChat(chatId);\n    if(chat._ === 'chatForbidden') {\n      return i18n('YouWereKicked');\n    }\n\n    const chatFull = this.chatsFull[chatId];\n    let count: number;\n    if(chatFull) {\n      if(chatFull._ === 'channelFull') {\n        count = chatFull.participants_count;\n      } else {\n        count = (chatFull.participants as ChatParticipants.chatParticipants).participants?.length;\n      }\n    } else {\n      count = (chat as Chat.chat).participants_count || (chat as any).participants?.participants.length;\n    }\n\n    const isChannel = appChatsManager.isBroadcast(chatId);\n    count = count || 1;\n\n    let key: LangPackKey = isChannel ? 'Peer.Status.Subscribers' : 'Peer.Status.Member';\n    return i18n(key, [numberThousandSplitter(count)]);\n  }\n\n  private verifyParticipantForOnlineCount(participant: {user_id: UserId}) {\n    const user = appUsersManager.getUser(participant.user_id);\n    return !!(user && user.status && user.status._ === 'userStatusOnline');\n  }\n\n  private reduceParticipantsForOnlineCount(participants: {user_id: UserId}[]) {\n    return participants.reduce((acc, participant) => {\n      return acc + +this.verifyParticipantForOnlineCount(participant);\n    }, 0);\n  }\n\n  public async getOnlines(id: ChatId): Promise<number> {\n    const minOnline = 1;\n    if(appChatsManager.isBroadcast(id)) {\n      return minOnline;\n    }\n    \n    const chatInfo = await this.getChatFull(id);\n    if(appChatsManager.isMegagroup(id)) {\n      if((chatInfo as ChatFull.channelFull).participants_count <= 100) {\n        const channelParticipants = await this.getChannelParticipants(id, {_: 'channelParticipantsRecent'}, 100);\n        return this.reduceParticipantsForOnlineCount(channelParticipants.participants as ChannelParticipant.channelParticipant[]);\n      }\n\n      const res = await apiManager.invokeApiCacheable('messages.getOnlines', {\n        peer: appChatsManager.getChannelInputPeer(id)\n      }, {cacheSeconds: 60});\n\n      const onlines = res.onlines ?? minOnline;\n      return onlines;\n    }\n\n    const _participants = (chatInfo as ChatFull.chatFull).participants as ChatParticipants.chatParticipants;\n    if(_participants?.participants) {\n      return this.reduceParticipantsForOnlineCount(_participants.participants);\n    } else {\n      return minOnline;\n    }\n  }\n\n  private onUpdateUserTyping = (update: Update.updateUserTyping | Update.updateChatUserTyping | Update.updateChannelUserTyping) => {\n    const fromId = (update as Update.updateUserTyping).user_id ? \n      (update as Update.updateUserTyping).user_id.toPeerId() : \n      appPeersManager.getPeerId((update as Update.updateChatUserTyping).from_id);\n    if(rootScope.myId === fromId || update.action._ === 'speakingInGroupCallAction') {\n      return;\n    }\n    \n    const peerId = appPeersManager.getPeerId(update);\n    const typings = this.typingsInPeer[peerId] ?? (this.typingsInPeer[peerId] = []);\n    let typing = typings.find(t => t.userId === fromId);\n\n    const cancelAction = () => {\n      delete typing.timeout;\n      //typings.findAndSplice(t => t === typing);\n      const idx = typings.indexOf(typing);\n      if(idx !== -1) {\n        typings.splice(idx, 1);\n      }\n\n      rootScope.dispatchEvent('peer_typings', {peerId, typings});\n\n      if(!typings.length) {\n        delete this.typingsInPeer[peerId];\n      }\n    };\n\n    if(typing && typing.timeout !== undefined) {\n      clearTimeout(typing.timeout);\n    }\n\n    if(update.action._ === 'sendMessageCancelAction') {\n      if(!typing) {\n        return;\n      }\n\n      cancelAction();\n      return;\n    }\n\n    if(!typing) {\n      typing = {\n        userId: fromId\n      };\n\n      typings.push(typing);\n    }\n\n    //console.log('updateChatUserTyping', update, typings);\n    \n    typing.action = update.action;\n    \n    const hasUser = appUsersManager.hasUser(fromId);\n    if(!hasUser) {\n      // let's load user here\n      if(update._ === 'updateChatUserTyping') {\n        if(update.chat_id && appChatsManager.hasChat(update.chat_id) && !appChatsManager.isChannel(update.chat_id)) {\n          Promise.resolve(this.getChatFull(update.chat_id)).then(() => {\n            if(typing.timeout !== undefined && appUsersManager.hasUser(fromId)) {\n              rootScope.dispatchEvent('peer_typings', {peerId, typings});\n            }\n          });\n        }\n      }\n      \n      //return;\n    } else {\n      appUsersManager.forceUserOnline(fromId);\n    }\n\n    typing.timeout = window.setTimeout(cancelAction, 6000);\n    if(hasUser) {\n      rootScope.dispatchEvent('peer_typings', {peerId, typings});\n    }\n  };\n\n  private onUpdatePeerBlocked = (update: Update.updatePeerBlocked) => {\n    const peerId = appPeersManager.getPeerId(update.peer_id);\n    if(appPeersManager.isUser(peerId)) {\n      const userId = peerId.toUserId();\n      const userFull = this.usersFull[userId];\n      if(userFull) {\n        if(update.blocked) userFull.pFlags.blocked = true;\n        else delete userFull.pFlags.blocked;\n      }\n\n      rootScope.dispatchEvent('user_full_update', userId);\n    }\n\n    rootScope.dispatchEvent('peer_block', {peerId, blocked: update.blocked});\n  };\n\n  public getPeerTypings(peerId: PeerId) {\n    return this.typingsInPeer[peerId];\n  }\n}\n\nconst appProfileManager = new AppProfileManager();\nMOUNT_CLASS_TO.appProfileManager = appProfileManager;\nexport default appProfileManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { Document, InputFileLocation, InputStickerSet, MessagesAllStickers, MessagesFeaturedStickers, MessagesFoundStickerSets, MessagesRecentStickers, MessagesStickers, MessagesStickerSet, PhotoSize, StickerPack, StickerSet, StickerSetCovered } from '../../layer';\nimport { Modify } from '../../types';\nimport apiManager from '../mtproto/mtprotoworker';\nimport rootScope from '../rootScope';\nimport appDocsManager, { MyDocument } from './appDocsManager';\nimport AppStorage from '../storage';\nimport { MOUNT_CLASS_TO } from '../../config/debug';\nimport { forEachReverse } from '../../helpers/array';\nimport DATABASE_STATE from '../../config/databases/state';\nimport lottieLoader from '../rlottie/lottieLoader';\nimport mediaSizes from '../../helpers/mediaSizes';\nimport { getEmojiToneIndex } from '../../vendor/emoji';\nimport RichTextProcessor from '../richtextprocessor';\nimport assumeType from '../../helpers/assumeType';\nimport fixBase64String from '../../helpers/fixBase64String';\nimport IS_WEBM_SUPPORTED from '../../environment/webmSupport';\n\nconst CACHE_TIME = 3600e3;\n\nconst EMOJI_SET_LOCAL_ID = 'emoji';\nconst EMOJI_ANIMATIONS_SET_LOCAL_ID = 'emojiAnimations';\nconst LOCAL_IDS_SET = new Set([\n  EMOJI_SET_LOCAL_ID,\n  EMOJI_ANIMATIONS_SET_LOCAL_ID\n]);\n\n// let TEST_FILE_REFERENCE_REFRESH = true;\n\nexport type MyStickerSetInput = {\n  id: StickerSet.stickerSet['id'],\n  access_hash?: StickerSet.stickerSet['access_hash']\n};\n\nexport type MyMessagesStickerSet = MessagesStickerSet.messagesStickerSet;\n\nexport class AppStickersManager {\n  private storage = new AppStorage<Record<Long, MyMessagesStickerSet>, typeof DATABASE_STATE>(DATABASE_STATE, 'stickerSets');\n\n  private getStickerSetPromises: {[setId: Long]: Promise<MyMessagesStickerSet>};\n  private getStickersByEmoticonsPromises: {[emoticon: string]: Promise<Document[]>};\n\n  private greetingStickers: Document.document[];\n  private getGreetingStickersTimeout: number;\n  private getGreetingStickersPromise: Promise<void>;\n\n  private sounds: Record<string, MyDocument>;\n  private getAnimatedEmojiSoundsPromise: Promise<void>;\n  \n  constructor() {\n    this.getStickerSetPromises = {};\n    this.getStickersByEmoticonsPromises = {};    \n    this.sounds = {};\n\n    this.getAnimatedEmojiStickerSet();\n\n    rootScope.addMultipleEventsListeners({\n      updateNewStickerSet: (update) => {\n        const stickerSet = update.stickerset as MyMessagesStickerSet;\n        this.saveStickerSet(stickerSet, stickerSet.set.id);\n        rootScope.dispatchEvent('stickers_installed', stickerSet.set);\n      }\n    });\n\n    this.getGreetingStickersTimeout = window.setTimeout(() => {\n      this.getGreetingStickersTimeout = undefined;\n      this.getGreetingSticker(true);\n    }, 5000);\n  }\n\n  public getGreetingSticker(justPreload = false) {\n    if(this.getGreetingStickersTimeout) {\n      clearTimeout(this.getGreetingStickersTimeout);\n      this.getGreetingStickersTimeout = undefined;\n    }\n\n    if(!this.getGreetingStickersPromise) {\n      this.getGreetingStickersPromise = this.getStickersByEmoticon('👋⭐️', false).then(docs => {\n        if(!docs.length) throw 'NO_STICKERS';\n        this.greetingStickers = docs.slice() as Document.document[];\n        this.greetingStickers.sort((a, b) => Math.random() - Math.random());\n      });\n    }\n    \n    return this.getGreetingStickersPromise.then(() => {\n      let doc: Document.document;\n      if(!justPreload) {\n        doc = this.greetingStickers.shift();\n        this.greetingStickers.push(doc);\n      }\n\n      appDocsManager.downloadDoc(this.greetingStickers[0]); // preload next sticker\n\n      return doc;\n    });\n  }\n\n  public saveStickers(docs: Document[]) {\n    forEachReverse(docs, (doc, idx) => {\n      doc = appDocsManager.saveDoc(doc);\n\n      if(!doc) docs.splice(idx, 1);\n      else docs[idx] = doc;\n    });\n  }\n\n  public async getStickerSet(set: MyStickerSetInput, params: Partial<{\n    overwrite: boolean,\n    useCache: boolean,\n    saveById: boolean\n  }> = {}): Promise<MyMessagesStickerSet> {\n    const id = set.id;\n    if(this.getStickerSetPromises[id]) {\n      return this.getStickerSetPromises[id];\n    }\n\n    return this.getStickerSetPromises[id] = new Promise(async(resolve) => {\n      if(!params.overwrite) {\n        // const perf = performance.now();\n        const cachedSet = await this.storage.get(id);\n        if(cachedSet && cachedSet.documents?.length && ((Date.now() - cachedSet.refreshTime) < CACHE_TIME || params.useCache)) {\n          this.saveStickers(cachedSet.documents);\n          resolve(cachedSet);\n          delete this.getStickerSetPromises[id];\n          // console.log('get sticker set from cache time', id, performance.now() - perf);\n          return;\n        }\n      }\n\n      try {\n        const stickerSet = await apiManager.invokeApi('messages.getStickerSet', {\n          stickerset: this.getStickerSetInput(set),\n          hash: 0\n        }) as MyMessagesStickerSet;\n  \n        const saveById = params.saveById ? id : stickerSet.set.id;\n        this.saveStickerSet(stickerSet, saveById);\n  \n        resolve(stickerSet);\n      } catch(err) {\n        resolve(null);\n      }\n      \n      delete this.getStickerSetPromises[id];\n    });\n  }\n\n  public getAnimatedEmojiStickerSet() {\n    return Promise.all([\n      this.getStickerSet({id: EMOJI_SET_LOCAL_ID}, {saveById: true}),\n      this.getStickerSet({id: EMOJI_ANIMATIONS_SET_LOCAL_ID}, {saveById: true}),\n      this.getAnimatedEmojiSounds()\n    ]).then(([emoji, animations]) => {\n      return {emoji, animations};\n    });\n  }\n\n  public getAnimatedEmojiSounds(overwrite?: boolean) {\n    if(this.getAnimatedEmojiSoundsPromise && !overwrite) return this.getAnimatedEmojiSoundsPromise;\n    const promise = this.getAnimatedEmojiSoundsPromise = Promise.resolve(apiManager.getAppConfig(overwrite)).then(appConfig => {\n      if(this.getAnimatedEmojiSoundsPromise !== promise) {\n        return;\n      }\n\n      for(const emoji in appConfig.emojies_sounds) {\n        const sound = appConfig.emojies_sounds[emoji];\n        const bytesStr = atob(fixBase64String(sound.file_reference_base64, false));\n        const bytes = new Uint8Array(bytesStr.length);\n        for(let i = 0, length = bytes.length; i < length; ++i) {\n          bytes[i] = bytesStr[i].charCodeAt(0);\n        }\n\n        // if(TEST_FILE_REFERENCE_REFRESH) {\n        //   bytes[0] = bytes[1] = bytes[2] = bytes[3] = bytes[4] = 0;\n        //   sound.access_hash += '999';\n        // }\n        \n        const doc = appDocsManager.saveDoc({\n          _: 'document',\n          pFlags: {},\n          flags: 0,\n          id: sound.id,\n          access_hash: sound.access_hash,\n          attributes: [{\n            _: 'documentAttributeAudio',\n            duration: 1,\n            pFlags: {\n              voice: true\n            }\n          }],\n          date: 0,\n          dc_id: rootScope.config.this_dc,\n          file_reference: bytes,\n          mime_type: 'audio/ogg',\n          size: 1\n          // size: 101010 // test loading everytime\n        }, {\n          type: 'emojiesSounds'\n        });\n\n        this.sounds[emoji] = doc;\n      }\n\n      // if(TEST_FILE_REFERENCE_REFRESH) {\n      //   TEST_FILE_REFERENCE_REFRESH = false;\n      // }\n    });\n\n    return promise;\n  }\n\n  public async getRecentStickers(): Promise<Modify<MessagesRecentStickers.messagesRecentStickers, {\n    stickers: Document[]\n  }>> {\n    const res = await apiManager.invokeApiHashable({\n      method: 'messages.getRecentStickers',\n      processResult: (res) => {\n        assumeType<MessagesRecentStickers.messagesRecentStickers>(res);\n\n        this.saveStickers(res.stickers);\n        return res;\n      }\n    });\n\n    return res;\n  }\n\n  private cleanEmoji(emoji: string) {\n    return emoji.replace(/\\ufe0f/g, '').replace(/🏻|🏼|🏽|🏾|🏿/g, '');\n  }\n\n  public getAnimatedEmojiSticker(emoji: string, isAnimation?: boolean) {\n    const stickerSet = this.storage.getFromCache(isAnimation ? EMOJI_ANIMATIONS_SET_LOCAL_ID : EMOJI_SET_LOCAL_ID);\n    if(!stickerSet || !stickerSet.documents) return undefined;\n\n    if(isAnimation) {\n      if(['🧡', '💛', '💚', '💙', '💜', '🖤', '🤍', '🤎'].includes(emoji)) {\n        emoji = '❤️';\n      }\n    }\n\n    emoji = this.cleanEmoji(emoji);\n    const pack = stickerSet.packs.find(p => p.emoticon === emoji);\n    return pack ? appDocsManager.getDoc(pack.documents[0]) : undefined;\n  }\n\n  public getAnimatedEmojiSoundDocument(emoji: string) {\n    return this.sounds[this.cleanEmoji(emoji)];\n  }\n\n  public preloadAnimatedEmojiSticker(emoji: string, width?: number, height?: number) {\n    const preloadEmojiPromise = this.getAnimatedEmojiStickerSet().then(() => {\n      const doc = this.getAnimatedEmojiSticker(emoji);\n      if(doc) {\n        return appDocsManager.downloadDoc(doc)\n        .then(async(blob) => {\n          const mediaSize = mediaSizes.active.emojiSticker;\n          const toneIndex = getEmojiToneIndex(emoji);\n          const animation = await lottieLoader.loadAnimationWorker({\n            container: undefined,\n            animationData: blob,\n            width: width ?? mediaSize.width,\n            height: height ?? mediaSize.height,\n            name: 'doc' + doc.id,\n            autoplay: false,\n            loop: false,\n            toneIndex\n          }, 'none');\n\n          animation.addEventListener('firstFrame', () => {\n            appDocsManager.saveLottiePreview(doc, animation.canvas, toneIndex);\n            animation.remove();\n          }, {once: true});\n        });\n      }\n    });\n    \n    return Promise.all([\n      preloadEmojiPromise,\n      this.preloadAnimatedEmojiStickerAnimation(emoji)\n    ]);\n  }\n\n  public preloadAnimatedEmojiStickerAnimation(emoji: string) {\n    return this.getAnimatedEmojiStickerSet().then(() => {\n      const doc = this.getAnimatedEmojiSticker(emoji, true);\n      if(doc) {\n        const soundDoc = this.getAnimatedEmojiSoundDocument(emoji);\n        return Promise.all([\n          appDocsManager.downloadDoc(doc),\n          soundDoc ? appDocsManager.downloadDoc(soundDoc) : undefined\n        ]);\n      }\n    });\n  }\n  \n  public saveStickerSet(res: Omit<MessagesStickerSet.messagesStickerSet, '_'>, id: DocId) {\n    //console.log('stickers save set', res);w\n\n    const newSet: MessagesStickerSet = {\n      _: 'messages.stickerSet',\n      set: res.set,\n      packs: res.packs,\n      documents: res.documents as Document[]\n    };\n    \n    let stickerSet = this.storage.getFromCache(id);\n    if(stickerSet) {\n      Object.assign(stickerSet, newSet);\n    } else {\n      stickerSet = this.storage.setToCache(id, newSet);\n    }\n\n    this.saveStickers(res.documents);\n    \n    //console.log('stickers wrote', this.stickerSets);\n    const needSave = stickerSet.set.installed_date || LOCAL_IDS_SET.has(id as any);\n    stickerSet.refreshTime = Date.now();\n    this.storage.set({[id]: stickerSet}, !needSave);\n  }\n\n  public getStickerSetThumbDownloadOptions(stickerSet: StickerSet.stickerSet) {\n    const thumb = stickerSet.thumbs.find(thumb => thumb._ === 'photoSize') as PhotoSize.photoSize;\n    const dcId = stickerSet.thumb_dc_id;\n\n    const isAnimated = stickerSet.pFlags?.animated;\n\n    const input: InputFileLocation.inputStickerSetThumb = {\n      _: 'inputStickerSetThumb',\n      stickerset: this.getStickerSetInput(stickerSet),\n      thumb_version: stickerSet.thumb_version\n    };\n\n    return {dcId, location: input, size: thumb.size, mimeType: isAnimated ? 'application/x-tgsticker' : 'image/webp'};\n  }\n\n  /* public getStickerSetThumbURL(stickerSet: MTStickerSet) {\n    const thumb = stickerSet.thumb;\n    const dcId = stickerSet.thumb_dc_id;\n\n    const isAnimated = stickerSet.pFlags?.animated;\n\n    const input: inputStickerSetThumb = {\n      _: 'inputStickerSetThumb',\n      stickerset: this.getStickerSetInput(stickerSet),\n      volume_id: thumb.location.volume_id,\n      local_id: thumb.location.local_id\n    };\n\n    const url = getFileURL('document', this.getStickerSetThumbDownloadOptions(stickerSet));\n    return url;\n\n    //return promise;\n  } */\n\n  public getStickerSetInput(set: MyStickerSetInput): InputStickerSet {\n    if(set.id === EMOJI_SET_LOCAL_ID) {\n      return {\n        _: 'inputStickerSetAnimatedEmoji'\n      };\n    } else if(set.id === EMOJI_ANIMATIONS_SET_LOCAL_ID) {\n      return {\n        _: 'inputStickerSetAnimatedEmojiAnimations'\n      };\n    } else if(!set.access_hash) {\n      return {\n        _: 'inputStickerSetShortName',\n        short_name: '' + set.id\n      };\n    } else {\n      return {\n        _: 'inputStickerSetID',\n        id: set.id,\n        access_hash: set.access_hash\n      };\n    }\n  }\n\n  public async getFeaturedStickers() {\n    const res = await apiManager.invokeApiHashable({\n      method: 'messages.getFeaturedStickers',\n      processResult: (res) => {\n        assumeType<MessagesFeaturedStickers.messagesFeaturedStickers>(res);\n\n        forEachReverse(res.sets, (covered, idx, arr) => {\n          if(covered.set.pFlags.videos && !IS_WEBM_SUPPORTED) {\n            arr.splice(idx, 1);\n          }\n        });\n\n        res.sets.forEach(covered => {\n          this.saveStickerSet({set: covered.set, documents: [], packs: []}, covered.set.id);\n        });\n\n        return res;\n      }\n    });\n\n    return res.sets;\n  }\n\n  public async toggleStickerSet(set: StickerSet.stickerSet) {\n    if(set.installed_date) {\n      const res = await apiManager.invokeApi('messages.uninstallStickerSet', {\n        stickerset: this.getStickerSetInput(set)\n      });\n\n      if(res) {\n        delete set.installed_date;\n        rootScope.dispatchEvent('stickers_deleted', set);\n        this.storage.delete(set.id, true);\n        return true;\n      }\n    } else {\n      const res = await apiManager.invokeApi('messages.installStickerSet', {\n        stickerset: this.getStickerSetInput(set),\n        archived: false\n      });\n\n      if(res) {\n        set.installed_date = Date.now() / 1000 | 0;\n        rootScope.dispatchEvent('stickers_installed', set);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public async searchStickerSets(query: string, excludeFeatured = true) {\n    const flags = excludeFeatured ? 1 : 0;\n    const res = await apiManager.invokeApiHashable({\n      method: 'messages.searchStickerSets', \n      params: {\n        flags,\n        exclude_featured: excludeFeatured || undefined,\n        q: query\n      },\n      processResult: (res) => {\n        assumeType<MessagesFoundStickerSets.messagesFoundStickerSets>(res);\n\n        forEachReverse(res.sets, (covered, idx, arr) => {\n          if(covered.set.pFlags.videos && !IS_WEBM_SUPPORTED) {\n            arr.splice(idx, 1);\n          }\n        });\n\n        res.sets.forEach(covered => {\n          this.saveStickerSet({set: covered.set, documents: [], packs: []}, covered.set.id);\n        });\n\n        return res;\n      }\n    });\n\n    const foundSaved: StickerSetCovered[] = [];\n    const cache = this.storage.getCache();\n    for(let id in cache) {\n      const {set} = cache[id];\n\n      if(set.title.toLowerCase().includes(query.toLowerCase()) && !res.sets.find(c => c.set.id === set.id)) {\n        foundSaved.push({_: 'stickerSetCovered', set, cover: null});\n      }\n    }\n\n    return res.sets.concat(foundSaved);\n  }\n\n  public getAllStickers() {\n    return apiManager.invokeApiHashable({\n      method: 'messages.getAllStickers', \n      processResult: (allStickers) => {\n        assumeType<MessagesAllStickers.messagesAllStickers>(allStickers);\n\n        forEachReverse(allStickers.sets, (stickerSet, idx, arr) => {\n          if(stickerSet.pFlags.videos && !IS_WEBM_SUPPORTED) {\n            arr.splice(idx, 1);\n          }\n        });\n\n        return allStickers;\n      }\n    });\n  }\n\n  public preloadStickerSets() {\n    return this.getAllStickers().then(allStickers => {\n      return Promise.all((allStickers as MessagesAllStickers.messagesAllStickers).sets.map(set => this.getStickerSet(set, {useCache: true})));\n    });\n  }\n\n  // TODO: detect \"🤷\" by \"🤷‍♂️\"\n  public getStickersByEmoticon(emoticon: string, includeOurStickers = true) {\n    emoticon = RichTextProcessor.fixEmoji(emoticon);\n    if(this.getStickersByEmoticonsPromises[emoticon]) return this.getStickersByEmoticonsPromises[emoticon];\n\n    return this.getStickersByEmoticonsPromises[emoticon] = Promise.all([\n      apiManager.invokeApiHashable({\n        method: 'messages.getStickers', \n        params: {\n          emoticon\n        },\n        processResult: (stickers) => stickers\n      }),\n      includeOurStickers ? this.preloadStickerSets() : [],\n      includeOurStickers ? this.getRecentStickers() : undefined\n    ]).then(([messagesStickers, installedSets, recentStickers]) => {\n      const foundStickers = (messagesStickers as MessagesStickers.messagesStickers).stickers.map(sticker => appDocsManager.saveDoc(sticker));\n      const cachedStickersAnimated: Document.document[] = [], cachedStickersStatic: Document.document[] = [];\n\n      //console.log('getStickersByEmoticon', messagesStickers, installedSets, recentStickers);\n\n      const iteratePacks = (packs: StickerPack.stickerPack[]) => {\n        for(const pack of packs) {\n          const packEmoticon = RichTextProcessor.fixEmoji(pack.emoticon);\n          if(packEmoticon.includes(emoticon)) {\n            for(const docId of pack.documents) {\n              const doc = appDocsManager.getDoc(docId);\n              (doc.animated ? cachedStickersAnimated : cachedStickersStatic).push(doc);\n            }\n          }\n        }\n      };\n\n      if(recentStickers) {\n        iteratePacks(recentStickers.packs);\n        const stickers = recentStickers.stickers;\n        [cachedStickersAnimated, cachedStickersStatic].forEach(s => {\n          s.sort((a, b) => stickers.indexOf(a) - stickers.indexOf(b));\n        });\n      }\n\n      for(const set of installedSets) {\n        iteratePacks(set.packs);\n      }\n\n      /* const entities = RichTextProcessor.parseEntities(emoticon);\n      if(entities.length === 1) {\n        [cachedStickersAnimated, cachedStickersStatic].forEach(s => {\n          forEachReverse(s, (doc, idx) => {\n            const docEmoticon = RichTextProcessor.fixEmoji(doc.stickerEmojiRaw);\n            if(docEmoticon !== emoticon) {\n              s.splice(idx, 1);\n            }\n          });\n        });\n      } */\n\n      const stickers = [...new Set(cachedStickersAnimated.concat(cachedStickersStatic, foundStickers))]/* .filter(doc => !doc.animated) */;\n\n      forEachReverse(stickers, (sticker, idx, arr) => {\n        if(sticker.sticker === 3 && !IS_WEBM_SUPPORTED) {\n          arr.splice(idx, 1);\n        }\n      });\n\n      return stickers;\n    });\n  }\n\n  public pushRecentSticker(doc: MyDocument) {\n    const docEmoticon = RichTextProcessor.fixEmoji(doc.stickerEmojiRaw);\n    for(const emoticon in this.getStickersByEmoticonsPromises) {\n      const promise = this.getStickersByEmoticonsPromises[emoticon];\n      promise.then(stickers => {\n        const _doc = stickers.findAndSplice(_doc => _doc.id === doc.id);\n        if(_doc) {\n          stickers.unshift(_doc);\n        } else if(emoticon.includes(docEmoticon)) {\n          stickers.unshift(doc);\n        }\n      });\n    }\n  }\n}\n\nconst appStickersManager = new AppStickersManager();\nMOUNT_CLASS_TO.appStickersManager = appStickersManager;\nexport default appStickersManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n//import apiManager from '../mtproto/apiManager';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\nimport { Message, MessageEntity, MessageFwdHeader, Peer, Update, Updates } from '../../layer';\nimport { logger, LogTypes } from '../logger';\nimport apiManager from '../mtproto/mtprotoworker';\nimport rootScope from '../rootScope';\n//import networkerFactory from '../mtproto/networkerFactory';\nimport appUsersManager from \"./appUsersManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appStateManager from './appStateManager';\nimport serverTimeManager from '../mtproto/serverTimeManager';\nimport assumeType from '../../helpers/assumeType';\nimport noop from '../../helpers/noop';\nimport RichTextProcessor from '../richtextprocessor';\nimport App from '../../config/app';\n\ntype UpdatesState = {\n  pendingPtsUpdates: (Update & {pts: number, pts_count: number})[],\n  pendingSeqUpdates?: {[seq: number]: {seq: number, date: number, updates: any[]}},\n  syncPending: {\n    seqAwaiting?: number,\n    ptsAwaiting?: true,\n    timeout: number\n  },\n  syncLoading: Promise<void>,\n\n  seq?: number,\n  pts?: number,\n  date?: number,\n  lastPtsUpdateTime?: number\n};\n\nconst SYNC_DELAY = 6;\n\nexport class ApiUpdatesManager {\n  public updatesState: UpdatesState = {\n    pendingPtsUpdates: [],\n    pendingSeqUpdates: {},\n    syncPending: null,\n    syncLoading: null\n  };\n\n  private channelStates: {[channelId: ChatId]: UpdatesState} = {};\n  private attached = false;\n\n  private log = logger('UPDATES', LogTypes.Error | LogTypes.Warn | LogTypes.Log/*  | LogTypes.Debug */);\n  private debug = DEBUG;\n\n  private setProxy() {\n    const self = this;\n    this.updatesState = new Proxy(this.updatesState, {\n      set: function(target: ApiUpdatesManager['updatesState'], key: keyof ApiUpdatesManager['updatesState'], value: ApiUpdatesManager['updatesState'][typeof key]) {\n        // @ts-ignore\n        target[key] = value;\n        self.saveUpdatesState();\n        return true;\n      }\n    });\n  }\n\n  public saveUpdatesState() {\n    const us = this.updatesState;\n    appStateManager.pushToState('updates', {\n      seq: us.seq,\n      pts: us.pts,\n      date: us.date\n    });\n  }\n\n  private popPendingSeqUpdate() {\n    const state = this.updatesState;\n    const nextSeq = state.seq + 1;\n    const pendingUpdatesData = state.pendingSeqUpdates[nextSeq];\n    if(!pendingUpdatesData) {\n      return false;\n    }\n\n    const updates = pendingUpdatesData.updates;\n    for(let i = 0, length = updates.length; i < length; ++i) {\n      this.saveUpdate(updates[i]);\n    }\n\n    state.seq = pendingUpdatesData.seq;\n    if(pendingUpdatesData.date && state.date < pendingUpdatesData.date) {\n      state.date = pendingUpdatesData.date;\n    }\n    delete state.pendingSeqUpdates[nextSeq];\n  \n    if(!this.popPendingSeqUpdate() &&\n      state.syncPending &&\n      state.syncPending.seqAwaiting &&\n      state.seq >= state.syncPending.seqAwaiting) {\n      if(!state.syncPending.ptsAwaiting) {\n        clearTimeout(state.syncPending.timeout);\n        state.syncPending = null;\n      } else {\n        delete state.syncPending.seqAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  private popPendingPtsUpdate(channelId: ChatId) {\n    const curState = channelId ? this.getChannelState(channelId) : this.updatesState;\n    if(!curState.pendingPtsUpdates.length) {\n      return false;\n    }\n\n    curState.pendingPtsUpdates.sort((a, b) => {\n      return a.pts - b.pts;\n    });\n    // this.log('pop update', channelId, curState.pendingPtsUpdates)\n  \n    let curPts = curState.pts;\n    let goodPts = 0;\n    let goodIndex = 0;\n    for(let i = 0, length = curState.pendingPtsUpdates.length; i < length; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n      curPts += update.pts_count;\n      if(curPts >= update.pts) {\n        goodPts = update.pts;\n        goodIndex = i;\n      }\n    }\n  \n    if(!goodPts) {\n      return false;\n    }\n  \n    this.debug && this.log.debug('pop pending pts updates', goodPts, curState.pendingPtsUpdates.slice(0, goodIndex + 1));\n  \n    curState.pts = goodPts;\n    for(let i = 0; i <= goodIndex; ++i) {\n      const update = curState.pendingPtsUpdates[i];\n\n      // @ts-ignore\n      this.saveUpdate(update);\n    }\n    curState.pendingPtsUpdates.splice(0, goodIndex + 1);\n  \n    if(!curState.pendingPtsUpdates.length && curState.syncPending) {\n      if(!curState.syncPending.seqAwaiting) {\n        clearTimeout(curState.syncPending.timeout);\n        curState.syncPending = null;\n      } else {\n        delete curState.syncPending.ptsAwaiting;\n      }\n    }\n  \n    return true;\n  }\n\n  public forceGetDifference() {\n    if(!this.updatesState.syncLoading) {\n      this.getDifference();\n    }\n  }\n\n  public processLocalUpdate(update: Update) {\n    this.processUpdateMessage({\n      _: 'updateShort',\n      update\n    } as Updates);\n  }\n\n  public processUpdateMessage = (updateMessage: any, options: Partial<{\n    override: boolean\n  }> = {}) => {\n    // return forceGetDifference()\n    const processOpts = {\n      date: updateMessage.date,\n      seq: updateMessage.seq,\n      seqStart: updateMessage.seq_start,\n      //ignoreSyncLoading: options.ignoreSyncLoading\n    };\n\n    this.debug && this.log.debug('processUpdateMessage', updateMessage);\n  \n    switch(updateMessage._) {\n      case 'updatesTooLong':\n      case 'new_session_created':\n        this.forceGetDifference();\n        break;\n  \n      case 'updateShort':\n        this.processUpdate(updateMessage.update, processOpts);\n        break;\n  \n      case 'updateShortMessage':\n      case 'updateShortChatMessage': {\n        assumeType<Updates.updateShortChatMessage | Updates.updateShortMessage>(updateMessage);\n        this.debug && this.log.debug('updateShortMessage | updateShortChatMessage', {...updateMessage});\n        const isOut = updateMessage.pFlags.out;\n        const fromId = (updateMessage as Updates.updateShortChatMessage).from_id || (isOut ? rootScope.myId : (updateMessage as Updates.updateShortMessage).user_id);\n        const toId = (updateMessage as Updates.updateShortChatMessage).chat_id\n          ? (updateMessage as Updates.updateShortChatMessage).chat_id.toPeerId(true)\n          : ((updateMessage as Updates.updateShortMessage).user_id.toPeerId(false) || rootScope.myId);\n  \n        this.processUpdate({\n          _: 'updateNewMessage',\n          message: {\n            _: 'message',\n            pFlags: updateMessage.pFlags,\n            id: updateMessage.id,\n            from_id: appPeersManager.getOutputPeer(fromId.toPeerId()),\n            peer_id: appPeersManager.getOutputPeer(toId),\n            date: updateMessage.date,\n            message: updateMessage.message,\n            fwd_from: updateMessage.fwd_from,\n            reply_to: updateMessage.reply_to,\n            entities: updateMessage.entities\n          },\n          pts: updateMessage.pts,\n          pts_count: updateMessage.pts_count\n        }, processOpts);\n        break;\n      }\n  \n      case 'updatesCombined':\n      case 'updates':\n        appUsersManager.saveApiUsers(updateMessage.users, options.override);\n        appChatsManager.saveApiChats(updateMessage.chats, options.override);\n  \n        updateMessage.updates.forEach((update: Update) => {\n          this.processUpdate(update, processOpts);\n        });\n        break;\n  \n      default:\n        this.log.warn('Unknown update message', updateMessage);\n    }\n  };\n  \n  private getDifference(first = false): Promise<void> {\n    // this.trace('Get full diff')\n    const updatesState = this.updatesState;\n    let wasSyncing = updatesState.syncLoading;\n    if(!wasSyncing) {\n      updatesState.pendingSeqUpdates = {};\n      updatesState.pendingPtsUpdates = [];\n    }\n  \n    if(updatesState.syncPending) {\n      clearTimeout(updatesState.syncPending.timeout);\n      updatesState.syncPending = null;\n    }\n\n    const promise = apiManager.invokeApi('updates.getDifference', {\n      pts: updatesState.pts, \n      pts_total_limit: first /* && false  */? /* 50 */1200 : undefined,\n      date: updatesState.date, \n      qts: -1\n    }, {\n      timeout: 0x7fffffff\n    }).then((differenceResult) => {\n      this.debug && this.log.debug('Get diff result', differenceResult);\n\n      if(differenceResult._ === 'updates.differenceEmpty') {\n        this.debug && this.log.debug('apply empty diff', differenceResult.seq);\n        updatesState.date = differenceResult.date;\n        updatesState.seq = differenceResult.seq;\n        return;\n      }\n\n      // ! SORRY I'M SORRY I'M SORRY\n      if(first) {\n        rootScope.dispatchEvent('state_synchronizing');\n      }\n\n      if(differenceResult._ !== 'updates.differenceTooLong') {\n        appUsersManager.saveApiUsers(differenceResult.users);\n        appChatsManager.saveApiChats(differenceResult.chats);\n\n        // Should be first because of updateMessageID\n        // this.log('applying', differenceResult.other_updates.length, 'other updates')\n    \n        differenceResult.other_updates.forEach((update) => {\n          switch(update._) {\n            case 'updateChannelTooLong':\n            case 'updateNewChannelMessage':\n            case 'updateEditChannelMessage':\n              this.processUpdate(update);\n              return;\n          }\n          \n          this.saveUpdate(update);\n        });\n\n        // this.log('applying', differenceResult.new_messages.length, 'new messages')\n        differenceResult.new_messages.forEach((apiMessage) => {\n          this.saveUpdate({\n            _: 'updateNewMessage',\n            message: apiMessage,\n            pts: updatesState.pts,\n            pts_count: 0\n          });\n        });\n\n        const nextState = differenceResult._ === 'updates.difference' ? differenceResult.state : differenceResult.intermediate_state;\n        updatesState.seq = nextState.seq;\n        updatesState.pts = nextState.pts;\n        updatesState.date = nextState.date;\n      } else {\n        updatesState.pts = differenceResult.pts;\n        updatesState.date = (Date.now() / 1000 | 0) + serverTimeManager.serverTimeOffset;\n        delete updatesState.seq;\n        \n        this.channelStates = {};\n        \n        this.log.warn('getDifference:', differenceResult._);\n        rootScope.dispatchEvent('state_cleared');\n      }\n  \n      // this.log('apply diff', updatesState.seq, updatesState.pts)\n  \n      if(differenceResult._ === 'updates.differenceSlice') {\n        return this.getDifference();\n      } else {\n        this.debug && this.log.debug('finished get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(updatesState, promise);\n    }\n  \n    return promise;\n  }\n\n  private getChannelDifference(channelId: ChatId): Promise<void> {\n    const channelState = this.getChannelState(channelId);\n    const wasSyncing = channelState.syncLoading;\n    if(!wasSyncing) {\n      channelState.pendingPtsUpdates = [];\n    }\n\n    if(channelState.syncPending) {\n      clearTimeout(channelState.syncPending.timeout);\n      channelState.syncPending = null;\n    }\n\n    //this.log.trace('Get channel diff', appChatsManager.getChat(channelId), channelState.pts);\n    const promise = apiManager.invokeApi('updates.getChannelDifference', {\n      channel: appChatsManager.getChannelInput(channelId),\n      filter: {_: 'channelMessagesFilterEmpty'},\n      pts: channelState.pts,\n      limit: 30\n    }, {timeout: 0x7fffffff}).then((differenceResult) => {\n      this.debug && this.log.debug('Get channel diff result', differenceResult)\n      channelState.pts = 'pts' in differenceResult ? differenceResult.pts : undefined;\n  \n      if(differenceResult._ === 'updates.channelDifferenceEmpty') {\n        this.debug && this.log.debug('apply channel empty diff', differenceResult);\n        return;\n      }\n  \n      if(differenceResult._ === 'updates.channelDifferenceTooLong') {\n        this.debug && this.log.debug('channel diff too long', differenceResult);\n        delete this.channelStates[channelId];\n\n        this.saveUpdate({_: 'updateChannelReload', channel_id: channelId});\n        return;\n      }\n  \n      appUsersManager.saveApiUsers(differenceResult.users);\n      appChatsManager.saveApiChats(differenceResult.chats);\n  \n      // Should be first because of updateMessageID\n      this.debug && this.log.debug('applying', differenceResult.other_updates.length, 'channel other updates');\n      differenceResult.other_updates.forEach((update) => {\n        this.saveUpdate(update);\n      });\n  \n      this.debug && this.log.debug('applying', differenceResult.new_messages.length, 'channel new messages');\n      differenceResult.new_messages.forEach((apiMessage) => {\n        this.saveUpdate({\n          _: 'updateNewChannelMessage',\n          message: apiMessage,\n          pts: channelState.pts,\n          pts_count: 0\n        });\n      });\n  \n      this.debug && this.log.debug('apply channel diff', channelState.pts);\n  \n      if(differenceResult._ === 'updates.channelDifference' &&\n        !differenceResult.pFlags['final']) {\n        return this.getChannelDifference(channelId);\n      } else {\n        this.debug && this.log.debug('finished channel get diff');\n      }\n    });\n\n    if(!wasSyncing) {\n      this.justAName(channelState, promise, channelId);\n    }\n\n    return promise;\n  }\n\n  private justAName(state: UpdatesState, promise: UpdatesState['syncLoading'], channelId?: ChatId) {\n    state.syncLoading = promise;\n    rootScope.dispatchEvent('state_synchronizing', channelId);\n\n    promise.then(() => {\n      state.syncLoading = null;\n      rootScope.dispatchEvent('state_synchronized', channelId);\n    }, () => {\n      state.syncLoading = null;\n    });\n  }\n  \n  public addChannelState(channelId: ChatId, pts: number) {\n    if(!pts) {\n      throw new Error('Add channel state without pts ' + channelId);\n    }\n\n    if(!(channelId in this.channelStates)) {\n      this.channelStates[channelId] = {\n        pts,\n        pendingPtsUpdates: [],\n        syncPending: null,\n        syncLoading: null\n      };\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public getChannelState(channelId: ChatId, pts?: number) {\n    if(this.channelStates[channelId] === undefined) {\n      this.addChannelState(channelId, pts);\n    }\n\n    return this.channelStates[channelId];\n  }\n\n  private processUpdate(update: Update, options: Partial<{\n    date: number,\n    seq: number,\n    seqStart: number/* ,\n    ignoreSyncLoading: boolean */\n  }> = {}) {\n    let channelId: ChatId;\n    switch(update._) {\n      case 'updateNewChannelMessage':\n      case 'updateEditChannelMessage':\n        channelId = appPeersManager.getPeerId(update.message.peer_id).toChatId();\n        break;\n      /* case 'updateDeleteChannelMessages':\n        channelId = update.channel_id;\n        break; */\n      case 'updateChannelTooLong':\n        channelId = update.channel_id;\n        if(!(channelId in this.channelStates)) {\n          return false;\n        }\n        break;\n      default:\n        if('channel_id' in update && 'pts' in update) {\n          channelId = update.channel_id;\n        }\n        break;\n    }\n  \n    const {pts, pts_count} = update as Update.updateNewMessage;\n    const curState = channelId ? this.getChannelState(channelId, pts) : this.updatesState;\n  \n    // this.log.log('process', channelId, curState.pts, update)\n  \n    if(curState.syncLoading/*  && !options.ignoreSyncLoading */) {\n      return false;\n    }\n  \n    if(update._ === 'updateChannelTooLong') {\n      if(!curState.lastPtsUpdateTime ||\n          curState.lastPtsUpdateTime < (Date.now() - SYNC_DELAY)) {\n        // this.log.trace('channel too long, get diff', channelId, update)\n        this.getChannelDifference(channelId);\n      }\n      return false;\n    }\n  \n    if(update._ === 'updateNewMessage' ||\n        update._ === 'updateEditMessage' ||\n        update._ === 'updateNewChannelMessage' ||\n        update._ === 'updateEditChannelMessage') {\n      const message = update.message as Message.message;\n      const toPeerId = appPeersManager.getPeerId(message.peer_id);\n      const fwdHeader: MessageFwdHeader.messageFwdHeader = message.fwd_from || {} as any;\n      let reason: string;\n      if(message.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(message.from_id), message.pFlags.post/* || channelId*/) && (reason = 'author') ||\n          fwdHeader.from_id && !appUsersManager.hasUser(appPeersManager.getPeerId(fwdHeader.from_id), !!(fwdHeader.from_id as Peer.peerChannel).channel_id) && (reason = 'fwdAuthor') ||\n          (fwdHeader.from_id as Peer.peerChannel)?.channel_id && !appChatsManager.hasChat((fwdHeader.from_id as Peer.peerChannel).channel_id, true) && (reason = 'fwdChannel') ||\n          toPeerId.isUser() && !appUsersManager.hasUser(toPeerId) && (reason = 'toPeer User') ||\n          toPeerId.isAnyChat() && !appChatsManager.hasChat(toPeerId.toChatId()) && (reason = 'toPeer Chat')) {\n        this.log.warn('Not enough data for message update', toPeerId, reason, message);\n        if(channelId && appChatsManager.hasChat(channelId)) {\n          this.getChannelDifference(channelId);\n        } else {\n          this.forceGetDifference();\n        }\n        return false;\n      }\n    } else if(channelId && !appChatsManager.hasChat(channelId)) {\n      // this.log.log('skip update, missing channel', channelId, update)\n      return false;\n    }\n  \n    let popPts: boolean;\n    let popSeq: boolean;\n  \n    if(pts) {\n      const newPts = curState.pts + (pts_count || 0);\n      if(newPts < pts) {\n        this.debug && this.log.warn('Pts hole', curState, update, channelId && appChatsManager.getChat(channelId));\n        curState.pendingPtsUpdates.push(update as Update.updateNewMessage);\n        if(!curState.syncPending && !curState.syncLoading) {\n          curState.syncPending = {\n            timeout: window.setTimeout(() => {\n              curState.syncPending = null;\n\n              if(curState.syncLoading) {\n                return;\n              }\n\n              if(channelId) {\n                this.getChannelDifference(channelId);\n              } else {\n                this.getDifference();\n              }\n            }, SYNC_DELAY)\n          };\n        }\n\n        curState.syncPending.ptsAwaiting = true;\n        return false;\n      }\n\n      if(pts > curState.pts) {\n        curState.pts = pts;\n        popPts = true;\n  \n        curState.lastPtsUpdateTime = Date.now();\n      } else if(pts_count) {\n        // this.log.warn('Duplicate update', update)\n        return false;\n      }\n\n      if(channelId && options.date && this.updatesState.date < options.date) {\n        this.updatesState.date = options.date;\n      }\n    } else if(!channelId && options.seq > 0) {\n      const seq = options.seq;\n      const seqStart = options.seqStart || seq;\n  \n      if(seqStart !== curState.seq + 1) {\n        if(seqStart > curState.seq) {\n          this.debug && this.log.warn('Seq hole', curState, curState.syncPending && curState.syncPending.seqAwaiting);\n  \n          if(curState.pendingSeqUpdates[seqStart] === undefined) {\n            curState.pendingSeqUpdates[seqStart] = {seq, date: options.date, updates: []};\n          }\n          curState.pendingSeqUpdates[seqStart].updates.push(update);\n  \n          if(!curState.syncPending) {\n            curState.syncPending = {\n              timeout: window.setTimeout(() => {\n                curState.syncPending = null;\n\n                if(curState.syncLoading) {\n                  return;\n                }\n\n                this.getDifference();\n              }, SYNC_DELAY)\n            };\n          }\n\n          if(!curState.syncPending.seqAwaiting ||\n            curState.syncPending.seqAwaiting < seqStart) {\n            curState.syncPending.seqAwaiting = seqStart;\n          }\n          return false;\n        }\n      }\n  \n      if(curState.seq !== seq) {\n        curState.seq = seq;\n        if(options.date && curState.date < options.date) {\n          curState.date = options.date;\n        }\n\n        popSeq = true;\n      }\n    }\n  \n    this.saveUpdate(update);\n  \n    if(popPts) {\n      this.popPendingPtsUpdate(channelId);\n    } else if(popSeq) {\n      this.popPendingSeqUpdate();\n    }\n  }\n\n  public saveUpdate(update: Update) {\n    //this.debug && this.log('saveUpdate', update);\n    rootScope.dispatchEvent(update._, update as any);\n  }\n  \n  public attach() {\n    if(this.attached) return;\n\n    //return;\n\n    this.log('attach');\n    \n    this.attached = true;\n\n    appStateManager.getState().then(({updates: state}) => {\n      const newVersion = appStateManager.newVersion/*  || '0.8.6' */;\n\n      //rootScope.broadcast('state_synchronizing');\n      if(!state || !state.pts || !state.date/*  || !state.seq */) { // seq can be undefined because of updates.differenceTooLong\n        this.log('will get new state');\n\n        this.updatesState.syncLoading = new Promise((resolve) => {\n          apiManager.invokeApi('updates.getState', {}, {noErrorBox: true}).then((stateResult) => {\n            this.updatesState.seq = stateResult.seq;\n            this.updatesState.pts = stateResult.pts;\n            this.updatesState.date = stateResult.date;\n            this.saveUpdatesState();\n            //setTimeout(() => {\n              this.updatesState.syncLoading = null;\n              resolve();\n              //rootScope.broadcast('state_synchronized');\n            //}, 1000);\n        \n          // ! for testing\n          // updatesState.seq = 1\n          // updatesState.pts = stateResult.pts - 5000\n          // updatesState.date = 1\n          // getDifference()\n          });\n        });\n      } else {\n        // ! for testing\n        /* state.seq = 1;\n        state.pts = state.pts - 15;\n        state.date = 1; */\n        // state.pts -= 100;\n\n        /* state.date = 1628623682;\n        state.pts = 2007500;\n        state.seq = 503; */\n\n        Object.assign(this.updatesState, state);\n        \n        this.log('will get difference', Object.assign({}, state));\n        \n        this.getDifference(true)/* .finally(() => {\n          if(this.updatesState.syncLoading) {\n            rootScope.broadcast('state_synchronizing');\n          }\n        }) */;\n      }\n\n      apiManager.setUpdatesProcessor(this.processUpdateMessage);\n\n      // this.updatesState.syncLoading.then(() => {\n        this.setProxy();\n      // });\n\n      if(newVersion) {\n        this.updatesState.syncLoading.then(() => {\n          fetch('changelogs/' + newVersion.split(' ')[0] + '.md')\n          .then(res => (res.status === 200 && res.ok && res.text()) || Promise.reject())\n          .then(text => {\n            const pre = `**Telegram Web${App.suffix} was updated to version alpha ${newVersion}**\\n\\n`;\n\n            text = pre + text;\n\n            const entities: MessageEntity[] = [];\n            const message = RichTextProcessor.parseMarkdown(text, entities);\n\n            const update: Update.updateServiceNotification = {\n              _: 'updateServiceNotification',\n              entities,\n              message,\n              type: 'local',\n              pFlags: {},\n              inbox_date: Date.now() / 1000 | 0,\n              media: undefined\n            };\n            this.processLocalUpdate(update);\n          })\n          .catch(noop);\n        });\n      }\n    });\n  }\n}\n\nconst apiUpdatesManager = new ApiUpdatesManager();\nMOUNT_CLASS_TO.apiUpdatesManager = apiUpdatesManager;\nexport default apiUpdatesManager\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { FileURLType, getFileNameByLocation, getFileURL } from '../../helpers/fileName';\nimport { safeReplaceArrayInObject, defineNotNumerableProperties, isObject } from '../../helpers/object';\nimport { Document, InputFileLocation, InputMedia, PhotoSize } from '../../layer';\nimport referenceDatabase, { ReferenceContext } from '../mtproto/referenceDatabase';\nimport opusDecodeController from '../opusDecodeController';\nimport { RichTextProcessor } from '../richtextprocessor';\nimport appDownloadManager, { DownloadBlob } from './appDownloadManager';\nimport appPhotosManager from './appPhotosManager';\nimport blur from '../../helpers/blur';\nimport apiManager from '../mtproto/mtprotoworker';\nimport { MOUNT_CLASS_TO } from '../../config/debug';\nimport { getFullDate } from '../../helpers/date';\nimport rootScope from '../rootScope';\nimport IS_WEBP_SUPPORTED from '../../environment/webpSupport';\nimport IS_WEBM_SUPPORTED from '../../environment/webmSupport';\n\nexport type MyDocument = Document.document;\n\n// TODO: если залить картинку файлом, а потом перезайти в диалог - превьюшка заново скачается\n\nconst EXTENSION_MIME_TYPE_MAP = {\n  mov: 'video/quicktime',\n  gif: 'image/gif',\n  pdf: 'application/pdf',\n};\n\nexport class AppDocsManager {\n  private docs: {[docId: DocId]: MyDocument} = {};\n  private savingLottiePreview: {[docId: DocId]: true} = {};\n  public downloading: Map<DocId, DownloadBlob> = new Map();\n\n  constructor() {\n    apiManager.onServiceWorkerFail = this.onServiceWorkerFail;\n  }\n\n  public onServiceWorkerFail = () => {\n    for(const id in this.docs) {\n      const doc = this.docs[id];\n\n      if(doc.supportsStreaming) {\n        delete doc.supportsStreaming;\n        const cacheContext = appDownloadManager.getCacheContext(doc);\n        delete cacheContext.url;\n      }\n    }\n  };\n\n  public saveDoc(doc: Document, context?: ReferenceContext): MyDocument {\n    if(doc._ === 'documentEmpty') {\n      return undefined;\n    }\n\n    const oldDoc = this.docs[doc.id];\n\n    if(doc.file_reference) { // * because we can have a new object w/o the file_reference while sending\n      safeReplaceArrayInObject('file_reference', oldDoc, doc);\n      referenceDatabase.saveContext(doc.file_reference, context);\n    }\n    \n    //console.log('saveDoc', apiDoc, this.docs[apiDoc.id]);\n    // if(oldDoc) {\n    //   //if(doc._ !== 'documentEmpty' && doc._ === d._) {\n    //     if(doc.thumbs) {\n    //       if(!oldDoc.thumbs) oldDoc.thumbs = doc.thumbs;\n    //       /* else if(apiDoc.thumbs[0].bytes && !d.thumbs[0].bytes) {\n    //         d.thumbs.unshift(apiDoc.thumbs[0]);\n    //       } else if(d.thumbs[0].url) { // fix for converted thumb in safari\n    //         apiDoc.thumbs[0] = d.thumbs[0];\n    //       } */\n    //     }\n\n    //   //}\n\n    //   return oldDoc;\n\n    //   //return Object.assign(d, apiDoc, context);\n    //   //return context ? Object.assign(d, context) : d;\n    // }\n\n    if(!oldDoc) {\n      this.docs[doc.id] = doc;\n    }\n\n    // * exclude from state\n    // defineNotNumerableProperties(doc, [/* 'thumbs',  */'type', 'h', 'w', 'file_name', \n    // 'file', 'duration', 'downloaded', 'url', 'audioTitle', \n    // 'audioPerformer', 'sticker', 'stickerEmoji', 'stickerEmojiRaw', \n    // 'stickerSetInput', 'stickerThumbConverted', 'animated', 'supportsStreaming']);\n\n    for(let i = 0, length = doc.attributes.length; i < length; ++i) {\n      const attribute = doc.attributes[i];\n      switch(attribute._) {\n        case 'documentAttributeFilename':\n          doc.file_name = RichTextProcessor.wrapPlainText(attribute.file_name);\n          doc.fileName = RichTextProcessor.wrapEmojiText(attribute.file_name);\n          break;\n\n        case 'documentAttributeAudio':\n          doc.duration = attribute.duration;\n          doc.audioTitle = RichTextProcessor.wrapEmojiText(attribute.title);\n          doc.audioPerformer = RichTextProcessor.wrapEmojiText(attribute.performer);\n          doc.type = attribute.pFlags.voice && doc.mime_type === 'audio/ogg' ? 'voice' : 'audio';\n          /* if(apiDoc.type === 'audio') {\n            apiDoc.supportsStreaming = true;\n          } */\n          break;\n\n        case 'documentAttributeVideo':\n          doc.duration = attribute.duration;\n          doc.w = attribute.w;\n          doc.h = attribute.h;\n          //apiDoc.supportsStreaming = attribute.pFlags?.supports_streaming/*  && apiDoc.size > 524288 */;\n          if(/* apiDoc.thumbs &&  */attribute.pFlags.round_message) {\n            doc.type = 'round';\n          } else /* if(apiDoc.thumbs) */ {\n            doc.type = 'video';\n          }\n          break;\n\n        case 'documentAttributeSticker':\n          if(attribute.alt !== undefined) {\n            doc.stickerEmojiRaw = attribute.alt;\n            doc.stickerEmoji = RichTextProcessor.wrapRichText(doc.stickerEmojiRaw, {noLinks: true, noLinebreaks: true});\n          }\n\n          if(attribute.stickerset) {\n            if(attribute.stickerset._ === 'inputStickerSetEmpty') {\n              delete attribute.stickerset;\n            } else if(attribute.stickerset._ === 'inputStickerSetID') {\n              doc.stickerSetInput = attribute.stickerset;\n            }\n          }\n\n          // * there can be no thumbs, then it is a document\n          if(/* apiDoc.thumbs &&  */doc.mime_type === 'image/webp' && (doc.thumbs || IS_WEBP_SUPPORTED)) {\n            doc.type = 'sticker';\n            doc.sticker = 1;\n          } else if(doc.mime_type === 'video/webm') {\n            if(!IS_WEBM_SUPPORTED) {\n              return;\n            }\n\n            doc.type = 'sticker';\n            doc.sticker = 3;\n            doc.animated = true;\n          }\n          break;\n\n        case 'documentAttributeImageSize':\n          doc.type = 'photo';\n          doc.w = attribute.w;\n          doc.h = attribute.h;\n          break;\n\n        case 'documentAttributeAnimated':\n          if((doc.mime_type === 'image/gif' || doc.mime_type === 'video/mp4')/*  && apiDoc.thumbs */) {\n            doc.type = 'gif';\n          }\n\n          doc.animated = true;\n          break;\n      }\n    }\n    \n    if(!doc.mime_type) {\n      const ext = (doc.file_name || '').split('.').pop();\n      // @ts-ignore\n      const mappedMimeType = ext && EXTENSION_MIME_TYPE_MAP[ext.toLowerCase()];\n      if(mappedMimeType) {\n        doc.mime_type = mappedMimeType;\n      } else {\n        switch(doc.type) {\n          case 'gif':\n          case 'video':\n          case 'round':\n            doc.mime_type = 'video/mp4';\n            break;\n          case 'sticker':\n            doc.mime_type = 'image/webp';\n            break;\n          case 'audio':\n            doc.mime_type = 'audio/mpeg';\n            break;\n          case 'voice':\n            doc.mime_type = 'audio/ogg';\n            break;\n          default:\n            doc.mime_type = 'application/octet-stream';\n            break;\n        }\n      }\n    } else if(doc.mime_type === EXTENSION_MIME_TYPE_MAP.pdf) {\n      doc.type = 'pdf';\n    } else if(doc.mime_type === EXTENSION_MIME_TYPE_MAP.gif) {\n      doc.type = 'gif';\n    }\n\n    if(doc.type === 'voice' || doc.type === 'round') {\n      // browser will identify extension\n      doc.file_name = doc.fileName = doc.type + '_' + getFullDate(new Date(doc.date * 1000), {monthAsNumber: true, leadingZero: true}).replace(/[:\\.]/g, '-').replace(', ', '_');\n    }\n\n    if(apiManager.isServiceWorkerOnline()) {\n      if((doc.type === 'gif' && doc.size > 8e6) || doc.type === 'audio' || doc.type === 'video'/*  || doc.mime_type.indexOf('video/') === 0 */) {\n        doc.supportsStreaming = true;\n        \n        const cacheContext = appDownloadManager.getCacheContext(doc);\n        if(!cacheContext.url) {\n          cacheContext.url = this.getFileURL(doc);\n        }\n      }\n    }\n\n    // for testing purposes\n    // doc.supportsStreaming = false;\n    // doc.url = ''; // * this will break upload urls\n    \n    if(!doc.file_name) {\n      doc.file_name = doc.fileName = '';\n    }\n\n    if(doc.mime_type === 'application/x-tgsticker' && doc.file_name === 'AnimatedSticker.tgs') {\n      doc.type = 'sticker';\n      doc.animated = true;\n      doc.sticker = 2;\n    }\n\n    /* if(!doc.url) {\n      doc.url = this.getFileURL(doc);\n    } */\n\n    if(oldDoc) {\n      return Object.assign(oldDoc, doc);\n    }\n\n    return doc;\n  }\n  \n  public getDoc(docId: DocId | MyDocument): MyDocument {\n    return isObject<MyDocument>(docId) ? docId : this.docs[docId];\n  }\n\n  public getMediaInput(doc: MyDocument): InputMedia.inputMediaDocument {\n    return {\n      _: 'inputMediaDocument',\n      id: {\n        _: 'inputDocument',\n        id: doc.id,\n        access_hash: doc.access_hash,\n        file_reference: doc.file_reference\n      },\n      ttl_seconds: 0\n    };\n  }\n\n  public getInput(doc: MyDocument, thumbSize?: string): InputFileLocation.inputDocumentFileLocation {\n    return {\n      _: 'inputDocumentFileLocation',\n      id: doc.id,\n      access_hash: doc.access_hash,\n      file_reference: doc.file_reference,\n      thumb_size: thumbSize\n    };\n  }\n\n  public getFileDownloadOptions(doc: MyDocument, thumb?: PhotoSize.photoSize, queueId?: number, onlyCache?: boolean) {\n    const inputFileLocation = this.getInput(doc, thumb?.type);\n\n    let mimeType: string;\n    if(thumb) {\n      mimeType = doc.sticker ? 'image/webp' : 'image/jpeg'/* doc.mime_type */;\n    } else {\n      mimeType = doc.mime_type || 'application/octet-stream';\n    }\n\n    return {\n      dcId: doc.dc_id, \n      location: inputFileLocation, \n      size: thumb ? thumb.size : doc.size, \n      mimeType,\n      fileName: doc.file_name,\n      queueId,\n      onlyCache\n    };\n  }\n\n  public getFileURL(doc: MyDocument, download = false, thumb?: PhotoSize.photoSize) {\n    let type: FileURLType;\n    if(download) {\n      type = 'download';\n    } else if(thumb) {\n      type = 'thumb';\n    } else if(doc.supportsStreaming) {\n      type = 'stream';\n    } else {\n      type = 'document';\n    }\n\n    return getFileURL(type, this.getFileDownloadOptions(doc, thumb));\n  }\n\n  public getThumbURL(doc: MyDocument, thumb: PhotoSize.photoSize | PhotoSize.photoCachedSize | PhotoSize.photoStrippedSize) {\n    let promise: Promise<any> = Promise.resolve();\n\n    const cacheContext = appDownloadManager.getCacheContext(doc, thumb.type);\n    if(!cacheContext.url) {\n      if('bytes' in thumb) {\n        promise = blur(appPhotosManager.getPreviewURLFromBytes(thumb.bytes, !!doc.sticker)).then(url => {\n          cacheContext.url = url;\n        }) as any;\n      } else {\n        //return this.getFileURL(doc, false, thumb);\n        promise = appPhotosManager.preloadPhoto(doc, thumb) as any;\n      }\n    }\n\n    return {thumb, cacheContext, promise};\n  }\n\n  public getThumb(doc: MyDocument, tryNotToUseBytes = true) {\n    const thumb = appPhotosManager.choosePhotoSize(doc, 0, 0, !tryNotToUseBytes);\n    if(thumb._ === 'photoSizeEmpty') return null;\n    return this.getThumbURL(doc, thumb as any);\n  }\n\n  public getInputFileName(doc: MyDocument, thumbSize?: string) {\n    return getFileNameByLocation(this.getInput(doc, thumbSize), {fileName: doc.file_name});\n  }\n\n  public downloadDoc(doc: MyDocument, queueId?: number, onlyCache?: boolean): DownloadBlob {\n    const fileName = this.getInputFileName(doc);\n\n    let download: DownloadBlob = appDownloadManager.getDownload(fileName);\n    if(download) {\n      return download;\n    }\n\n    const downloadOptions = this.getFileDownloadOptions(doc, undefined, queueId, onlyCache);\n    download = appDownloadManager.download(downloadOptions);\n    this.downloading.set(doc.id, download);\n    rootScope.dispatchEvent('download_start', doc.id);\n\n    const cacheContext = appDownloadManager.getCacheContext(doc);\n    const originalPromise = download;\n    originalPromise.then((blob) => {\n      cacheContext.url = URL.createObjectURL(blob);\n      cacheContext.downloaded = blob.size;\n    }, () => {}).finally(() => {\n      this.downloading.delete(doc.id);\n    });\n    \n    if(doc.type === 'voice' && !opusDecodeController.isPlaySupported()) {\n      download = originalPromise.then(async(blob) => {\n        const reader = new FileReader();\n  \n        await new Promise<void>((resolve, reject) => {\n          reader.onloadend = (e) => {\n            const uint8 = new Uint8Array(e.target.result as ArrayBuffer);\n            //console.log('sending uint8 to decoder:', uint8);\n            opusDecodeController.decode(uint8).then(result => {\n              cacheContext.url = result.url;\n              resolve();\n            }, (err) => {\n              delete cacheContext.downloaded;\n              reject(err);\n            });\n          };\n    \n          reader.readAsArrayBuffer(blob);\n        });\n  \n        return blob;\n      });\n    }\n\n    download.then(() => {\n      rootScope.dispatchEvent('document_downloaded', doc);\n    });\n\n    return download;\n  }\n\n  public isSavingLottiePreview(doc: MyDocument, toneIndex: number) {\n    const key = doc.id + '-' + toneIndex;\n    return !!this.savingLottiePreview[key];\n  }\n\n  public saveLottiePreview(doc: MyDocument, canvas: HTMLCanvasElement, toneIndex: number) {\n    const key = doc.id + '-' + toneIndex;\n    if(this.savingLottiePreview[key]/*  || true */) return;\n\n    if(!doc.stickerCachedThumbs) {\n      defineNotNumerableProperties(doc, ['stickerCachedThumbs']);\n      doc.stickerCachedThumbs = {};\n    }\n\n    const thumb = doc.stickerCachedThumbs[toneIndex];\n    if(thumb && thumb.w >= canvas.width && thumb.h >= canvas.height) {\n      return;\n    }\n\n    /* if(doc.thumbs.find(t => t._ === 'photoStrippedSize') \n      || (doc.stickerCachedThumb || (doc.stickerSavedThumbWidth >= canvas.width && doc.stickerSavedThumbHeight >= canvas.height))) {\n      return;\n    } */\n\n    this.savingLottiePreview[key] = true;\n    canvas.toBlob((blob) => {\n      //console.log('got lottie preview', doc, blob, URL.createObjectURL(blob));\n\n      const thumb = {\n        url: URL.createObjectURL(blob),\n        w: canvas.width,\n        h: canvas.height\n      };\n\n      doc.stickerCachedThumbs[toneIndex] = thumb;\n\n      delete this.savingLottiePreview[key];\n      \n      /* const reader = new FileReader();\n      reader.onloadend = (e) => {\n        const uint8 = new Uint8Array(e.target.result as ArrayBuffer);\n        const thumb: PhotoSize.photoStrippedSize = {\n          _: 'photoStrippedSize',\n          bytes: uint8,\n          type: 'i'\n        };\n\n        doc.stickerSavedThumbWidth = canvas.width;\n        doc.stickerSavedThumbHeight = canvas.width;\n\n        defineNotNumerableProperties(thumb, ['url']);\n        thumb.url = URL.createObjectURL(blob);\n        doc.thumbs.findAndSplice(t => t._ === thumb._);\n        doc.thumbs.unshift(thumb);\n\n        if(!webpWorkerController.isWebpSupported()) {\n          doc.pFlags.stickerThumbConverted = true;\n        }\n\n        delete this.savingLottiePreview[doc.id];\n      };\n      reader.readAsArrayBuffer(blob); */\n    });\n  }\n\n  public saveDocFile(doc: MyDocument, queueId?: number) {\n    /* const options = this.getFileDownloadOptions(doc, undefined, queueId);\n    return appDownloadManager.downloadToDisc(options, doc.file_name); */\n    const promise = this.downloadDoc(doc, queueId);\n    promise.then(() => {\n      const cacheContext = appDownloadManager.getCacheContext(doc);\n      appDownloadManager.createDownloadAnchor(cacheContext.url, doc.file_name);\n    });\n    return promise;\n  }\n}\n\nconst appDocsManager = new AppDocsManager();\nMOUNT_CLASS_TO.appDocsManager = appDocsManager;\nexport default appDocsManager;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport type { ApplyServerTimeOffsetTask } from './timeManager';\r\nimport { MOUNT_CLASS_TO } from '../../config/debug';\r\n// import { tsNow } from '../../helpers/date';\r\nimport sessionStorage from '../sessionStorage';\r\nimport apiManager from './mtprotoworker';\r\n\r\nexport class ServerTimeManager {\r\n  /* private midnightNoOffset: number;\r\n  private midnightOffseted: Date;\r\n\r\n  private midnightOffset: number; */\r\n\r\n  public serverTimeOffset: number; // in seconds\r\n  /* private timeParams: {\r\n    midnightOffset: number,\r\n    serverTimeOffset: number\r\n  }; */\r\n\r\n  constructor() {\r\n    /* const timestampNow = tsNow(true);\r\n    this.midnightNoOffset = timestampNow - (timestampNow % 86400);\r\n    this.midnightOffseted = new Date();\r\n    this.midnightOffseted.setHours(0, 0, 0, 0);\r\n    \r\n    this.midnightOffset = this.midnightNoOffset - (Math.floor(+this.midnightOffseted / 1000)); */\r\n\r\n    this.serverTimeOffset = 0;\r\n    /* this.timeParams = {\r\n      midnightOffset: this.midnightOffset,\r\n      serverTimeOffset: this.serverTimeOffset\r\n    }; */\r\n\r\n    sessionStorage.get('server_time_offset').then((to) => {\r\n      if(to) {\r\n        this.serverTimeOffset = to;\r\n        // this.timeParams.serverTimeOffset = to;\r\n      }\r\n    });\r\n\r\n    apiManager.addTaskListener('applyServerTimeOffset', (task: ApplyServerTimeOffsetTask) => {\r\n      this.serverTimeOffset = task.payload;\r\n    });\r\n  }\r\n}\r\n\r\nconst serverTimeManager = new ServerTimeManager();\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.serverTimeManager = serverTimeManager);\r\nexport default serverTimeManager;\r\n","export default function assumeType<T>(x: unknown): asserts x is T {\r\n  return; // ¯\\_(ツ)_/¯\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\ntype TargetType = HTMLElement;\r\nexport type OnVisibilityChange = (target: TargetType, visible: boolean) => void;\r\n\r\nexport default class VisibilityIntersector {\r\n  private observer: IntersectionObserver;\r\n  private items: Map<TargetType, boolean> = new Map();\r\n  private locked = false;\r\n\r\n  constructor(onVisibilityChange: OnVisibilityChange) {\r\n    this.observer = new IntersectionObserver((entries) => {\r\n      if(this.locked) {\r\n        return;\r\n      }\r\n\r\n      const changed: {target: TargetType, visible: boolean}[] = [];\r\n\r\n      entries.forEach(entry => {\r\n        const target = entry.target as TargetType;\r\n\r\n        if(this.items.get(target) === entry.isIntersecting) {\r\n          return;\r\n        } else {\r\n          this.items.set(target, entry.isIntersecting);\r\n        }\r\n\r\n        /* if(entry.isIntersecting) {\r\n          console.log('ooo', entry);\r\n        } */\r\n\r\n        /* if(this.locked) {\r\n          return;\r\n        } */\r\n\r\n        changed[entry.isIntersecting ? 'unshift' : 'push']({target, visible: entry.isIntersecting});\r\n\r\n        //onVisibilityChange(target, entry.isIntersecting);\r\n      });\r\n\r\n      changed.forEach(smth => {\r\n        onVisibilityChange(smth.target, smth.visible);\r\n      });\r\n    });\r\n  }\r\n\r\n  public getVisible() {\r\n    const items: TargetType[] = [];\r\n    this.items.forEach((value, key) => {\r\n      if(value) {\r\n        items.push(key);\r\n      }\r\n    });\r\n\r\n    return items;\r\n  }\r\n\r\n  public clearVisible() {\r\n    const visible = this.getVisible();\r\n    for(const target of visible) {\r\n      this.items.set(target, false);\r\n    }\r\n  }\r\n\r\n  public isVisible(target: TargetType) {\r\n    return this.items.get(target);\r\n  }\r\n\r\n  public disconnect() {\r\n    this.observer.disconnect();\r\n    this.items.clear();\r\n  }\r\n\r\n  public refresh() {\r\n    this.observer.disconnect();\r\n\r\n    //window.requestAnimationFrame(() => {\r\n      const targets = [...this.items.keys()];\r\n      for(const target of targets) {\r\n        //this.items.set(target, false);\r\n        this.observer.observe(target);\r\n      }\r\n    //});\r\n  }\r\n\r\n  public refreshVisible() {\r\n    const visible = this.getVisible();\r\n    for(const target of visible) {\r\n      this.observer.unobserve(target);\r\n    }\r\n\r\n    for(const target of visible) {\r\n      this.observer.observe(target);\r\n    }\r\n  }\r\n\r\n  public observe(target: TargetType) {\r\n    this.items.set(target, false);\r\n    this.observer.observe(target);\r\n  }\r\n\r\n  public unobserve(target: TargetType) {\r\n    this.observer.unobserve(target);\r\n    this.items.delete(target);\r\n  }\r\n\r\n  public unlock() {\r\n    this.locked = false;\r\n  }\r\n\r\n  public unlockAndRefresh() {\r\n    this.unlock();\r\n    this.refresh();\r\n  }\r\n\r\n  public lock() {\r\n    this.locked = true;\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { logger, LogTypes } from \"../lib/logger\";\r\nimport VisibilityIntersector, { OnVisibilityChange } from \"./visibilityIntersector\";\r\nimport { findAndSpliceAll, indexOfAndSplice } from \"../helpers/array\";\r\nimport throttle from \"../helpers/schedulers/throttle\";\r\n\r\ntype LazyLoadElementBase = {\r\n  load: () => Promise<any>\r\n};\r\n\r\ntype LazyLoadElement = Omit<LazyLoadElementBase, 'load'> & {\r\n  load: (target?: HTMLElement) => Promise<any>,\r\n  div: HTMLElement\r\n  wasSeen?: boolean,\r\n};\r\n\r\nconst PARALLEL_LIMIT = 8;\r\n\r\nexport class LazyLoadQueueBase {\r\n  public queueId = 0;\r\n  protected queue: Array<LazyLoadElementBase> = [];\r\n  protected inProcess: Set<LazyLoadElementBase> = new Set();\r\n\r\n  protected lockPromise: Promise<void> = null;\r\n  protected unlockResolve: () => void = null;\r\n\r\n  protected log = logger('LL', LogTypes.Error);\r\n  protected processQueue: () => void;\r\n\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT) {\r\n    this.processQueue = throttle(() => this._processQueue(), 20, false);\r\n  }\r\n\r\n  public clear() {\r\n    this.inProcess.clear(); // ацтеки забьются, будет плохо\r\n\r\n    this.queue.length = 0;\r\n    // unreachable code\r\n    /* for(let item of this.inProcess) { \r\n      this.lazyLoadMedia.push(item);\r\n    } */\r\n  }\r\n\r\n  public lock() {\r\n    if(this.lockPromise) return;\r\n\r\n    //const perf = performance.now();\r\n    this.lockPromise = new Promise((resolve, reject) => {\r\n      this.unlockResolve = resolve;\r\n    });\r\n\r\n    /* if(DEBUG) {\r\n      this.lockPromise.then(() => {\r\n        this.log('was locked for:', performance.now() - perf);\r\n      });\r\n    } */\r\n  }\r\n\r\n  public unlock() {\r\n    if(!this.unlockResolve) return;\r\n\r\n    this.unlockResolve();\r\n    this.unlockResolve = this.lockPromise = null;\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  protected async processItem(item: LazyLoadElementBase) {\r\n    if(this.lockPromise) {\r\n      return;\r\n    }\r\n\r\n    this.inProcess.add(item);\r\n\r\n    /* if(DEBUG) {\r\n      this.log('will load media', this.lockPromise, item);\r\n    } */\r\n\r\n    try {\r\n      //await new Promise((resolve) => setTimeout(resolve, 2e3));\r\n      //await new Promise((resolve, reject) => window.requestAnimationFrame(() => window.requestAnimationFrame(resolve)));\r\n      //await item.load(item.div);\r\n      await this.loadItem(item);\r\n    } catch(err) {\r\n      if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(err as string)) {\r\n        this.log.error('loadMediaQueue error:', err/* , item */);\r\n      }\r\n    }\r\n\r\n    this.inProcess.delete(item);\r\n\r\n    /* if(DEBUG) {\r\n      this.log('loaded media', item);\r\n    } */\r\n\r\n    this.processQueue();\r\n  }\r\n\r\n  protected loadItem(item: LazyLoadElementBase) {\r\n    return item.load();\r\n  }\r\n\r\n  protected getItem() {\r\n    return this.queue.shift();\r\n  }\r\n\r\n  protected addElement(method: 'push' | 'unshift', el: LazyLoadElementBase) {\r\n    this.queue[method](el);\r\n    this.processQueue();\r\n  }\r\n\r\n  protected _processQueue(item?: LazyLoadElementBase) {\r\n    if(!this.queue.length || this.lockPromise || (this.parallelLimit > 0 && this.inProcess.size >= this.parallelLimit)) return;\r\n\r\n    //console.log('_processQueue start');\r\n    let added = 0;\r\n    do {\r\n      if(item) {\r\n        indexOfAndSplice(this.queue, item);\r\n      } else {\r\n        item = this.getItem();\r\n      }\r\n  \r\n      if(item) {\r\n        this.processItem(item);\r\n      } else {\r\n        break;\r\n      }\r\n\r\n      item = null;\r\n      ++added;\r\n    } while(this.inProcess.size < this.parallelLimit && this.queue.length);\r\n    //console.log('_processQueue end, added', added, this.queue.length);\r\n  }\r\n\r\n  public push(el: LazyLoadElementBase) {\r\n    this.addElement('push', el);\r\n  }\r\n\r\n  public unshift(el: LazyLoadElementBase) {\r\n    this.addElement('unshift', el);\r\n  }\r\n}\r\n\r\nexport class LazyLoadQueueIntersector extends LazyLoadQueueBase {\r\n  protected queue: Array<LazyLoadElement> = [];\r\n  protected inProcess: Set<LazyLoadElement> = new Set();\r\n\r\n  public intersector: VisibilityIntersector;\r\n  protected intersectorTimeout: number;\r\n\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT) {\r\n    super(parallelLimit);\r\n  }\r\n\r\n  public lock() {\r\n    super.lock();\r\n    this.intersector.lock();\r\n  }\r\n\r\n  public unlock() {\r\n    super.unlock();\r\n    this.intersector.unlock();\r\n  }\r\n\r\n  public unlockAndRefresh() {\r\n    super.unlock();\r\n    this.intersector.unlockAndRefresh();\r\n  }\r\n\r\n  public clear() {\r\n    super.clear();\r\n    this.intersector.disconnect();\r\n  }\r\n\r\n  public refresh() {\r\n    this.intersector.refresh();\r\n  }\r\n\r\n  protected loadItem(item: LazyLoadElement) {\r\n    return item.load(item.div);\r\n  }\r\n\r\n  protected addElement(method: 'push' | 'unshift', el: LazyLoadElement) {\r\n    const item = this.queue.find(i => i.div === el.div && i.load === el.load);\r\n    if(item) {\r\n      return false;\r\n    } else {\r\n      for(const item of this.inProcess) {\r\n        if(item.div === el.div && item.load === el.load) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.queue[method](el);\r\n    return true;\r\n  }\r\n\r\n  protected setProcessQueueTimeout() {\r\n    if(!this.intersectorTimeout) {\r\n      this.intersectorTimeout = window.setTimeout(() => {\r\n        this.intersectorTimeout = 0;\r\n        this.processQueue();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  public push(el: LazyLoadElement) {\r\n    super.push(el);\r\n  }\r\n\r\n  public unshift(el: LazyLoadElement) {\r\n    super.unshift(el);\r\n  }\r\n\r\n  public unobserve(el: HTMLElement) {\r\n    findAndSpliceAll(this.queue, (i) => i.div === el);\r\n\r\n    this.intersector.unobserve(el);\r\n  }\r\n}\r\n\r\nexport default class LazyLoadQueue extends LazyLoadQueueIntersector {\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT) {\r\n    super(parallelLimit);\r\n\r\n    this.intersector = new VisibilityIntersector(this.onVisibilityChange);\r\n  }\r\n\r\n  private onVisibilityChange = (target: HTMLElement, visible: boolean) => {\r\n    if(visible) {\r\n      /* if(DEBUG) {\r\n        this.log('isIntersecting', target);\r\n      } */\r\n\r\n      // need for set element first if scrolled\r\n      findAndSpliceAll(this.queue, (i) => i.div === target).forEach(item => {\r\n        item.wasSeen = true;\r\n        this.queue.unshift(item);\r\n        //this.processQueue(item);\r\n      });\r\n\r\n      this.setProcessQueueTimeout();\r\n    }\r\n  };\r\n\r\n  protected getItem() {\r\n    return this.queue.findAndSplice(item => item.wasSeen);\r\n  }\r\n\r\n  public async processItem(item: LazyLoadElement) {\r\n    await super.processItem(item);\r\n    this.intersector.unobserve(item.div);\r\n  }\r\n\r\n  protected addElement(method: 'push' | 'unshift', el: LazyLoadElement) {\r\n    const inserted = super.addElement(method, el);\r\n\r\n    if(!inserted) return false;\r\n\r\n    this.intersector.observe(el.div);\r\n    /* if(el.wasSeen) {\r\n      this.processQueue(el);\r\n    } else  */if(!el.hasOwnProperty('wasSeen')) {\r\n      el.wasSeen = false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\nexport class LazyLoadQueueRepeat extends LazyLoadQueueIntersector {\r\n  private _queue: Map<HTMLElement, LazyLoadElement> = new Map();\r\n\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT, protected onVisibilityChange?: OnVisibilityChange) {\r\n    super(parallelLimit);\r\n\r\n    this.intersector = new VisibilityIntersector((target, visible) => {\r\n      const spliced = findAndSpliceAll(this.queue, (i) => i.div === target);\r\n      if(visible) {\r\n        const items = spliced.length ? spliced : [this._queue.get(target)];\r\n        items.forEach(item => {\r\n          this.queue.unshift(item || this._queue.get(target));\r\n        });\r\n      }\r\n  \r\n      this.onVisibilityChange && this.onVisibilityChange(target, visible);\r\n      this.setProcessQueueTimeout();\r\n    });\r\n  }\r\n\r\n  public clear() {\r\n    super.clear();\r\n    this._queue.clear();\r\n  }\r\n\r\n  /* public async processItem(item: LazyLoadElement) {\r\n    //await super.processItem(item);\r\n    await LazyLoadQueueBase.prototype.processItem.call(this, item);\r\n\r\n    if(this.lazyLoadMedia.length) {\r\n      this.processQueue();\r\n    }\r\n  } */\r\n\r\n  public observe(el: LazyLoadElement) {\r\n    this._queue.set(el.div, el);\r\n    this.intersector.observe(el.div);\r\n  }\r\n}\r\n\r\nexport class LazyLoadQueueRepeat2 extends LazyLoadQueueIntersector {\r\n  constructor(protected parallelLimit = PARALLEL_LIMIT, protected onVisibilityChange?: OnVisibilityChange) {\r\n    super(parallelLimit);\r\n\r\n    this.intersector = new VisibilityIntersector((target, visible) => {\r\n      const spliced = findAndSpliceAll(this.queue, (i) => i.div === target);\r\n      if(visible && spliced.length) {\r\n        spliced.forEach(item => {\r\n          this.queue.unshift(item);\r\n        });\r\n      }\r\n  \r\n      this.onVisibilityChange && this.onVisibilityChange(target, visible);\r\n      this.setProcessQueueTimeout();\r\n    });\r\n  }\r\n\r\n  public observe(el: HTMLElement) {\r\n    this.intersector.observe(el);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nexport function bytesToHex(bytes: ArrayLike<number>) {\r\n  const length = bytes.length;\r\n  const arr: string[] = new Array(length);\r\n  for(let i = 0; i < length; ++i) {\r\n    arr[i] = (bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16);\r\n  }\r\n  return arr.join('');\r\n}\r\n\r\nexport function bytesFromHex(hexString: string) {\r\n  const len = hexString.length;\r\n  const bytes = new Uint8Array(Math.ceil(len / 2));\r\n  let start = 0;\r\n\r\n  if(len % 2) { // read 0x581 as 0x0581\r\n    bytes[start++] = parseInt(hexString.charAt(0), 16);\r\n  }\r\n\r\n  for(let i = start; i < len; i += 2) {\r\n    bytes[start++] = parseInt(hexString.substr(i, 2), 16);\r\n  }\r\n\r\n  return bytes;\r\n}\r\n\r\nexport function bytesToBase64(bytes: number[] | Uint8Array) {\r\n  let mod3: number;\r\n  let result = '';\r\n\r\n  for(let nLen = bytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; ++nIdx) {\r\n    mod3 = nIdx % 3;\r\n    nUint24 |= bytes[nIdx] << (16 >>> mod3 & 24);\r\n    if(mod3 === 2 || nLen - nIdx === 1) {\r\n      result += String.fromCharCode(\r\n        uint6ToBase64(nUint24 >>> 18 & 63),\r\n        uint6ToBase64(nUint24 >>> 12 & 63),\r\n        uint6ToBase64(nUint24 >>> 6 & 63),\r\n        uint6ToBase64(nUint24 & 63)\r\n      );\r\n      nUint24 = 0;\r\n    }\r\n  }\r\n\r\n  return result.replace(/A(?=A$|$)/g, '=');\r\n}\r\n\r\nexport function uint6ToBase64(nUint6: number) {\r\n  return nUint6 < 26\r\n    ? nUint6 + 65\r\n    : nUint6 < 52\r\n      ? nUint6 + 71\r\n      : nUint6 < 62\r\n        ? nUint6 - 4\r\n        : nUint6 === 62\r\n          ? 43\r\n          : nUint6 === 63\r\n            ? 47\r\n            : 65;\r\n}\r\n\r\nexport function bytesCmp(bytes1: number[] | Uint8Array, bytes2: number[] | Uint8Array) {\r\n  const len = bytes1.length;\r\n  if(len !== bytes2.length) {\r\n    return false;\r\n  }\r\n\r\n  for(let i = 0; i < len; ++i) {\r\n    if(bytes1[i] !== bytes2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport function bytesXor(bytes1: Uint8Array, bytes2: Uint8Array) {\r\n  const len = bytes1.length;\r\n  const bytes = new Uint8Array(len);\r\n\r\n  for(let i = 0; i < len; ++i) {\r\n    bytes[i] = bytes1[i] ^ bytes2[i];\r\n  }\r\n\r\n  return bytes;\r\n}\r\n\r\n/* export function bytesToArrayBuffer(b: number[]) {\r\n  return (new Uint8Array(b)).buffer;\r\n}\r\n\r\nexport function convertToArrayBuffer(bytes: any | ArrayBuffer | Uint8Array) {\r\n  // Be careful with converting subarrays!!\r\n  if(bytes instanceof ArrayBuffer) {\r\n    return bytes;\r\n  }\r\n  if(bytes.buffer !== undefined &&\r\n    bytes.buffer.byteLength === bytes.length * bytes.BYTES_PER_ELEMENT) {\r\n    return bytes.buffer;\r\n  }\r\n  return bytesToArrayBuffer(bytes);\r\n} */\r\n\r\nexport function convertToUint8Array(bytes: Uint8Array | ArrayBuffer | number[] | string): Uint8Array {\r\n  if(bytes instanceof Uint8Array) {\r\n    return bytes;\r\n  } else if(typeof(bytes) === 'string') {\r\n    return new TextEncoder().encode(bytes);\r\n  }\r\n\r\n  return new Uint8Array(bytes);\r\n}\r\n\r\n/* export function bytesFromArrayBuffer(buffer: ArrayBuffer) {\r\n  const len = buffer.byteLength;\r\n  const byteView = new Uint8Array(buffer);\r\n  const bytes: number[] = [];\r\n\r\n  for(let i = 0; i < len; ++i) {\r\n    bytes[i] = byteView[i];\r\n  }\r\n\r\n  return bytes;\r\n}\r\n\r\nexport function bufferConcat(buffer1: any, buffer2: any) {\r\n  const l1 = buffer1.byteLength || buffer1.length;\r\n  const l2 = buffer2.byteLength || buffer2.length;\r\n  const tmp = new Uint8Array(l1 + l2);\r\n  tmp.set(buffer1 instanceof ArrayBuffer ? new Uint8Array(buffer1) : buffer1, 0);\r\n  tmp.set(buffer2 instanceof ArrayBuffer ? new Uint8Array(buffer2) : buffer2, l1);\r\n\r\n  return tmp.buffer;\r\n} */\r\n\r\nexport function bufferConcats(...args: (ArrayBuffer | Uint8Array | number[])[]) {\r\n  const length = args.reduce((acc, v) => acc + ((v as ArrayBuffer).byteLength || (v as Uint8Array).length), 0);\r\n\r\n  const tmp = new Uint8Array(length);\r\n  \r\n  let lastLength = 0;\r\n  args.forEach(b => {\r\n    tmp.set(b instanceof ArrayBuffer ? new Uint8Array(b) : b, lastLength);\r\n    lastLength += (b as ArrayBuffer).byteLength || (b as Uint8Array).length;\r\n  });\r\n\r\n  return tmp/* .buffer */;\r\n}\r\n\r\nexport function bytesFromWordss(input: Uint32Array) {\r\n  const o = new Uint8Array(input.byteLength);\r\n  for(let i = 0, length = input.length * 4; i < length; ++i) {\r\n    o[i] = ((input[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff);\r\n  }\r\n\r\n  return o;\r\n}\r\n\r\nexport function bytesToWordss(input: Parameters<typeof convertToUint8Array>[0]) {\r\n  const bytes = convertToUint8Array(input);\r\n\r\n  const words: number[] = [];\r\n  for(let i = 0, len = bytes.length; i < len; ++i) {\r\n    words[i >>> 2] |= bytes[i] << (24 - (i % 4) * 8);\r\n  }\r\n\r\n  return new Uint32Array(words);\r\n}\r\n\r\n// * https://stackoverflow.com/a/52827031\r\n/* export const isBigEndian = (() => {\r\n  const array = new Uint8Array(4);\r\n  const view = new Uint32Array(array.buffer);\r\n  return !((view[0] = 1) & array[0]);\r\n})(); */\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { HelpCountry, HelpCountryCode } from \"../layer\";\nimport I18n from \"../lib/langPack\";\n\nlet sortedCountries: HelpCountry[];\ntype PrefixCountry = {country: HelpCountry, code: HelpCountryCode};\nconst prefixes: Map<string, PrefixCountry> = new Map();\nlet maxPrefixLength = 0;\nconst setPrefix = (country: HelpCountry, code: HelpCountryCode, prefix: string = '') => {\n  prefix = code.country_code + prefix;\n  /* if(prefixes.has(prefix)) {\n    console.error('asdasdasd', prefixes.get(prefix), country, code);\n  } */\n  maxPrefixLength = Math.max(maxPrefixLength, prefix.length);\n  prefixes.set(prefix, {country, code});\n};\n\nexport function formatPhoneNumber(originalStr: string): {\n  formatted: string,\n  country: HelpCountry,\n  code: HelpCountryCode,\n  leftPattern: string\n} {\n  originalStr = originalStr || '';\n  \n  if(!prefixes.size) {\n    I18n.countriesList.forEach(country => {\n      country.country_codes.forEach(code => {\n        if(code.prefixes) {\n          code.prefixes.forEach(prefix => {\n            setPrefix(country, code, prefix);\n          });\n        } else {\n          setPrefix(country, code);\n        }\n      });\n    });\n  }\n\n  // return {formatted: originalStr, country: undefined as any, leftPattern: ''};\n  let str = originalStr.replace(/\\D/g, '');\n  let phoneCode = str.slice(0, maxPrefixLength);\n  \n  ////console.log('str', str, phoneCode);\n  // if(!sortedCountries) {\n  //   sortedCountries = I18n.countriesList.slice().sort((a, b) => b.country_codes[0].country_code.length - a.country_codes[0].country_code.length);\n  // }\n  \n  // let country = sortedCountries.find((c) => {\n  //   return c.country_codes.find((c) => phoneCode.indexOf(c.replace(/\\D/g, '')) === 0);\n  // });\n\n  let prefixCountry: PrefixCountry;\n  for(let i = phoneCode.length - 1; i >= 0; --i) { // lookup for country by prefix\n    prefixCountry = prefixes.get(phoneCode.slice(0, i + 1));\n    if(prefixCountry) {\n      break;\n    }\n  }\n\n  if(!prefixCountry) {\n    return {\n      formatted: str, \n      country: undefined, \n      code: undefined, \n      leftPattern: ''\n    };\n  }\n\n  // country = /* PhoneCodesMain[country.phoneCode] ||  */country;\n  const country = prefixCountry.country;\n  \n  const patterns = prefixCountry.code.patterns || [];\n  const searchForPattern = str.slice(prefixCountry.code.country_code.length); // splice country code\n  let pattern = '', mostMatchedPatternMatches = 0, mostMatchedPattern = '';\n  for(let i = patterns.length - 1; i >= 0; --i) {\n    pattern = patterns[i];\n\n    const _pattern = pattern.replace(/ /g, '');\n    let patternMatches = 0;\n    for(let k = 0, length = Math.min(searchForPattern.length, _pattern.length); k < length; ++k) {\n      if(searchForPattern[k] === _pattern[k] || _pattern[k] === 'X') {\n        ++patternMatches;\n      } else {\n        patternMatches = 0;\n        break;\n      }\n    }\n\n    if(patternMatches > mostMatchedPatternMatches) {\n      mostMatchedPatternMatches = patternMatches;\n      mostMatchedPattern = pattern;\n    }\n  }\n\n  pattern = mostMatchedPattern || pattern;\n  pattern = pattern.replace(/\\d/g, 'X');\n\n  pattern = prefixCountry.code.country_code + ' ' + pattern;\n  // let pattern = country.pattern || country.phoneCode;\n  pattern.split('').forEach((symbol, idx) => {\n    if(symbol === ' ' && str[idx] !== ' ' && str.length > idx) {\n      str = str.slice(0, idx) + ' ' + str.slice(idx);\n    }\n  });\n  \n  /* if(country.pattern) {\n    str = str.slice(0, country.pattern.length);\n  } */\n\n  let leftPattern = pattern && pattern.length > str.length ? pattern.slice(str.length) : '';\n  if(leftPattern) {\n    /* const length = str.length;\n    leftPattern = leftPattern.split('').map((_, idx) => (length + idx).toString().slice(-1)).join(''); */\n    leftPattern = leftPattern.replace(/X/g, '‒');\n    // leftPattern = leftPattern.replace(/X/g, '0');\n  }\n  \n  return {formatted: str, country, code: prefixCountry.code, leftPattern};\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToSpan(html: string) {\r\n  const span = document.createElement('span');\r\n  span.innerHTML = html;\r\n  return span;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\n\r\nexport class AppMessagesIdsManager {\r\n  private static MESSAGE_ID_INCREMENT = 0x10000;\r\n  private static MESSAGE_ID_OFFSET = 0xFFFFFFFF;\r\n\r\n  private tempNum = 0;\r\n\r\n  public generateMessageId(messageId: number, temp = false) {\r\n    const q = AppMessagesIdsManager.MESSAGE_ID_OFFSET;\r\n    const num = temp ? ++this.tempNum : 0;\r\n    if(messageId >= q) {\r\n      if(temp) {\r\n        return messageId + (num & (AppMessagesIdsManager.MESSAGE_ID_INCREMENT - 1));\r\n      }\r\n\r\n      return messageId;\r\n    }\r\n\r\n    return q + (messageId * AppMessagesIdsManager.MESSAGE_ID_INCREMENT + (num & (AppMessagesIdsManager.MESSAGE_ID_INCREMENT - 1)));\r\n  }\r\n\r\n  /**\r\n   * * will ignore outgoing offset\r\n   */\r\n  public getServerMessageId(messageId: number) {\r\n    return this.clearMessageId(messageId, true);\r\n  }\r\n\r\n  public clearMessageId(messageId: number, toServer?: boolean) {\r\n    const q = AppMessagesIdsManager.MESSAGE_ID_OFFSET;\r\n    if(messageId < q) { // id 0 -> mid 0xFFFFFFFF, so 0xFFFFFFFF must convert to 0\r\n      return messageId;\r\n    }\r\n\r\n    const l = AppMessagesIdsManager.MESSAGE_ID_INCREMENT - 1;\r\n    const used = messageId & l;\r\n    if(used !== l) {\r\n      messageId -= used + 1;\r\n    }\r\n\r\n    return toServer ? (messageId - q) / AppMessagesIdsManager.MESSAGE_ID_INCREMENT : messageId;\r\n  }\r\n\r\n  public incrementMessageId(messageId: number, increment: number) {\r\n    return this.generateMessageId(this.getServerMessageId(messageId) + increment);\r\n  }\r\n}\r\n\r\nconst appMessagesIdsManager = new AppMessagesIdsManager();\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.appMessagesIdsManager = appMessagesIdsManager);\r\nexport default appMessagesIdsManager;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport class WindowSize {\n  public width = 0;\n  public height = 0;\n\n  constructor() {\n    // @ts-ignore\n    const w: any = 'visualViewport' in window ? window.visualViewport : window;\n    const set = () => {\n      this.width = w.width || w.innerWidth;\n      this.height = w.height || w.innerHeight;\n    };\n    w.addEventListener('resize', set);\n    set();\n  }\n}\n\nconst windowSize = new WindowSize();\nexport default windowSize;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {Awaited} from '../types';\n\nexport default function callbackifyAll<T extends readonly unknown[] | [], R extends any>(\n  values: T, \n  callback: (result: { -readonly [P in keyof T]: Awaited<T[P]> }) => R\n): PromiseLike<R> | R {\n  if(values.some(value => value instanceof Promise)) {\n    return Promise.all(values).then(callback as any);\n  } else {\n    return callback(values as any);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport assumeType from \"../../helpers/assumeType\";\nimport callbackify from \"../../helpers/callbackify\";\nimport callbackifyAll from \"../../helpers/callbackifyAll\";\nimport { copy } from \"../../helpers/object\";\nimport { AvailableReaction, Message, MessagePeerReaction, MessagesAvailableReactions, Update, Updates } from \"../../layer\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport { ReferenceContext } from \"../mtproto/referenceDatabase\";\nimport rootScope from \"../rootScope\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appDocsManager from \"./appDocsManager\";\nimport appMessagesIdsManager from \"./appMessagesIdsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appProfileManager from \"./appProfileManager\";\nimport appUsersManager from \"./appUsersManager\";\n\nconst SAVE_DOC_KEYS = [\n  'static_icon' as const,\n  'appear_animation' as const,\n  'select_animation' as const,\n  'activate_animation' as const,\n  'effect_animation' as const,\n  'around_animation' as const,\n  'center_icon' as const\n];\n\nconst REFERENCE_CONTEXT: ReferenceContext = {\n  type: 'reactions'\n};\n\nexport class AppReactionsManager {\n  private availableReactions: AvailableReaction[];\n  private sendReactionPromises: Map<string, Promise<any>>;\n  private lastSendingTimes: Map<string, number>;\n\n  constructor() {\n    rootScope.addEventListener('language_change', () => {\n      this.availableReactions = undefined;\n      this.getAvailableReactions();\n    });\n\n    this.sendReactionPromises = new Map();\n    this.lastSendingTimes = new Map();\n\n    setTimeout(() => {\n      Promise.resolve(this.getAvailableReactions()).then(async(availableReactions) => {\n        for(const availableReaction of availableReactions) {\n          await Promise.all([\n            availableReaction.around_animation && appDocsManager.downloadDoc(availableReaction.around_animation),\n            availableReaction.static_icon && appDocsManager.downloadDoc(availableReaction.static_icon),\n            availableReaction.appear_animation && appDocsManager.downloadDoc(availableReaction.appear_animation),\n            availableReaction.center_icon && appDocsManager.downloadDoc(availableReaction.center_icon)\n          ]);\n        }\n      });\n    }, 7.5e3);\n  }\n\n  public getAvailableReactions() {\n    if(this.availableReactions) return this.availableReactions;\n    return apiManager.invokeApiSingleProcess({\n      method: 'messages.getAvailableReactions',\n      processResult: (messagesAvailableReactions) => {\n        assumeType<MessagesAvailableReactions.messagesAvailableReactions>(messagesAvailableReactions);\n\n        const availableReactions = this.availableReactions = messagesAvailableReactions.reactions;\n        for(const reaction of availableReactions) {\n          for(const key of SAVE_DOC_KEYS) {\n            if(!reaction[key]) {\n              continue;\n            }\n            \n            reaction[key] = appDocsManager.saveDoc(reaction[key], REFERENCE_CONTEXT);\n          }\n        }\n\n        return availableReactions;\n      },\n      params: {\n        hash: 0\n      }\n    });\n  }\n\n  public getActiveAvailableReactions() {\n    return callbackify(this.getAvailableReactions(), (availableReactions) => {\n      return availableReactions.filter(availableReaction => !availableReaction.pFlags.inactive);\n    });\n  }\n\n  public getAvailableReactionsForPeer(peerId: PeerId) {\n    const activeAvailableReactions = this.getActiveAvailableReactions();\n    if(peerId.isUser()) {\n      return this.unshiftQuickReaction(activeAvailableReactions);\n    }\n\n    const chatFull = appProfileManager.getChatFull(peerId.toChatId());\n    return callbackifyAll([activeAvailableReactions, chatFull, this.getQuickReaction()], ([activeAvailableReactions, chatFull, quickReaction]) => {\n      const chatAvailableReactions = chatFull.available_reactions ?? [];\n\n      const filteredChatAvailableReactions = chatAvailableReactions.map(reaction => {\n        return activeAvailableReactions.find(availableReaction => availableReaction.reaction === reaction);\n      }).filter(Boolean);\n\n      return this.unshiftQuickReactionInner(filteredChatAvailableReactions, quickReaction);\n    });\n  }\n\n  private unshiftQuickReactionInner(availableReactions: AvailableReaction.availableReaction[], quickReaction: AvailableReaction.availableReaction) {\n    const availableReaction = availableReactions.findAndSplice(availableReaction => availableReaction.reaction === quickReaction.reaction);\n    if(availableReaction) {\n      availableReactions.unshift(availableReaction);\n    }\n\n    return availableReactions;\n  }\n\n  private unshiftQuickReaction(\n    availableReactions: AvailableReaction.availableReaction[] | PromiseLike<AvailableReaction.availableReaction[]>, \n    quickReaction: ReturnType<AppReactionsManager['getQuickReaction']> = this.getQuickReaction()\n  ) {\n    return callbackifyAll([\n      availableReactions,\n      quickReaction\n    ], ([availableReactions, quickReaction]) => {\n      return this.unshiftQuickReactionInner(availableReactions, quickReaction);\n    });\n  }\n\n  public getAvailableReactionsByMessage(message: Message.message) {\n    const peerId = (message.fwd_from?.channel_post && appPeersManager.isMegagroup(message.peerId) && message.fwdFromId) || message.peerId;\n    return this.getAvailableReactionsForPeer(peerId);\n  }\n\n  public isReactionActive(reaction: string) {\n    if(!this.availableReactions) return false;\n    return !!this.availableReactions.find(availableReaction => availableReaction.reaction === reaction);\n  }\n\n  public getQuickReaction() {\n    return callbackifyAll([\n      apiManager.getAppConfig(),\n      this.getAvailableReactions()\n    ], ([appConfig, availableReactions]) => {\n      return availableReactions.find(reaction => reaction.reaction === appConfig.reactions_default);\n    });\n  }\n\n  public getReactionCached(reaction: string) {\n    return this.availableReactions.find(availableReaction => availableReaction.reaction === reaction);\n  }\n\n  public getReaction(reaction: string) {\n    return callbackify(this.getAvailableReactions(), () => {\n      return this.getReactionCached(reaction);\n    });\n  }\n\n  public getMessagesReactions(peerId: PeerId, mids: number[]) {\n    return apiManager.invokeApiSingleProcess({\n      method: 'messages.getMessagesReactions',\n      params: {\n        id: mids.map(mid => appMessagesIdsManager.getServerMessageId(mid)),\n        peer: appPeersManager.getInputPeerById(peerId)\n      },\n      processResult: (updates) => {\n        apiUpdatesManager.processUpdateMessage(updates);\n\n        // const update = (updates as Updates.updates).updates.find(update => update._ === 'updateMessageReactions') as Update.updateMessageReactions;\n        // return update.reactions;\n      }\n    });\n  }\n\n  public getMessageReactionsList(peerId: PeerId, mid: number, limit: number, reaction?: string, offset?: string) {\n    return apiManager.invokeApiSingleProcess({\n      method: 'messages.getMessageReactionsList',\n      params: {\n        peer: appPeersManager.getInputPeerById(peerId),\n        id: appMessagesIdsManager.getServerMessageId(mid),\n        limit,\n        reaction,\n        offset\n      },\n      processResult: (messageReactionsList) => {\n        appUsersManager.saveApiUsers(messageReactionsList.users);\n        return messageReactionsList;\n      }\n    });\n  }\n\n  public setDefaultReaction(reaction: string) {\n    return apiManager.invokeApi('messages.setDefaultReaction', {reaction}).then(value => {\n      if(value) {\n        const appConfig = rootScope.appConfig;\n        if(appConfig) {\n          appConfig.reactions_default = reaction;\n        } else { // if no config or loading it - overwrite\n          apiManager.getAppConfig(true);\n        }\n\n        rootScope.dispatchEvent('quick_reaction', reaction);\n      }\n\n      return value;\n    });\n  }\n\n  public sendReaction(message: Message.message, reaction?: string, onlyLocal?: boolean) {\n    const lastSendingTimeKey = message.peerId + '_' + message.mid;\n    const lastSendingTime = this.lastSendingTimes.get(lastSendingTimeKey);\n    if(lastSendingTime) {\n      return;\n    } else {\n      this.lastSendingTimes.set(lastSendingTimeKey, Date.now());\n      setTimeout(() => {\n        this.lastSendingTimes.delete(lastSendingTimeKey);\n      }, 333);\n    }\n\n    const {peerId, mid} = message;\n    const myPeerId = rootScope.myId;\n\n    let reactions = onlyLocal ? message.reactions : copy(message.reactions);\n    let chosenReactionIdx = reactions ? reactions.results.findIndex((reactionCount) => reactionCount.pFlags.chosen) : -1;\n    let chosenReaction = chosenReactionIdx !== -1 && reactions.results[chosenReactionIdx];\n    if(chosenReaction) { // clear current reaction\n      --chosenReaction.count;\n      delete chosenReaction.pFlags.chosen;\n\n      if(reaction === chosenReaction.reaction) {\n        reaction = undefined;\n      }\n\n      if(!chosenReaction.count) {\n        reactions.results.splice(chosenReactionIdx, 1);\n      }/*  else {\n        insertInDescendSortedArray(reactions.results, chosenReaction, 'count', chosenReactionIdx);\n      } */\n\n      if(reactions.recent_reactions) {\n        reactions.recent_reactions.findAndSplice((recentReaction) => appPeersManager.getPeerId(recentReaction.peer_id) === myPeerId);\n      }\n\n      if(!reactions.results.length) {\n        reactions = undefined;\n      }\n    }\n\n    if(reaction) {\n      if(!reactions) {\n        reactions/*  = message.reactions */ = {\n          _: 'messageReactions',\n          results: [],\n          pFlags: {}\n        };\n\n        if(!appPeersManager.isBroadcast(message.peerId)) {\n          reactions.pFlags.can_see_list = true;\n        }\n      }\n\n      let reactionCountIdx = reactions.results.findIndex((reactionCount) => reactionCount.reaction === reaction);\n      let reactionCount = reactionCountIdx !== -1 && reactions.results[reactionCountIdx];\n      if(!reactionCount) {\n        reactionCount = {\n          _: 'reactionCount',\n          count: 0,\n          reaction,\n          pFlags: {}\n        };\n\n        reactionCountIdx = reactions.results.push(reactionCount) - 1;\n      }\n\n      ++reactionCount.count;\n      reactionCount.pFlags.chosen = true;\n\n      if(!reactions.recent_reactions && reactions.pFlags.can_see_list) {\n        reactions.recent_reactions = [];\n      }\n\n      if(reactions.recent_reactions) {\n        const userReaction: MessagePeerReaction = {\n          _: 'messagePeerReaction',\n          reaction,\n          peer_id: appPeersManager.getOutputPeer(myPeerId)\n        };\n\n        if(!appPeersManager.isMegagroup(peerId)) {\n          reactions.recent_reactions.push(userReaction);\n          reactions.recent_reactions = reactions.recent_reactions.slice(-3);\n        } else {\n          reactions.recent_reactions.unshift(userReaction);\n          reactions.recent_reactions = reactions.recent_reactions.slice(0, 3);\n        }\n      }\n\n      // insertInDescendSortedArray(reactions.results, reactionCount, 'count', reactionCountIdx);\n    }\n\n    const availableReactions = this.availableReactions;\n    if(reactions && availableReactions?.length) {\n      const indexes: Map<string, number> = new Map();\n      availableReactions.forEach((availableReaction, idx) => {\n        indexes.set(availableReaction.reaction, idx);\n      });\n\n      reactions.results.sort((a, b) => {\n        return (b.count - a.count) || (indexes.get(a.reaction) - indexes.get(b.reaction));\n      });\n    }\n\n    if(onlyLocal) {\n      message.reactions = reactions;\n      rootScope.dispatchEvent('message_reactions', {message, changedResults: []});\n      return Promise.resolve();\n    }\n\n    apiUpdatesManager.processLocalUpdate({\n      _: 'updateMessageReactions',\n      peer: message.peer_id,\n      msg_id: message.id,\n      reactions: reactions,\n      local: true\n    });\n\n    const promiseKey = [peerId, mid].join('-');\n    const msgId = appMessagesIdsManager.getServerMessageId(mid);\n    const promise = apiManager.invokeApi('messages.sendReaction', {\n      peer: appPeersManager.getInputPeerById(peerId),\n      msg_id: msgId,\n      reaction\n    }).then((updates) => {\n      assumeType<Updates.updates>(updates);\n      \n      const editMessageUpdateIdx = updates.updates.findIndex(update => update._ === 'updateEditMessage' || update._ === 'updateEditChannelMessage');\n      if(editMessageUpdateIdx !== -1) {\n        const editMessageUpdate = updates.updates[editMessageUpdateIdx] as Update.updateEditMessage | Update.updateEditChannelMessage;\n        updates.updates[editMessageUpdateIdx] = {\n          _: 'updateMessageReactions',\n          msg_id: msgId,\n          peer: appPeersManager.getOutputPeer(peerId),\n          reactions: (editMessageUpdate.message as Message.message).reactions,\n          pts: editMessageUpdate.pts,\n          pts_count: editMessageUpdate.pts_count\n        };\n      }\n\n      apiUpdatesManager.processUpdateMessage(updates);\n    }).catch(err => {\n      if(err.type === 'REACTION_INVALID' && this.sendReactionPromises.get(promiseKey) === promise) {\n        this.sendReaction(message, chosenReaction?.reaction, true);\n      }\n    }).finally(() => {\n      if(this.sendReactionPromises.get(promiseKey) === promise) {\n        this.sendReactionPromises.delete(promiseKey);\n      }\n    });\n    \n    this.sendReactionPromises.set(promiseKey, promise);\n    return promise;\n  }\n}\n\nconst appReactionsManager = new AppReactionsManager();\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.appReactionsManager = appReactionsManager);\nexport default appReactionsManager;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { fontFamily } from \"../../components/middleEllipsis\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { deepEqual } from \"../../helpers/object\";\r\nimport { convertInputKeyToKey } from \"../../helpers/string\";\r\nimport { IS_MOBILE } from \"../../environment/userAgent\";\r\nimport { InputNotifyPeer, InputPeerNotifySettings, NotifyPeer, PeerNotifySettings, Update } from \"../../layer\";\r\nimport I18n from \"../langPack\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport webPushApiManager, { PushSubscriptionNotify } from \"../mtproto/webPushApiManager\";\r\nimport rootScope from \"../rootScope\";\r\nimport stateStorage from \"../stateStorage\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appChatsManager from \"./appChatsManager\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appRuntimeManager from \"./appRuntimeManager\";\r\nimport appStateManager from \"./appStateManager\";\r\nimport appUsersManager from \"./appUsersManager\";\r\nimport IS_VIBRATE_SUPPORTED from \"../../environment/vibrateSupport\";\r\nimport { MUTE_UNTIL } from \"../mtproto/mtproto_config\";\r\nimport throttle from \"../../helpers/schedulers/throttle\";\r\n\r\ntype MyNotification = Notification & {\r\n  hidden?: boolean,\r\n  show?: () => void,\r\n};\r\n\r\nexport type NotifyOptions = Partial<{\r\n  tag: string;\r\n  image: string;\r\n  key: string;\r\n  title: string;\r\n  message: string;\r\n  silent: boolean;\r\n  onclick: () => void;\r\n}>;\r\n\r\nexport type NotificationSettings = {\r\n  nodesktop: boolean,\r\n  volume: number,\r\n  novibrate: boolean,\r\n  nopreview: boolean,\r\n  nopush: boolean,\r\n  nosound: boolean\r\n};\r\n\r\ntype ImSadAboutIt = Promise<PeerNotifySettings> | PeerNotifySettings;\r\nexport class AppNotificationsManager {\r\n  private notificationsUiSupport: boolean;\r\n  private notificationsShown: {[key: string]: MyNotification | true} = {};\r\n  private notificationIndex = 0;\r\n  private notificationsCount = 0;\r\n  private soundsPlayed: {[tag: string]: number} = {};\r\n  private vibrateSupport = IS_VIBRATE_SUPPORTED;\r\n  private nextSoundAt: number;\r\n  private prevSoundVolume: number;\r\n  private peerSettings = {\r\n    notifyPeer: {} as {[peerId: PeerId]: ImSadAboutIt},\r\n    notifyUsers: null as ImSadAboutIt,\r\n    notifyChats: null as ImSadAboutIt,\r\n    notifyBroadcasts: null as ImSadAboutIt\r\n  };\r\n  //private exceptions: {[peerId: string]: PeerNotifySettings} = {};\r\n  private notifyContactsSignUp: Promise<boolean>;\r\n  private faviconEl: HTMLLinkElement = document.head.querySelector('link[rel=\"icon\"]');\r\n\r\n  private titleBackup = document.title;\r\n  private titleChanged = false;\r\n  private titleInterval: number;\r\n  private prevFavicon: string;\r\n  private stopped = false;\r\n\r\n  private settings: NotificationSettings = {} as any;\r\n\r\n  private registeredDevice: any;\r\n  private pushInited = false;\r\n\r\n  private topMessagesDeferred: CancellablePromise<void>;\r\n\r\n  private notifySoundEl: HTMLElement;\r\n\r\n  private getNotifyPeerTypePromise: Promise<any>;\r\n\r\n  private checkMuteUntilTimeout: number;\r\n  private checkMuteUntilThrottled: () => void;\r\n\r\n  constructor() {\r\n    // @ts-ignore\r\n    navigator.vibrate = navigator.vibrate || navigator.mozVibrate || navigator.webkitVibrate;\r\n\r\n    this.notificationsUiSupport = ('Notification' in window) || ('mozNotification' in navigator);\r\n\r\n    this.topMessagesDeferred = deferredPromise<void>();\r\n\r\n    this.notifySoundEl = document.createElement('div');\r\n    this.notifySoundEl.id = 'notify-sound';\r\n    document.body.append(this.notifySoundEl);\r\n\r\n    this.checkMuteUntilThrottled = throttle(this.checkMuteUntil, 1000, false);\r\n\r\n    rootScope.addEventListener('instance_deactivated', () => {\r\n      this.stop();\r\n    });\r\n\r\n    rootScope.addEventListener('instance_activated', () => {\r\n      if(this.stopped) {\r\n        this.start();\r\n      }\r\n    });\r\n\r\n    rootScope.addEventListener('idle', (newVal) => {\r\n      if(this.stopped) {\r\n        return;\r\n      }\r\n\r\n      if(!newVal) {\r\n        this.clear();\r\n      }\r\n\r\n      this.toggleToggler();\r\n    });\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateNotifySettings: (update) => {\r\n        const peerId = update.peer._ === 'notifyPeer' && appPeersManager.getPeerId(update.peer.peer);\r\n        const key = update.peer._ !== 'notifyPeer' ? update.peer._ : undefined;\r\n        this.savePeerSettings({\r\n          key,\r\n          peerId, \r\n          settings: update.notify_settings\r\n        });\r\n        rootScope.dispatchEvent('notify_settings', update);\r\n      }\r\n    });\r\n\r\n    rootScope.addEventListener('push_init', (tokenData) => {\r\n      this.pushInited = true;\r\n      if(!this.settings.nodesktop && !this.settings.nopush) {\r\n        if(tokenData) {\r\n          this.registerDevice(tokenData);\r\n        } else {\r\n          webPushApiManager.subscribe();\r\n        }\r\n      } else {\r\n        this.unregisterDevice(tokenData);\r\n      }\r\n    });\r\n    rootScope.addEventListener('push_subscribe', (tokenData) => {\r\n      this.registerDevice(tokenData);\r\n    });\r\n    rootScope.addEventListener('push_unsubscribe', (tokenData) => {\r\n      this.unregisterDevice(tokenData);\r\n    });\r\n\r\n    rootScope.addEventListener('dialogs_multiupdate', () => {\r\n      //unregisterTopMsgs()\r\n      this.topMessagesDeferred.resolve();\r\n    }, {once: true});\r\n\r\n    rootScope.addEventListener('push_notification_click', (notificationData) => {\r\n      if(notificationData.action === 'push_settings') {\r\n        /* this.topMessagesDeferred.then(() => {\r\n          $modal.open({\r\n            templateUrl: templateUrl('settings_modal'),\r\n            controller: 'SettingsModalController',\r\n            windowClass: 'settings_modal_window mobile_modal',\r\n            backdrop: 'single'\r\n          })\r\n        }); */\r\n        return;\r\n      }\r\n\r\n      if(notificationData.action === 'mute1d') {\r\n        apiManager.invokeApi('account.updateDeviceLocked', {\r\n          period: 86400\r\n        }).then(() => {\r\n          // var toastData = toaster.pop({\r\n          //   type: 'info',\r\n          //   body: _('push_action_mute1d_success'),\r\n          //   bodyOutputType: 'trustedHtml',\r\n          //   clickHandler: () => {\r\n          //     toaster.clear(toastData)\r\n          //   },\r\n          //   showCloseButton: false\r\n          // })\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      const peerId = notificationData.custom && notificationData.custom.peerId.toPeerId();\r\n      console.log('click', notificationData, peerId);\r\n      if(peerId) {\r\n        this.topMessagesDeferred.then(() => {\r\n          if(notificationData.custom.channel_id &&\r\n              !appChatsManager.hasChat(notificationData.custom.channel_id)) {\r\n            return;\r\n          }\r\n\r\n          if(peerId.isUser() && !appUsersManager.hasUser(peerId)) {\r\n            return;\r\n          }\r\n\r\n          rootScope.dispatchEvent('history_focus', {\r\n            peerId,\r\n            mid: +notificationData.custom.msg_id\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private toggleToggler(enable = rootScope.idle.isIDLE) {\r\n    if(IS_MOBILE) return;\r\n\r\n    const resetTitle = () => {\r\n      this.titleChanged = false;\r\n      document.title = this.titleBackup;\r\n      this.setFavicon();\r\n    };\r\n\r\n    window.clearInterval(this.titleInterval);\r\n    this.titleInterval = 0;\r\n\r\n    if(!enable) {\r\n      resetTitle();\r\n    } else {\r\n      this.titleInterval = window.setInterval(() => {\r\n        const count = this.notificationsCount;\r\n        if(!count) {\r\n          this.toggleToggler(false);\r\n        } else if(this.titleChanged) {\r\n          resetTitle();\r\n        } else {\r\n          this.titleChanged = true;\r\n          document.title = I18n.format('Notifications.Count', true, [count]);\r\n          //this.setFavicon('assets/img/favicon_unread.ico');\r\n\r\n          // fetch('assets/img/favicon.ico')\r\n          // .then(res => res.blob())\r\n          // .then(blob => {\r\n            // const img = document.createElement('img');\r\n            // img.src = URL.createObjectURL(blob);\r\n\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = 32 * window.devicePixelRatio;\r\n            canvas.height = canvas.width;\r\n  \r\n            const ctx = canvas.getContext('2d');\r\n            ctx.beginPath();\r\n            ctx.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2, 0, 2 * Math.PI, false);\r\n            ctx.fillStyle = '#3390ec';\r\n            ctx.fill();\r\n\r\n            let fontSize = 24;\r\n            let str = '' + count;\r\n            if(count < 10) {\r\n              fontSize = 22;\r\n            } else if(count < 100) {\r\n              fontSize = 20;\r\n            } else {\r\n              str = '99+';\r\n              fontSize = 16;\r\n            }\r\n\r\n            fontSize *= window.devicePixelRatio;\r\n            \r\n            ctx.font = `700 ${fontSize}px ${fontFamily}`;\r\n            ctx.textBaseline = 'middle';\r\n            ctx.textAlign = 'center';\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillText(str, canvas.width / 2, canvas.height * .5625);\r\n\r\n            /* const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height); */\r\n  \r\n            this.setFavicon(canvas.toDataURL());\r\n          // });\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  public updateLocalSettings = () => {\r\n    Promise.all(['notify_nodesktop', 'notify_volume', 'notify_novibrate', 'notify_nopreview', 'notify_nopush'].map(k => stateStorage.get(k as any)))\r\n    .then((updSettings) => {\r\n      this.settings.nodesktop = updSettings[0];\r\n      this.settings.volume = updSettings[1] === undefined ? 0.5 : updSettings[1];\r\n      this.settings.novibrate = updSettings[2];\r\n      this.settings.nopreview = updSettings[3];\r\n      this.settings.nopush = updSettings[4];\r\n\r\n      if(this.pushInited) {\r\n        const needPush = !this.settings.nopush && !this.settings.nodesktop && webPushApiManager.isAvailable || false;\r\n        const hasPush = this.registeredDevice !== false;\r\n        if(needPush !== hasPush) {\r\n          if(needPush) {\r\n            webPushApiManager.subscribe();\r\n          } else {\r\n            webPushApiManager.unsubscribe();\r\n          }\r\n        }\r\n      }\r\n\r\n      webPushApiManager.setSettings(this.settings);\r\n    });\r\n\r\n    appStateManager.getState().then(state => {\r\n      this.settings.nosound = !state.settings.notifications.sound;\r\n    });\r\n  }\r\n\r\n  public getLocalSettings() {\r\n    return this.settings;\r\n  }\r\n\r\n  public getNotifySettings(peer: InputNotifyPeer): ImSadAboutIt {\r\n    let key: any = convertInputKeyToKey(peer._);\r\n    let obj: any = this.peerSettings[key as NotifyPeer['_']];\r\n\r\n    let peerId: PeerId;\r\n    if(peer._ === 'inputNotifyPeer') {\r\n      peerId = key = appPeersManager.getPeerId(peer.peer);\r\n      obj = obj[key];\r\n    }\r\n\r\n    if(obj) {\r\n      return obj;\r\n    }\r\n\r\n    return (obj || this.peerSettings)[key] = apiManager.invokeApi('account.getNotifySettings', {peer})\r\n    .then(settings => {\r\n      this.savePeerSettings({\r\n        key,\r\n        peerId, \r\n        settings\r\n      });\r\n      \r\n      return settings;\r\n    });\r\n  }\r\n\r\n  public getNotifyPeerTypeSettings() {\r\n    if(this.getNotifyPeerTypePromise) return this.getNotifyPeerTypePromise;\r\n\r\n    const promises = (['inputNotifyBroadcasts', 'inputNotifyUsers', 'inputNotifyChats'] as Exclude<InputNotifyPeer['_'], 'inputNotifyPeer'>[])\r\n    .map((inputKey) => {\r\n      return this.getNotifySettings({_: inputKey});\r\n    });\r\n\r\n    return this.getNotifyPeerTypePromise = Promise.all(promises);\r\n  }\r\n\r\n  public updateNotifySettings(peer: InputNotifyPeer, settings: InputPeerNotifySettings) {\r\n    //this.savePeerSettings(peerId, settings);\r\n\r\n    /* const inputSettings: InputPeerNotifySettings = copy(settings) as any;\r\n    inputSettings._ = 'inputPeerNotifySettings'; */\r\n\r\n    return apiManager.invokeApi('account.updateNotifySettings', {\r\n      peer,\r\n      settings\r\n    }).then(value => {\r\n      if(value) {\r\n        apiUpdatesManager.processLocalUpdate({\r\n          _: 'updateNotifySettings', \r\n          peer: {\r\n            ...peer as any,\r\n            _: convertInputKeyToKey(peer._)\r\n          }, \r\n          notify_settings: { // ! WOW, IT WORKS !\r\n            ...settings,\r\n            _: 'peerNotifySettings',\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public getNotifyExceptions() {\r\n    apiManager.invokeApi('account.getNotifyExceptions', {compare_sound: true})\r\n    .then((updates) => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public getContactSignUpNotification() {\r\n    if(this.notifyContactsSignUp) return this.notifyContactsSignUp;\r\n    return this.notifyContactsSignUp = apiManager.invokeApi('account.getContactSignUpNotification');\r\n  }\r\n\r\n  public setContactSignUpNotification(silent: boolean) {\r\n    apiManager.invokeApi('account.setContactSignUpNotification', {silent})\r\n    .then(value => {\r\n      this.notifyContactsSignUp = Promise.resolve(!silent);\r\n    });\r\n  }\r\n\r\n  private setFavicon(href: string = 'assets/img/favicon.ico') {\r\n    if(this.prevFavicon === href) {\r\n      return;\r\n    }\r\n\r\n    const link = this.faviconEl.cloneNode() as HTMLLinkElement;\r\n    link.href = href;\r\n    this.faviconEl.parentNode.replaceChild(link, this.faviconEl);\r\n    this.faviconEl = link;\r\n\r\n    this.prevFavicon = href;\r\n  }\r\n\r\n  private checkMuteUntil = () => {\r\n    if(this.checkMuteUntilTimeout !== undefined) {\r\n      clearTimeout(this.checkMuteUntilTimeout);\r\n      this.checkMuteUntilTimeout = undefined;\r\n    }\r\n\r\n    const timestamp = tsNow(true);\r\n    let closestMuteUntil = MUTE_UNTIL;\r\n    for(const peerId in this.peerSettings.notifyPeer) {\r\n      const peerNotifySettings = this.peerSettings.notifyPeer[peerId];\r\n      if(peerNotifySettings instanceof Promise) {\r\n        continue;\r\n      }\r\n\r\n      const muteUntil = peerNotifySettings.mute_until;\r\n      if(!muteUntil) {\r\n        continue;\r\n      }\r\n\r\n      if(muteUntil <= timestamp) {\r\n        // ! do not delete it because peer's unique settings will be overwritten in getPeerLocalSettings with type's settings\r\n        peerNotifySettings.mute_until = 0;\r\n\r\n        rootScope.dispatchEvent('updateNotifySettings', {\r\n          _: 'updateNotifySettings',\r\n          peer: {\r\n            _: 'notifyPeer',\r\n            peer: appPeersManager.getOutputPeer(peerId.toPeerId())\r\n          },\r\n          notify_settings: peerNotifySettings\r\n        });\r\n      } else if(muteUntil < closestMuteUntil) {\r\n        closestMuteUntil = muteUntil;\r\n      }\r\n    }\r\n\r\n    this.checkMuteUntilTimeout = window.setTimeout(this.checkMuteUntil, (closestMuteUntil - timestamp) * 1000);\r\n  };\r\n\r\n  public savePeerSettings({key, peerId, settings}: {\r\n    key?: Exclude<NotifyPeer['_'], 'notifyPeer'>,\r\n    peerId?: PeerId, \r\n    settings: PeerNotifySettings\r\n  }) {\r\n    let obj: any;\r\n    if(peerId) {\r\n      key = peerId as any;\r\n      obj = this.peerSettings['notifyPeer'];\r\n    }\r\n    \r\n    (obj || this.peerSettings)[key] = settings;\r\n\r\n    if(!peerId) {\r\n      rootScope.dispatchEvent('notify_peer_type_settings', {key, settings});\r\n    } else {\r\n      this.checkMuteUntilThrottled();\r\n    }\r\n\r\n    //rootScope.broadcast('notify_settings', {peerId: peerId});\r\n  }\r\n\r\n  public isMuted(peerNotifySettings: PeerNotifySettings) {\r\n    return peerNotifySettings._ === 'peerNotifySettings' &&\r\n      (peerNotifySettings.silent || (peerNotifySettings.mute_until !== undefined && (peerNotifySettings.mute_until * 1000) > tsNow()));\r\n  }\r\n\r\n  public getPeerMuted(peerId: PeerId) {\r\n    const ret = this.getNotifySettings({_: 'inputNotifyPeer', peer: appPeersManager.getInputPeerById(peerId)});\r\n    return (ret instanceof Promise ? ret : Promise.resolve(ret))\r\n    .then((peerNotifySettings) => this.isMuted(peerNotifySettings));\r\n  }\r\n\r\n  public getPeerLocalSettings(peerId: PeerId, respectType = true): PeerNotifySettings {\r\n    const n: PeerNotifySettings = {\r\n      _: 'peerNotifySettings'\r\n    };\r\n\r\n    const notifySettings = this.peerSettings['notifyPeer'][peerId];\r\n    //if(!notifySettings || (notifySettings instanceof Promise)) return false;\r\n    if(notifySettings && !(notifySettings instanceof Promise)) {\r\n      Object.assign(n, notifySettings);\r\n    }\r\n\r\n    if(respectType) {\r\n      const inputNotify = appPeersManager.getInputNotifyPeerById(peerId, true);\r\n      const key = convertInputKeyToKey(inputNotify._);\r\n      const typeNotifySettings = this.peerSettings[key as NotifyPeer['_']];\r\n      if(typeNotifySettings && !(typeNotifySettings instanceof Promise)) {\r\n        for(let i in typeNotifySettings) {\r\n          // @ts-ignore\r\n          if(n[i] === undefined) {\r\n            // @ts-ignore\r\n            n[i] = typeNotifySettings[i];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  public isPeerLocalMuted(peerId: PeerId, respectType = true) {\r\n    if(peerId === rootScope.myId) return false;\r\n\r\n    const notifySettings = this.getPeerLocalSettings(peerId, respectType);\r\n    return this.isMuted(notifySettings);\r\n  }\r\n\r\n  public start() {\r\n    this.updateLocalSettings();\r\n    rootScope.addEventListener('settings_updated', this.updateLocalSettings);\r\n    webPushApiManager.start();\r\n\r\n    if(!this.notificationsUiSupport) {\r\n      return false;\r\n    }\r\n\r\n    if('Notification' in window && Notification.permission !== 'granted' && Notification.permission !== 'denied') {\r\n      window.addEventListener('click', this.requestPermission);\r\n    }\r\n\r\n    try {\r\n      if('onbeforeunload' in window) {\r\n        window.addEventListener('beforeunload', this.clear);\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  private stop() {\r\n    this.clear();\r\n    window.clearInterval(this.titleInterval);\r\n    this.titleInterval = 0;\r\n    this.setFavicon();\r\n    this.stopped = true;\r\n  }\r\n\r\n  private requestPermission = () => {\r\n    Notification.requestPermission();\r\n    window.removeEventListener('click', this.requestPermission);\r\n  };\r\n\r\n  public notify(data: NotifyOptions) {\r\n    //console.log('notify', data, rootScope.idle.isIDLE, this.notificationsUiSupport, this.stopped);\r\n    \r\n    if(this.stopped) {\r\n      return;\r\n    }\r\n\r\n    // FFOS Notification blob src bug workaround\r\n    /* if(Config.Navigator.ffos && !Config.Navigator.ffos2p) {\r\n      data.image = 'https://telegram.org/img/t_logo.png'\r\n    }\r\n    else if (data.image && !angular.isString(data.image)) {\r\n      if (Config.Navigator.ffos2p) {\r\n        FileManager.getDataUrl(data.image, 'image/jpeg').then(function (url) {\r\n          data.image = url\r\n          notify(data)\r\n        })\r\n        return false\r\n      } else {\r\n        data.image = FileManager.getUrl(data.image, 'image/jpeg')\r\n      }\r\n    }\r\n    else */ if(!data.image) {\r\n      data.image = 'assets/img/logo_filled_rounded.png';\r\n    }\r\n    // console.log('notify image', data.image)\r\n\r\n    this.notificationsCount++;\r\n    if(!this.titleInterval) {\r\n      this.toggleToggler();\r\n    }\r\n\r\n    const idx = ++this.notificationIndex;\r\n    const key = data.key || 'k' + idx;\r\n    this.notificationsShown[key] = true;\r\n\r\n    const now = tsNow();\r\n    if(this.settings.volume > 0 && !this.settings.nosound/* &&\r\n      (\r\n        !data.tag ||\r\n        !this.soundsPlayed[data.tag] ||\r\n        now > this.soundsPlayed[data.tag] + 60000\r\n      ) */\r\n    ) {\r\n      this.testSound(this.settings.volume);\r\n      this.soundsPlayed[data.tag] = now;\r\n    }\r\n\r\n    if(!this.notificationsUiSupport ||\r\n      'Notification' in window && Notification.permission !== 'granted') {\r\n      return false;\r\n    }\r\n\r\n    if(this.settings.nodesktop) {\r\n      if(this.vibrateSupport && !this.settings.novibrate) {\r\n        navigator.vibrate([200, 100, 200]);\r\n        return;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    let notification: MyNotification;\r\n\r\n    if('Notification' in window) {\r\n      try {\r\n        if(data.tag) {\r\n          for(let i in this.notificationsShown) {\r\n            const notification = this.notificationsShown[i];\r\n            if(typeof(notification) !== 'boolean' && notification.tag === data.tag) {\r\n              notification.hidden = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        notification = new Notification(data.title, {\r\n          icon: data.image || '',\r\n          body: data.message || '',\r\n          tag: data.tag || '',\r\n          silent: data.silent || false\r\n        });\r\n\r\n        //console.log('notify constructed notification');\r\n      } catch(e) {\r\n        this.notificationsUiSupport = false;\r\n        webPushApiManager.setLocalNotificationsDisabled();\r\n        return;\r\n      }\r\n    } /* else if('mozNotification' in navigator) {\r\n      notification = navigator.mozNotification.createNotification(data.title, data.message || '', data.image || '')\r\n    } else if(notificationsMsSiteMode) {\r\n      window.external.msSiteModeClearIconOverlay()\r\n      window.external.msSiteModeSetIconOverlay('img/icons/icon16.png', data.title)\r\n      window.external.msSiteModeActivate()\r\n      notification = {\r\n        index: idx\r\n      }\r\n    } */ else {\r\n      return;\r\n    }\r\n\r\n    notification.onclick = () => {\r\n      notification.close();\r\n      appRuntimeManager.focus();\r\n      this.clear();\r\n      if(data.onclick) {\r\n        data.onclick();\r\n      }\r\n    };\r\n\r\n    notification.onclose = () => {\r\n      if(!notification.hidden) {\r\n        delete this.notificationsShown[key];\r\n        this.clear();\r\n      }\r\n    };\r\n\r\n    if(notification.show) {\r\n      notification.show();\r\n    }\r\n    this.notificationsShown[key] = notification;\r\n\r\n    if(!IS_MOBILE) {\r\n      setTimeout(() => {\r\n        this.hide(key);\r\n      }, 8000);\r\n    }\r\n  }\r\n\r\n  public testSound(volume: number) {\r\n    const now = tsNow();\r\n    if(this.nextSoundAt && now < this.nextSoundAt && this.prevSoundVolume === volume) {\r\n      return;\r\n    }\r\n\r\n    this.nextSoundAt = now + 1000;\r\n    this.prevSoundVolume = volume;\r\n    const filename = 'assets/audio/notification.mp3';\r\n    const audio = document.createElement('audio');\r\n    audio.autoplay = true;\r\n    audio.setAttribute('mozaudiochannel', 'notification');\r\n    audio.volume = volume;\r\n    audio.innerHTML = `\r\n      <source src=\"${filename}\" type=\"audio/mpeg\" />\r\n      <embed hidden=\"true\" autostart=\"true\" loop=\"false\" volume=\"${volume * 100}\" src=\"${filename}\" />\r\n    `;\r\n    this.notifySoundEl.append(audio);\r\n\r\n    audio.addEventListener('ended', () => {\r\n      audio.remove();\r\n    }, {once: true});\r\n  }\r\n\r\n  public cancel(key: string) {\r\n    const notification = this.notificationsShown[key];\r\n    if(notification) {\r\n      if(this.notificationsCount > 0) {\r\n        --this.notificationsCount;\r\n      }\r\n\r\n      try {\r\n        if(typeof(notification) !== 'boolean' && notification.close) {\r\n          notification.hidden = true;\r\n          notification.close();\r\n        }/*  else if(notificationsMsSiteMode &&\r\n          notification.index === notificationIndex) {\r\n          window.external.msSiteModeClearIconOverlay()\r\n        } */\r\n      } catch(e) {}\r\n\r\n      delete this.notificationsShown[key];\r\n    }\r\n  }\r\n\r\n  private hide(key: string) {\r\n    const notification = this.notificationsShown[key];\r\n    if(notification && typeof(notification) !== 'boolean') {\r\n      try {\r\n        if(notification.close) {\r\n          notification.hidden = true;\r\n          notification.close();\r\n        }\r\n      } catch(e) {}\r\n    }\r\n  }\r\n\r\n  public soundReset(tag: string) {\r\n    delete this.soundsPlayed[tag];\r\n  }\r\n\r\n  public clear() {\r\n    /* if(notificationsMsSiteMode) {\r\n      window.external.msSiteModeClearIconOverlay()\r\n    } else { */\r\n      for(const i in this.notificationsShown) {\r\n        const notification = this.notificationsShown[i];\r\n        try {\r\n          if(typeof(notification) !== 'boolean' && notification.close) {\r\n            notification.close();\r\n          }\r\n        } catch(e) {}\r\n      }\r\n    /* } */\r\n    this.notificationsShown = {};\r\n    this.notificationsCount = 0;\r\n\r\n    webPushApiManager.hidePushNotifications();\r\n  }\r\n\r\n  private registerDevice(tokenData: PushSubscriptionNotify) {\r\n    if(this.registeredDevice && deepEqual(this.registeredDevice, tokenData)) {\r\n      return false;\r\n    }\r\n\r\n    apiManager.invokeApi('account.registerDevice', {\r\n      token_type: tokenData.tokenType,\r\n      token: tokenData.tokenValue,\r\n      other_uids: [],\r\n      app_sandbox: false,\r\n      secret: new Uint8Array()\r\n    }).then(() => {\r\n      this.registeredDevice = tokenData;\r\n    }, (error) => {\r\n      error.handled = true;\r\n    });\r\n  }\r\n\r\n  private unregisterDevice(tokenData: PushSubscriptionNotify) {\r\n    if(!this.registeredDevice) {\r\n      return false;\r\n    }\r\n\r\n    apiManager.invokeApi('account.unregisterDevice', {\r\n      token_type: tokenData.tokenType,\r\n      token: tokenData.tokenValue,\r\n      other_uids: []\r\n    }).then(() => {\r\n      this.registeredDevice = false;\r\n    }, (error) => {\r\n      error.handled = true;\r\n    });\r\n  }\r\n\r\n  public getVibrateSupport() {\r\n    return this.vibrateSupport\r\n  }\r\n}\r\n\r\nconst appNotificationsManager = new AppNotificationsManager();\r\nMOUNT_CLASS_TO.appNotificationsManager = appNotificationsManager;\r\nexport default appNotificationsManager;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n// import { getHeavyAnimationPromise } from \"../../hooks/useHeavyAnimationCheck\";\n\nexport const loadedURLs: {[url: string]: boolean} = {};\nconst set = (elem: HTMLElement | HTMLImageElement | SVGImageElement | HTMLVideoElement, url: string) => {\n  if(elem instanceof HTMLImageElement || elem instanceof HTMLVideoElement) elem.src = url;\n  else if(elem instanceof SVGImageElement) elem.setAttributeNS(null, 'href', url);\n  else elem.style.backgroundImage = 'url(' + url + ')';\n};\n\n// проблема функции в том, что она не подходит для ссылок, пригодна только для blob'ов, потому что обычным ссылкам нужен 'load' каждый раз.\nexport default function renderImageFromUrl(\n  elem: HTMLElement | HTMLImageElement | SVGImageElement | HTMLVideoElement, \n  url: string, \n  callback?: (err?: Event) => void, \n  useCache = true\n) {\n  if(!url) {\n    console.error('renderImageFromUrl: no url?', elem, url);\n    callback && callback();\n    return;\n  }\n\n  if(((loadedURLs[url]/*  && false */) && useCache) || elem instanceof HTMLVideoElement) {\n    if(elem) {\n      set(elem, url);\n    }\n    \n    callback && callback();\n    // callback && getHeavyAnimationPromise().then(() => callback());\n  } else {\n    const isImage = elem instanceof HTMLImageElement;\n    const loader = isImage ? elem as HTMLImageElement : new Image();\n    //const loader = new Image();\n    loader.src = url;\n    //let perf = performance.now();\n    loader.addEventListener('load', () => {\n      if(!isImage && elem) {\n        set(elem, url);\n      }\n\n      loadedURLs[url] = true;\n      //console.log('onload:', url, performance.now() - perf);\n      // TODO: переделать прогрузки аватаров до начала анимации, иначе с этим ожиданием они неприятно появляются\n      // callback && getHeavyAnimationPromise().then(() => callback());\n      callback && callback();\n    }, {once: true});\n\n    if(callback) {\n      loader.addEventListener('error', callback);\n    }\n  }\n}\n\nexport function renderImageFromUrlPromise(elem: Parameters<typeof renderImageFromUrl>[0], url: string, useCache?: boolean) {\n  return new Promise((resolve) => {\n    renderImageFromUrl(elem, url, resolve, useCache);\n  });\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// * will change .cleaned and new instance will be created\r\nexport const getMiddleware = () => {\r\n  let cleanupObj = {cleaned: false};\r\n  return {\r\n    clean: () => {\r\n      cleanupObj.cleaned = true;\r\n      cleanupObj = {cleaned: false};\r\n    },\r\n    get: (additionalCallback?: () => boolean) => {\r\n      const _cleanupObj = cleanupObj;\r\n      return () => {\r\n        return !_cleanupObj.cleaned && (!additionalCallback || additionalCallback());\r\n      };\r\n    }\r\n  };\r\n};\r\n","export default function fixBase64String(str: string, toUrl: boolean) {\n  if(toUrl) {\n    return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=+$/, '');\n  } else {\n    return str.replace(/-/g, '+').replace(/_/g, '/');\n  }\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { CancellablePromise } from \"../helpers/cancellablePromise\";\r\nimport SetTransition from \"./singleTransition\";\r\nimport { fastRaf } from \"../helpers/schedulers\";\r\nimport { safeAssign } from \"../helpers/object\";\r\nimport { cancelEvent } from \"../helpers/dom/cancelEvent\";\r\nimport { attachClickEvent } from \"../helpers/dom/clickEvent\";\r\nimport isInDOM from \"../helpers/dom/isInDOM\";\r\n\r\nconst TRANSITION_TIME = 200;\r\n\r\nexport default class ProgressivePreloader {\r\n  public preloader: HTMLDivElement;\r\n  public circle: SVGCircleElement;\r\n  private cancelSvg: SVGSVGElement;\r\n  private downloadSvg: HTMLElement;\r\n  \r\n  private tempId = 0;\r\n  public detached = true;\r\n\r\n  public promise: CancellablePromise<any> = null;\r\n\r\n  public isUpload = false;\r\n  private cancelable = true;\r\n  private streamable = false;\r\n  private tryAgainOnFail = true;\r\n  private attachMethod: 'append' | 'prepend' = 'append';\r\n\r\n  public loadFunc: (e?: Event) => {download: CancellablePromise<any>};\r\n\r\n  public totalLength: number;\r\n\r\n  constructor(options?: Partial<{\r\n    isUpload: ProgressivePreloader['isUpload'],\r\n    cancelable: ProgressivePreloader['cancelable'], \r\n    streamable: ProgressivePreloader['streamable'], \r\n    tryAgainOnFail: ProgressivePreloader['tryAgainOnFail'],\r\n    attachMethod: ProgressivePreloader['attachMethod']\r\n  }>) {\r\n    if(options) {\r\n      safeAssign(this, options);\r\n    }\r\n  }\r\n\r\n  public constructContainer(options: Partial<{\r\n    color: 'transparent',\r\n    bold: boolean\r\n  }> = {}) {\r\n    if(!this.preloader) {\r\n      this.preloader = document.createElement('div');\r\n      this.preloader.classList.add('preloader-container');\r\n\r\n      if(options.color) {\r\n        this.preloader.classList.add('preloader-' + options.color);\r\n      }\r\n\r\n      if(options.bold) {\r\n        this.preloader.classList.add('preloader-bold');\r\n      }\r\n  \r\n      if(this.streamable) {\r\n        this.preloader.classList.add('preloader-streamable');\r\n      }\r\n    }\r\n  }\r\n\r\n  public constructDownloadIcon() {\r\n    this.constructContainer();\r\n  }\r\n\r\n  public construct() {\r\n    this.construct = null;\r\n\r\n    this.constructContainer();\r\n    \r\n    this.preloader.innerHTML = `\r\n    <div class=\"you-spin-me-round\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"preloader-circular\" viewBox=\"${this.streamable ? '25 25 50 50' : '27 27 54 54'}\">\r\n    <circle class=\"preloader-path-new\" cx=\"${this.streamable ? '50' : '54'}\" cy=\"${this.streamable ? '50' : '54'}\" r=\"${this.streamable ? 19 : 24}\" fill=\"none\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n    </div>`;\r\n\r\n    if(this.streamable) {\r\n      this.totalLength = 118.61124420166016;\r\n    } else {\r\n      this.totalLength = 149.82473754882812;\r\n    }\r\n\r\n    if(this.cancelable) {\r\n      this.preloader.innerHTML += `\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"preloader-close\" viewBox=\"0 0 24 24\">\r\n        <g fill=\"none\" fill-rule=\"evenodd\">\r\n          <polygon points=\"0 0 24 0 24 24 0 24\"/>\r\n          <path fill=\"#000\" fill-rule=\"nonzero\" d=\"M5.20970461,5.38710056 L5.29289322,5.29289322 C5.65337718,4.93240926 6.22060824,4.90467972 6.61289944,5.20970461 L6.70710678,5.29289322 L12,10.585 L17.2928932,5.29289322 C17.6834175,4.90236893 18.3165825,4.90236893 18.7071068,5.29289322 C19.0976311,5.68341751 19.0976311,6.31658249 18.7071068,6.70710678 L13.415,12 L18.7071068,17.2928932 C19.0675907,17.6533772 19.0953203,18.2206082 18.7902954,18.6128994 L18.7071068,18.7071068 C18.3466228,19.0675907 17.7793918,19.0953203 17.3871006,18.7902954 L17.2928932,18.7071068 L12,13.415 L6.70710678,18.7071068 C6.31658249,19.0976311 5.68341751,19.0976311 5.29289322,18.7071068 C4.90236893,18.3165825 4.90236893,17.6834175 5.29289322,17.2928932 L10.585,12 L5.29289322,6.70710678 C4.93240926,6.34662282 4.90467972,5.77939176 5.20970461,5.38710056 L5.29289322,5.29289322 L5.20970461,5.38710056 Z\"/>\r\n        </g>\r\n      </svg>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"preloader-download\" viewBox=\"0 0 24 24\">\r\n        <g fill=\"none\" fill-rule=\"evenodd\">\r\n          <polygon points=\"0 0 24 0 24 24 0 24\"/>\r\n          <path fill=\"#000\" fill-rule=\"nonzero\" d=\"M5,19 L19,19 C19.5522847,19 20,19.4477153 20,20 C20,20.5128358 19.6139598,20.9355072 19.1166211,20.9932723 L19,21 L5,21 C4.44771525,21 4,20.5522847 4,20 C4,19.4871642 4.38604019,19.0644928 4.88337887,19.0067277 L5,19 L19,19 L5,19 Z M11.8833789,3.00672773 L12,3 C12.5128358,3 12.9355072,3.38604019 12.9932723,3.88337887 L13,4 L13,13.585 L16.2928932,10.2928932 C16.6533772,9.93240926 17.2206082,9.90467972 17.6128994,10.2097046 L17.7071068,10.2928932 C18.0675907,10.6533772 18.0953203,11.2206082 17.7902954,11.6128994 L17.7071068,11.7071068 L12.7071068,16.7071068 C12.3466228,17.0675907 11.7793918,17.0953203 11.3871006,16.7902954 L11.2928932,16.7071068 L6.29289322,11.7071068 C5.90236893,11.3165825 5.90236893,10.6834175 6.29289322,10.2928932 C6.65337718,9.93240926 7.22060824,9.90467972 7.61289944,10.2097046 L7.70710678,10.2928932 L11,13.585 L11,4 C11,3.48716416 11.3860402,3.06449284 11.8833789,3.00672773 L12,3 L11.8833789,3.00672773 Z\"/>\r\n        </g>\r\n      </svg>`;\r\n\r\n      this.downloadSvg = this.preloader.lastElementChild as HTMLElement;\r\n      this.cancelSvg = this.downloadSvg.previousElementSibling as any;\r\n    } else {\r\n      this.preloader.classList.add('preloader-swing');\r\n    }\r\n    \r\n    this.circle = this.preloader.firstElementChild.firstElementChild.firstElementChild as SVGCircleElement;\r\n\r\n    if(this.cancelable) {\r\n      attachClickEvent(this.preloader, this.onClick);\r\n    }\r\n  }\r\n\r\n  public onClick = (e?: Event) => {\r\n    if(e) {\r\n      cancelEvent(e);\r\n    }\r\n\r\n    if(this.preloader.classList.contains('manual')) {\r\n      if(this.loadFunc) {\r\n        this.loadFunc(e);\r\n      }\r\n    } else {\r\n      if(this.promise && this.promise.cancel) {\r\n        this.promise.cancel();\r\n      }\r\n    }\r\n  };\r\n\r\n  public setDownloadFunction(func: ProgressivePreloader['loadFunc']) {\r\n    this.loadFunc = func;\r\n  }\r\n\r\n  public setManual() {\r\n    this.preloader.classList.add('manual');\r\n    this.setProgress(0);\r\n  }\r\n\r\n  public attachPromise(promise: CancellablePromise<any>) {\r\n    if(this.isUpload && this.promise) return;\r\n\r\n    this.promise = promise;\r\n\r\n    const tempId = --this.tempId;\r\n    const startTime = Date.now();\r\n\r\n    const onEnd = (err: Error) => {\r\n      promise.notify = promise.notifyAll = null;\r\n\r\n      if(tempId !== this.tempId) {\r\n        return;\r\n      }\r\n\r\n      const elapsedTime = Date.now() - startTime;\r\n\r\n      //console.log('[PP]: end', this.detached, performance.now());\r\n\r\n      if(!err && this.cancelable) {\r\n        this.setProgress(100);\r\n\r\n        const delay = TRANSITION_TIME * 0.75;\r\n\r\n        if(elapsedTime < delay) {\r\n          this.detach();\r\n        } else {\r\n          setTimeout(() => { // * wait for transition complete\r\n            if(tempId === this.tempId) {\r\n              this.detach();\r\n            }\r\n          }, delay);\r\n        }\r\n      } else {\r\n        if(this.tryAgainOnFail) {\r\n          this.attach(this.preloader.parentElement);\r\n          fastRaf(() => {\r\n            this.setManual();\r\n          });\r\n        } else {\r\n          this.detach();\r\n        }\r\n      }\r\n      \r\n      this.promise = promise = null;\r\n    };\r\n    \r\n    promise\r\n    .then(() => onEnd(null))\r\n    .catch((err) => onEnd(err));\r\n\r\n    if(promise.addNotifyListener) {\r\n      promise.addNotifyListener((details: {done: number, total: number}) => {\r\n        /* if(details.done >= details.total) {\r\n          onEnd();\r\n        } */\r\n\r\n        if(tempId !== this.tempId) return;\r\n\r\n        //console.log('preloader download', promise, details);\r\n        const percents = details.done / details.total * 100;\r\n        this.setProgress(percents);\r\n      });\r\n    }\r\n  }\r\n\r\n  public attach(elem: Element, reset = false, promise?: CancellablePromise<any>) {\r\n    if(this.construct) {\r\n      this.construct();\r\n    }\r\n\r\n    if(this.preloader.parentElement) {\r\n      this.preloader.classList.remove('manual');\r\n    }\r\n\r\n    this.detached = false;\r\n\r\n    if(promise/*  && false */) {\r\n      this.attachPromise(promise);\r\n    }\r\n\r\n    if(this.detached || this.preloader.parentElement !== elem) {\r\n      const useRafs = isInDOM(this.preloader) ? 1 : 2;\r\n      if(this.preloader.parentElement !== elem) {\r\n        elem[this.attachMethod](this.preloader);\r\n      }\r\n\r\n      SetTransition(this.preloader, 'is-visible', true, TRANSITION_TIME, undefined, useRafs);\r\n    }\r\n\r\n    if(this.cancelable && reset) {\r\n      this.setProgress(0);\r\n    }\r\n  }\r\n  \r\n  public detach() {\r\n    if(this.detached) {\r\n      return;\r\n    }\r\n    //return;\r\n\r\n    this.detached = true;\r\n\r\n    //return;\r\n    \r\n    if(this.preloader && this.preloader.parentElement) {\r\n      /* setTimeout(() =>  *///fastRaf(() => {\r\n        /* if(!this.detached) return;\r\n        this.detached = true; */\r\n\r\n        // fastRaf(() => {\r\n          //console.log('[PP]: detach after rAF', this.detached, performance.now());\r\n\r\n          // if(!this.detached || !this.preloader.parentElement) {\r\n          //   return;\r\n          // }\r\n\r\n          SetTransition(this.preloader, 'is-visible', false, TRANSITION_TIME, () => {\r\n            this.preloader.remove();\r\n          }, 1);\r\n        // });\r\n      //})/* , 5e3) */;\r\n    }\r\n  }\r\n  \r\n  public setProgress(percents: number) {\r\n    if(!this.totalLength && !isInDOM(this.circle)) {\r\n      return;\r\n    }\r\n    \r\n    if(percents === 0) {\r\n      this.circle.style.strokeDasharray = '';\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      if(!this.totalLength) {\r\n        this.totalLength = this.circle.getTotalLength();\r\n      }\r\n\r\n      //console.log('setProgress', (percents / 100 * totalLength));\r\n      this.circle.style.strokeDasharray = '' + Math.max(5, percents / 100 * this.totalLength) + ', ' + this.totalLength;\r\n    } catch(err) {}\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { makeMediaSize, MediaSize } from \"./mediaSizes\";\r\nimport { pause } from \"./schedulers/pause\";\r\nimport { IS_APPLE_MOBILE } from \"../environment/userAgent\";\r\n\r\nexport function scaleMediaElement(options: {\r\n  media: CanvasImageSource, \r\n  mediaSize: MediaSize, \r\n  boxSize: MediaSize, \r\n  quality?: number,\r\n  mimeType?: 'image/jpeg' | 'image/png'\r\n}): Promise<{blob: Blob, size: MediaSize}> {\r\n  return new Promise((resolve) => {\r\n    const canvas = document.createElement('canvas');\r\n    const size = options.mediaSize.aspectFitted(options.boxSize);\r\n    canvas.width = size.width * window.devicePixelRatio;\r\n    canvas.height = size.height * window.devicePixelRatio;\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.drawImage(options.media, 0, 0, canvas.width, canvas.height);\r\n    canvas.toBlob(blob => {\r\n      resolve({blob, size});\r\n    }, options.mimeType ?? 'image/jpeg', options.quality ?? 1);\r\n  });\r\n}\r\n\r\nexport function preloadVideo(url: string): Promise<HTMLVideoElement> {\r\n  return new Promise((resolve, reject) => {\r\n    const video = document.createElement('video');\r\n    video.volume = 0;\r\n    video.addEventListener('loadedmetadata', () => resolve(video), {once: true});\r\n    video.addEventListener('error', reject, {once: true});\r\n    video.src = url;\r\n  });\r\n}\r\n\r\nexport function createPosterFromMedia(media: HTMLVideoElement | HTMLImageElement) {\r\n  let width: number, height: number;\r\n  if(media instanceof HTMLVideoElement) {\r\n    width = media.videoWidth;\r\n    height = media.videoHeight;\r\n  } else {\r\n    width = media.naturalWidth;\r\n    height = media.naturalHeight;\r\n  }\r\n\r\n  return scaleMediaElement({\r\n    media, \r\n    mediaSize: makeMediaSize(width, height), \r\n    boxSize: makeMediaSize(320, 240),\r\n    quality: .9\r\n  });\r\n}\r\n\r\nexport function createPosterFromVideo(video: HTMLVideoElement): ReturnType<typeof scaleMediaElement> {\r\n  return new Promise((resolve, reject) => {\r\n    video.onseeked = () => {\r\n      video.onseeked = () => {\r\n        createPosterFromMedia(video).then(resolve);\r\n\r\n        video.onseeked = undefined;\r\n      };\r\n\r\n      video.currentTime = 0;\r\n    };\r\n    \r\n    video.onerror = reject;\r\n    video.currentTime = Math.min(video.duration, 1);\r\n  });\r\n}\r\n\r\nexport async function createPosterForVideo(url: string) {\r\n  const video = await preloadVideo(url);\r\n\r\n  return Promise.race([\r\n    pause(2000) as Promise<undefined>,\r\n    createPosterFromVideo(video),\r\n  ]);\r\n}\r\n\r\nexport function onMediaLoad(media: HTMLMediaElement, readyState = media.HAVE_METADATA, useCanplayOnIos?: boolean) {\r\n  return new Promise<void>((resolve) => {\r\n    if(media.readyState >= readyState) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    media.addEventListener(IS_APPLE_MOBILE && !useCanplayOnIos ? 'loadeddata' : 'canplay', () => resolve(), {once: true});\r\n  });\r\n}\r\n\r\nexport async function getFilesFromEvent(e: ClipboardEvent | DragEvent, onlyTypes = false): Promise<any[]> {\r\n  const files: any[] = [];\r\n\r\n  const scanFiles = async(entry: any, item: DataTransferItem) => {\r\n    if(entry.isDirectory) {\r\n      const directoryReader = entry.createReader();\r\n      await new Promise<void>((resolve, reject) => {\r\n        directoryReader.readEntries(async(entries: any) => {\r\n          for(const entry of entries) {\r\n            await scanFiles(entry, item);\r\n          }\r\n\r\n          resolve();\r\n        });\r\n      });\r\n    } else if(entry) {\r\n      if(onlyTypes) {\r\n        files.push(entry.type);\r\n      } else {\r\n        const itemFile = item.getAsFile(); // * Safari can't handle entry.file with pasting\r\n        const file = entry instanceof File ? \r\n          entry : \r\n          (\r\n            entry instanceof DataTransferItem ? \r\n              entry.getAsFile() : \r\n              await new Promise((resolve, reject) => entry.file(resolve, (err: any) => resolve(itemFile)))\r\n          );\r\n\r\n        /* if(!onlyTypes) {\r\n          console.log('getFilesFromEvent: got file', item, file);\r\n        } */\r\n\r\n        if(!file) return;\r\n        files.push(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  if(e instanceof DragEvent && e.dataTransfer.files && !e.dataTransfer.items) {\r\n    for(let i = 0; i < e.dataTransfer.files.length; i++) {\r\n      const file = e.dataTransfer.files[i];\r\n      files.push(onlyTypes ? file.type : file);\r\n    }\r\n  } else {\r\n    // @ts-ignore\r\n    const items = (e.dataTransfer || e.clipboardData || e.originalEvent.clipboardData).items;\r\n\r\n    const promises: Promise<any>[] = [];\r\n    for(let i = 0; i < items.length; ++i) {\r\n      const item: DataTransferItem = items[i];\r\n      if(item.kind === 'file') {\r\n        const entry = (onlyTypes ? item : item.webkitGetAsEntry()) || item.getAsFile();\r\n        promises.push(scanFiles(entry, item));\r\n      }\r\n    }\r\n    \r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /* if(!onlyTypes) {\r\n    console.log('getFilesFromEvent: got files:', e, files);\r\n  } */\r\n  \r\n  return files;\r\n}\r\n\r\nexport function requestFile(accept?: string) {\r\n  const input = document.createElement('input');\r\n  input.type = 'file';\r\n  input.style.display = 'none';\r\n\r\n  if(accept) {\r\n    input.accept = accept;\r\n  }\r\n\r\n  document.body.append(input);\r\n\r\n  const promise = new Promise<File>((resolve, reject) => {\r\n    input.addEventListener('change', (e: any) => {\r\n      const file: File = e.target.files[0];\r\n      if(!file) {\r\n        reject('NO_FILE_SELECTED');\r\n        return;\r\n      }\r\n  \r\n      resolve(file);\r\n    }, {once: true});\r\n  }).finally(() => {\r\n    input.remove();\r\n  });\r\n\r\n  input.click();\r\n\r\n  return promise;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { renderImageFromUrlPromise } from \"../../helpers/dom/renderImageFromUrl\";\nimport replaceContent from \"../../helpers/dom/replaceContent\";\nimport sequentialDom from \"../../helpers/sequentialDom\";\nimport { UserProfilePhoto, ChatPhoto, InputFileLocation } from \"../../layer\";\nimport { NULL_PEER_ID, REPLIES_PEER_ID } from \"../mtproto/mtproto_config\";\nimport RichTextProcessor from \"../richtextprocessor\";\nimport rootScope from \"../rootScope\";\nimport appDownloadManager from \"./appDownloadManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appPhotosManager from \"./appPhotosManager\";\nimport appUsersManager from \"./appUsersManager\";\n\ntype PeerPhotoSize = 'photo_small' | 'photo_big';\n\nexport class AppAvatarsManager {\n  private savedAvatarURLs: {\n    [peerId: PeerId]: {\n      [size in PeerPhotoSize]?: string | Promise<string>\n    }\n  } = {};\n\n  public isAvatarCached(peerId: PeerId) {\n    return !!this.savedAvatarURLs[peerId];\n  }\n  \n  public removeFromAvatarsCache(peerId: PeerId) {\n    if(this.savedAvatarURLs[peerId]) {\n      delete this.savedAvatarURLs[peerId];\n    }\n  }\n\n  public loadAvatar(peerId: PeerId, photo: UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto, size: PeerPhotoSize) {\n    const inputPeer = appPeersManager.getInputPeerById(peerId);\n\n    let cached = false;\n    let getAvatarPromise: Promise<string>;\n    let saved = this.savedAvatarURLs[peerId];\n    if(!saved || !saved[size]) {\n      if(!saved) {\n        saved = this.savedAvatarURLs[peerId] = {};\n      }\n\n      //console.warn('will invoke downloadSmallFile:', peerId);\n      const peerPhotoFileLocation: InputFileLocation.inputPeerPhotoFileLocation = {\n        _: 'inputPeerPhotoFileLocation', \n        pFlags: {},\n        peer: inputPeer, \n        photo_id: photo.photo_id\n      };\n\n      if(size === 'photo_big') {\n        peerPhotoFileLocation.pFlags.big = true;\n      }\n\n      const downloadOptions = {dcId: photo.dc_id, location: peerPhotoFileLocation};\n\n      /* let str: string;\n      const time = Date.now();\n      if(peerId === 0) {\n        str = `download avatar ${peerId}`;\n      } */\n\n      const promise = appDownloadManager.download(downloadOptions);\n      getAvatarPromise = saved[size] = promise.then(blob => {\n        return saved[size] = URL.createObjectURL(blob);\n\n        /* if(str) {\n          console.log(str, Date.now() / 1000, Date.now() - time);\n        } */\n      });\n    } else if(typeof(saved[size]) !== 'string') {\n      getAvatarPromise = saved[size] as Promise<any>;\n    } else {\n      getAvatarPromise = Promise.resolve(saved[size]);\n      cached = true;\n    }\n\n    return {cached, loadPromise: getAvatarPromise};\n  }\n\n  public putAvatar(\n    div: HTMLElement, \n    peerId: PeerId, \n    photo: UserProfilePhoto.userProfilePhoto | ChatPhoto.chatPhoto, \n    size: PeerPhotoSize, \n    img = new Image(), \n    onlyThumb = false\n  ) {\n    let {cached, loadPromise} = this.loadAvatar(peerId, photo, size);\n\n    img.classList.add('avatar-photo');\n\n    let renderThumbPromise: Promise<void>;\n    let callback: () => void;\n    let thumbImage: HTMLImageElement;\n    if(cached) {\n      // смотри в misc.ts: renderImageFromUrl\n      callback = () => {\n        replaceContent(div, img);\n        div.dataset.color = '';\n      };\n    } else {\n      const animate = rootScope.settings.animationsEnabled;\n      if(animate) {\n        img.classList.add('fade-in');\n      }\n\n      if(size === 'photo_big') { // let's load small photo first\n        const res = this.putAvatar(div, peerId, photo, 'photo_small');\n        renderThumbPromise = res.loadPromise;\n        thumbImage = res.thumbImage;\n      } else if(photo.stripped_thumb) {\n        thumbImage = new Image();\n        div.classList.add('avatar-relative');\n        thumbImage.classList.add('avatar-photo', 'avatar-photo-thumbnail');\n        const url = appPhotosManager.getPreviewURLFromBytes(photo.stripped_thumb);\n        renderThumbPromise = renderImageFromUrlPromise(thumbImage, url).then(() => {\n          replaceContent(div, thumbImage);\n        });\n      }\n\n      callback = () => {\n        if(thumbImage) {\n          div.append(img);\n        } else {\n          replaceContent(div, img);\n        }\n\n        setTimeout(() => {\n          if(div.childElementCount) {\n            sequentialDom.mutateElement(img, () => {\n              div.dataset.color = '';\n              \n              if(animate) {\n                img.classList.remove('fade-in');\n              }\n\n              if(thumbImage) {\n                thumbImage.remove();\n              }\n            });\n          }\n        }, animate ? 200 : 0);\n      };\n    }\n\n    const renderPromise = loadPromise\n    .then((url) => renderImageFromUrlPromise(img, url/* , false */))\n    .then(callback);\n\n    return {\n      cached, \n      loadPromise: renderThumbPromise || renderPromise,\n      thumbImage\n    };\n  }\n\n  public s(div: HTMLElement, innerHTML: string, color: string, icon: string) {\n    div.innerHTML = innerHTML;\n    div.dataset.color = color;\n    div.classList.remove('tgico-saved', 'tgico-deletedaccount', 'tgico-reply_filled');\n    icon && div.classList.add(icon);\n  }\n\n  // peerId === peerId || title\n  public putPhoto(div: HTMLElement, peerId: PeerId, isDialog = false, title = '', onlyThumb = false) {\n    const myId = rootScope.myId;\n    \n    //console.log('loadDialogPhoto location:', location, inputPeer);\n    if(peerId === myId && isDialog) {\n      this.s(div, '', '', 'tgico-saved');\n      return;\n    }\n    \n    if(peerId !== NULL_PEER_ID && peerId.isUser()) {\n      const user = appUsersManager.getUser(peerId);\n      if(user && user.pFlags && user.pFlags.deleted) {\n        this.s(div, '', appPeersManager.getPeerColorById(peerId), 'tgico-deletedaccount');\n        return;\n      }\n    }\n    \n    const photo = appPeersManager.getPeerPhoto(peerId);\n    const avatarAvailable = !!photo;\n    const avatarRendered = !!div.firstElementChild && !(div.firstElementChild as HTMLElement).classList.contains('emoji');\n    if(!avatarAvailable || !avatarRendered || !this.savedAvatarURLs[peerId]) {\n      let color = '';\n      if(peerId && (peerId !== myId || !isDialog)) {\n        color = appPeersManager.getPeerColorById(peerId);\n      }\n\n      if(peerId === REPLIES_PEER_ID) {\n        this.s(div, '', color, 'tgico-reply_filled');\n        return;\n      }\n\n      let abbr: string;\n      if(!title) {\n        const peer = appPeersManager.getPeer(peerId);\n        abbr = peer.initials ?? '';\n      } else {\n        abbr = RichTextProcessor.getAbbreviation(title);\n      }\n\n      this.s(div, abbr, color, '');\n      //return Promise.resolve(true);\n    }\n\n    if(avatarAvailable/*  && false */) {\n      const size: PeerPhotoSize = 'photo_small';\n      return this.putAvatar(div, peerId, photo, size, undefined, onlyThumb);\n    }\n  }\n}\n\nconst appAvatarsManager = new AppAvatarsManager();\nexport default appAvatarsManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nenum GROUP_CALL_STATE {\n  UNMUTED,\n  MUTED,\n  MUTED_BY_ADMIN,\n  CONNECTING,\n  CLOSED\n}\n\nexport default GROUP_CALL_STATE;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { processSearchText, ProcessSearchTextOptions } from '../helpers/cleanSearchText';\n\nexport default class SearchIndex<SearchWhat> {\n  private fullTexts: Map<SearchWhat, string> = new Map();\n\n  // minChars can be 0 because it requires at least one word (one symbol) to be found\n  constructor(private options?: ProcessSearchTextOptions, private minChars = 0) {\n  }\n\n  public indexObject(id: SearchWhat, searchText: string) {\n    /* if(searchIndex.fullTexts.hasOwnProperty(id)) {\n      return false;\n    } */\n\n    if(this.options && searchText.trim()) {\n      searchText = processSearchText(searchText, this.options);\n    }\n\n    if(!searchText) {\n      this.fullTexts.delete(id);\n      return false;\n    }\n\n    this.fullTexts.set(id, searchText);\n    \n    /* const shortIndexes = searchIndex.shortIndexes;\n    searchText.split(' ').forEach((searchWord) => {\n      let len = Math.min(searchWord.length, 3),\n        wordPart, i;\n      for(i = 1; i <= len; i++) {\n        wordPart = searchWord.substr(0, i);\n        if(shortIndexes[wordPart] === undefined) {\n          shortIndexes[wordPart] = [id];\n        } else {\n          shortIndexes[wordPart].push(id);\n        }\n      }\n    }); */\n  }\n\n  public search(query: string) {\n    const fullTexts = this.fullTexts;\n    //const shortIndexes = searchIndex.shortIndexes;\n\n    if(this.options) {\n      query = processSearchText(query, this.options);\n    }\n\n    const newFoundObjs: Array<{fullText: string, fullTextLength: number, what: SearchWhat, foundChars: number}> = [];\n    const queryWords = query.split(' ');\n    const queryWordsLength = queryWords.length;\n    fullTexts.forEach((fullText, what) => {\n      let found = true;\n      let foundChars = 0;\n      for(let i = 0; i < queryWordsLength; ++i) { // * verify that all words are found\n        const word = queryWords[i];\n        const idx = fullText.indexOf(word);\n        if(idx === -1 || (idx !== 0 && fullText[idx - 1] !== ' ')) { // * search only from word beginning\n          found = false;\n          break;\n        }\n\n        foundChars += word.length;\n      }\n\n      if(found) {\n        foundChars += queryWordsLength - 1;\n        const fullTextLength = fullText.length;\n        if(this.minChars <= foundChars || fullTextLength <= foundChars) {\n          newFoundObjs.push({fullText, fullTextLength, what, foundChars});\n        }\n      }\n    });\n\n    newFoundObjs.sort((a, b) => a.fullTextLength - b.fullTextLength || b.foundChars - a.foundChars);\n\n    //newFoundObjs.sort((a, b) => a.fullText.localeCompare(b.fullText));\n    const newFoundObjs2: Set<SearchWhat> = new Set(newFoundObjs.map(o => o.what));\n\n    /* const queryWords = query.split(' ');\n    let foundArr: number[];\n    for(let i = 0; i < queryWords.length; i++) {\n      const newFound = shortIndexes[queryWords[i].substr(0, 3)];\n      if(!newFound) {\n        foundArr = [];\n        break;\n      }\n      \n      if(foundArr === undefined || foundArr.length > newFound.length) {\n        foundArr = newFound;\n      }\n    }\n\n    for(let j = 0; j < foundArr.length; j++) {\n      let found = true;\n      let searchText = fullTexts[foundArr[j]];\n      for(let i = 0; i < queryWords.length; i++) {\n        if(searchText.indexOf(queryWords[i]) === -1) {\n          found = false;\n          break;\n        }\n      }\n\n      if(found) {\n        newFoundObjs[foundArr[j]] = true;\n      }\n    } */\n\n    return newFoundObjs2;\n  }\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// Thanks to https://stackoverflow.com/a/49349813\r\nimport { clamp } from \"../helpers/number\";\r\n\r\n/**\r\n * Attibute modifier to create middle ellipsis\r\n * When the attribute value is left blank the ellipsis will be in the middle\r\n * When positive the attribute value will be used as a percentage\r\n * When negative the attribute value will be used as character index counted from the end\r\n * @example\r\n *   <div data-middle-ellipsis>A Javascript solution to middle ellipsis</div>\r\n *   <div data-middle-ellipsis=\"20\">A Javascript solution to middle ellipsis</div>\r\n *   <div data-middle-ellipsis=\"-3\">A Javascript solution to middle ellipsis</div>\r\n */\r\nconst ellipsis = '…';\r\nconst map: Map<HTMLElement, {\r\n  text: string,\r\n  textLength: number,\r\n  from: number,\r\n  multiplier: number,\r\n  font: string,\r\n  textWidth: number,\r\n  elementWidth: number\r\n}> = new Map();\r\n\r\nconst testQueue: Set<HTMLElement> = new Set();\r\nexport const fontFamily = 'Roboto, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif';\r\nconst fontSize = '16px';\r\nlet timeoutId: number;\r\n\r\nconst setTestQueue = () => {\r\n  cancelAnimationFrame(timeoutId);\r\n  timeoutId = window.requestAnimationFrame(testQueueElements);\r\n};\r\n\r\nconst testQueueElements = () => {\r\n  testQueue.forEach(testElement);\r\n  testQueue.clear();\r\n};\r\n\r\nwindow.addEventListener('resize', () => {\r\n  for(const [key] of map) {\r\n    testQueue.add(key);\r\n  }\r\n  \r\n  setTestQueue();\r\n}, {capture: true, passive: true});\r\n\r\nconst testElement = (element: HTMLElement) => {\r\n  //const perf = performance.now();\r\n  // do not recalculate variables a second time\r\n  let mapped = map.get(element);\r\n  const firstTime = !mapped;\r\n\r\n  let {text, textLength, from, multiplier, font, textWidth, elementWidth} = mapped || {};\r\n  //console.log('[MEE] testElement got mapped', mapped);\r\n\r\n  if(firstTime) {\r\n    text = element.textContent;\r\n    textLength = text.length;\r\n    from = /* parseFloat(element.getAttribute(attributeName)) ||  */50;\r\n    multiplier = from > 0 && from / 100;\r\n\r\n    //const perf = performance.now();\r\n    font = `${element.dataset.fontWeight || 400} ${fontSize} ${fontFamily}`;\r\n    /* const computedStyle = window.getComputedStyle(elm, null);\r\n    font = `${computedStyle.getPropertyValue('font-weight')} ${computedStyle.getPropertyValue('font-size')} ${computedStyle.getPropertyValue('font-family')}`; */\r\n    //console.log('testMiddleEllipsis get computed style:', performance.now() - perf, font);\r\n\r\n    textWidth = getTextWidth(text, font);\r\n    //const perf = performance.now();\r\n    elementWidth = element.getBoundingClientRect().width;\r\n    //console.log('testMiddleEllipsis get offsetWidth:', performance.now() - perf, font);\r\n    mapped = {text, textLength, from, multiplier, font, textWidth, elementWidth};\r\n    map.set(element, mapped);\r\n\r\n    //console.log('[MEE] testElement map set', element);\r\n  }\r\n  \r\n  const newElementWidth = element.getBoundingClientRect().width;\r\n  const widthChanged = firstTime || elementWidth !== newElementWidth;\r\n  !firstTime && widthChanged && (mapped.elementWidth = elementWidth = newElementWidth);\r\n  \r\n  if(widthChanged) {\r\n    if(textWidth > elementWidth) {\r\n      element.setAttribute('title', text);\r\n      let smallerText = text;\r\n      let smallerWidth = elementWidth;\r\n      while(smallerText.length > 3) {\r\n        let smallerTextLength = smallerText.length;\r\n        const half = multiplier &&\r\n          clamp(multiplier * smallerTextLength << 0, 1, smallerTextLength - 2) ||\r\n          Math.max(smallerTextLength + from - 1, 1);\r\n        const half1 = smallerText.substr(0, half).replace(/\\s*$/,'');\r\n        const half2 = smallerText.substr(half + 1).replace(/^\\s*/,'');\r\n        smallerText = half1 + half2;\r\n        smallerWidth = getTextWidth(smallerText + ellipsis, font);\r\n        if(smallerWidth < elementWidth) {\r\n          element.textContent = half1 + ellipsis + half2;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // * set new width after cutting text\r\n      mapped.elementWidth = element.getBoundingClientRect().width;\r\n      //mapped.textWidth = smallerWidth;\r\n    } else {\r\n      element.removeAttribute('title');\r\n    }\r\n  }\r\n\r\n  //console.log('testMiddleEllipsis for element:', elm, performance.now() - perf);\r\n};\r\n\r\nlet context: CanvasRenderingContext2D;\r\n/**\r\n * Get the text width\r\n * @param {string} text\r\n * @param {string} font\r\n */\r\nfunction getTextWidth(text: string, font: string) {\r\n  //const perf = performance.now();\r\n  if(!context) {\r\n    const canvas = document.createElement('canvas');\r\n    context = canvas.getContext('2d');\r\n    context.font = font;\r\n  }\r\n\r\n  //context.font = font;\r\n  const metrics = context.measureText(text);\r\n  //console.log('getTextWidth perf:', performance.now() - perf);\r\n  return metrics.width;\r\n  //return Math.round(metrics.width);\r\n}\r\n\r\nexport class MiddleEllipsisElement extends HTMLElement {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  connectedCallback() {\r\n    //console.log('[MEE]: connectedCallback before', map.has(this), testQueue.has(this), map.size, this.textContent, map);\r\n\r\n    map.set(this, null);\r\n    testQueue.add(this);\r\n    setTestQueue();\r\n    //testElement(this);\r\n\r\n    //console.log('[MEE]: connectedCallback after', map.has(this), map.size, testQueue.has(this), testQueue.size);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    const deleted = map.delete(this);\r\n    //console.log('[MEE]: disconnectedCallback', deleted, map.has(this), map.size, this.textContent, map);\r\n  }\r\n}\r\n\r\ncustomElements.define(\"middle-ellipsis-element\", MiddleEllipsisElement);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport rootScope from \"../rootScope\";\r\nimport appPeersManager from \"./appPeersManager\";\r\nimport appMessagesManager from \"./appMessagesManager\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport RichTextProcessor from \"../richtextprocessor\";\r\nimport serverTimeManager from \"../mtproto/serverTimeManager\";\r\nimport { MessageEntity, DraftMessage, MessagesSaveDraft } from \"../../layer\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport { tsNow } from \"../../helpers/date\";\r\nimport { deepEqual } from \"../../helpers/object\";\r\nimport { isObject } from \"../mtproto/bin_utils\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport stateStorage from \"../stateStorage\";\r\nimport appMessagesIdsManager from \"./appMessagesIdsManager\";\r\nimport assumeType from \"../../helpers/assumeType\";\r\n\r\nexport type MyDraftMessage = DraftMessage.draftMessage;\r\n\r\nexport class AppDraftsManager {\r\n  private drafts: {[peerIdAndThreadId: string]: MyDraftMessage} = {};\r\n  private getAllDraftPromise: Promise<void> = null;\r\n\r\n  constructor() {\r\n    stateStorage.get('drafts').then(drafts => {\r\n      this.drafts = drafts || {};\r\n    });\r\n\r\n    rootScope.addMultipleEventsListeners({\r\n      updateDraftMessage: (update) => {\r\n        const peerID = appPeersManager.getPeerId(update.peer);\r\n        this.saveDraft(peerID, update.threadId, update.draft, {notify: true});\r\n      }\r\n    });\r\n  }\r\n\r\n  private getKey(peerId: PeerId, threadId?: number) {\r\n    return '' + peerId + (threadId ? '_' + threadId : '');\r\n  }\r\n\r\n  public getDraft(peerId: PeerId, threadId?: number) {\r\n    return this.drafts[this.getKey(peerId, threadId)];\r\n  }\r\n\r\n  public addMissedDialogs() {\r\n    return this.getAllDrafts().then(() => {\r\n      for(const key in this.drafts) {\r\n        if(key.indexOf('_') !== -1) { // exclude threads\r\n          continue;\r\n        }\r\n\r\n        const peerId = key.toPeerId();\r\n        const dialog = appMessagesManager.getDialogOnly(peerId);\r\n        if(!dialog) {\r\n          appMessagesManager.reloadConversation(peerId);\r\n          /* const dialog = appMessagesManager.generateDialog(peerId);\r\n          dialog.draft = this.drafts[key];\r\n          appMessagesManager.saveConversation(dialog);\r\n          appMessagesManager.newDialogsToHandle[peerId] = dialog;\r\n          appMessagesManager.scheduleHandleNewDialogs(); */\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public getAllDrafts() {\r\n    return this.getAllDraftPromise || (\r\n      this.getAllDraftPromise = apiManager.invokeApi('messages.getAllDrafts')\r\n      .then((updates) => {\r\n        const p = apiUpdatesManager.updatesState.syncLoading || Promise.resolve();\r\n        p.then(() => {\r\n          apiUpdatesManager.processUpdateMessage(updates);\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  public saveDraft(peerId: PeerId, threadId: number, apiDraft: DraftMessage, options: Partial<{\r\n    notify: boolean,\r\n    force: boolean\r\n  }> = {}) {\r\n    const draft = this.processApiDraft(apiDraft);\r\n\r\n    const key = this.getKey(peerId, threadId);\r\n    if(draft) {\r\n      this.drafts[key] = draft;\r\n    } else {\r\n      delete this.drafts[key];\r\n    }\r\n\r\n    stateStorage.set({\r\n      drafts: this.drafts\r\n    });\r\n\r\n    if(options.notify) {\r\n      // console.warn(dT(), 'save draft', peerId, apiDraft, options)\r\n      rootScope.dispatchEvent('draft_updated', {\r\n        peerId,\r\n        threadId,\r\n        draft,\r\n        force: options.force\r\n      });\r\n    }\r\n\r\n    return draft;\r\n  }\r\n\r\n  public draftsAreEqual(draft1: DraftMessage, draft2: DraftMessage) {\r\n    if(typeof(draft1) !== typeof(draft2)) {\r\n      return false;\r\n    }\r\n\r\n    if(!isObject(draft1)) {\r\n      return true;\r\n    }\r\n\r\n    if(draft1._ !== draft2._) {\r\n      return false;\r\n    }\r\n  \r\n    if(draft1._ === 'draftMessage' && draft2._ === draft1._) {\r\n      if(draft1.reply_to_msg_id !== draft2.reply_to_msg_id) {\r\n        return false;\r\n      }\r\n  \r\n      if(!deepEqual(draft1.entities, draft2.entities)) {\r\n        return false;\r\n      }\r\n  \r\n      if(draft1.message !== draft2.message) {\r\n        return false;\r\n      }\r\n  \r\n      if(draft1.pFlags.no_webpage !== draft2.pFlags.no_webpage) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public isEmptyDraft(draft: DraftMessage) {\r\n    if(!draft || draft._ === 'draftMessageEmpty') {\r\n      return true;\r\n    }\r\n    \r\n    if(draft.reply_to_msg_id > 0) {\r\n      return false;\r\n    }\r\n    \r\n    if(!draft.message.length) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  public processApiDraft(draft: DraftMessage): MyDraftMessage {\r\n    if(!draft || draft._ !== 'draftMessage') {\r\n      return undefined;\r\n    }\r\n\r\n    const myEntities = RichTextProcessor.parseEntities(draft.message);\r\n    const apiEntities = draft.entities || [];\r\n    const totalEntities = RichTextProcessor.mergeEntities(apiEntities.slice(), myEntities); // ! only in this order, otherwise bold and emoji formatting won't work\r\n\r\n    draft.rMessage = RichTextProcessor.wrapDraftText(draft.message, {entities: totalEntities});\r\n    //draft.rReply = appMessagesManager.getRichReplyText(draft);\r\n    if(draft.reply_to_msg_id) {\r\n      draft.reply_to_msg_id = appMessagesIdsManager.generateMessageId(draft.reply_to_msg_id);\r\n    }\r\n\r\n    return draft;\r\n  }\r\n\r\n  public async syncDraft(peerId: PeerId, threadId: number, localDraft?: DraftMessage, saveOnServer = true, force = false) {\r\n    // console.warn(dT(), 'sync draft', peerID)\r\n    const serverDraft = this.getDraft(peerId, threadId);\r\n    if(this.draftsAreEqual(serverDraft, localDraft)) {\r\n      // console.warn(dT(), 'equal drafts', localDraft, serverDraft)\r\n      return true;\r\n    }\r\n\r\n    // console.warn(dT(), 'changed draft', localDraft, serverDraft)\r\n    let params: MessagesSaveDraft = {\r\n      peer: appPeersManager.getInputPeerById(peerId),\r\n      message: ''\r\n    };\r\n\r\n    let draftObj: DraftMessage;\r\n    if(this.isEmptyDraft(localDraft)) {\r\n      draftObj = {_: 'draftMessageEmpty'};\r\n    } else {\r\n      assumeType<DraftMessage.draftMessage>(localDraft);\r\n      let message = localDraft.message;\r\n      let entities: MessageEntity[] = localDraft.entities;\r\n\r\n      if(localDraft.reply_to_msg_id) {\r\n        params.reply_to_msg_id = appMessagesIdsManager.getServerMessageId(localDraft.reply_to_msg_id);\r\n      }\r\n\r\n      if(entities?.length) {\r\n        params.entities = appMessagesManager.getInputEntities(entities);\r\n      }\r\n\r\n      if(localDraft.pFlags.no_webpage) {\r\n        params.no_webpage = localDraft.pFlags.no_webpage;\r\n      }\r\n\r\n      params.message = message;\r\n    }\r\n\r\n    const saveLocalDraft = draftObj || localDraft;\r\n    saveLocalDraft.date = tsNow(true) + serverTimeManager.serverTimeOffset;\r\n\r\n    this.saveDraft(peerId, threadId, saveLocalDraft, {notify: true, force});\r\n\r\n    if(saveOnServer && !threadId) {\r\n      return apiManager.invokeApi('messages.saveDraft', params);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public clearAllDrafts() {\r\n    return apiManager.invokeApi('messages.clearAllDrafts').then(bool => {\r\n      if(!bool) {\r\n        return;\r\n      }\r\n\r\n      for(const combined in this.drafts) {\r\n        const [peerId, threadId] = combined.split('_');\r\n        rootScope.dispatchEvent('draft_updated', {\r\n          peerId: peerId.toPeerId(),\r\n          threadId: threadId ? +threadId : undefined,\r\n          draft: undefined\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  public clearDraft(peerId: PeerId, threadId: number) {\r\n    const emptyDraft: DraftMessage.draftMessageEmpty = {\r\n      _: 'draftMessageEmpty'\r\n    };\r\n\r\n    if(threadId) {\r\n      this.syncDraft(peerId, threadId, emptyDraft as any, false, true);\r\n    } else {\r\n      this.saveDraft(peerId, threadId, emptyDraft, {notify: true, force: true});  \r\n    }\r\n  }\r\n\r\n  public setDraft(peerId: PeerId, threadId: number, message: string, entities?: MessageEntity[]) {\r\n    const draft: DraftMessage.draftMessage = {\r\n      _: 'draftMessage',\r\n      date: Date.now() / 1000 | 0,\r\n      message,\r\n      pFlags: {},\r\n      entities\r\n    };\r\n\r\n    if(threadId) {\r\n      this.syncDraft(peerId, threadId, draft, false, true);\r\n    } else {\r\n      this.saveDraft(peerId, threadId, draft, {notify: true, force: true});  \r\n    }\r\n  }\r\n}\r\n\r\nconst appDraftsManager = new AppDraftsManager();\r\nMOUNT_CLASS_TO.appDraftsManager = appDraftsManager;\r\nexport default appDraftsManager;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nconst ASSETS_PATH = 'assets/audio/';\n\nexport default class AudioAssetPlayer<AssetName extends string> {\n  private audio: HTMLAudioElement;\n  private tempId: number;\n\n  constructor(private assets: AssetName[]) {\n    this.tempId = 0;\n  }\n\n  public playSound(name: AssetName, loop = false) {\n    ++this.tempId;\n    \n    try {\n      const audio = this.createAudio();\n      audio.autoplay = true;\n      audio.src = ASSETS_PATH + name;\n      audio.loop = loop;\n      audio.play();\n    } catch(e) {\n      console.error('playSound', name, e);\n    }\n  }\n\n  public createAudio() {\n    let {audio} = this;\n    if(audio) {\n      return audio;\n    }\n\n    audio = this.audio = new Audio();\n    audio.play();\n    return audio;\n  }\n\n  public stopSound() {\n    this.audio?.pause();\n  }\n\n  public cancelDelayedPlay() {\n    ++this.tempId;\n  }\n\n  public playSoundWithTimeout(name: AssetName, loop: boolean, timeout: number) {\n    // timeout = 0;\n    const tempId = ++this.tempId;\n    setTimeout(() => {\n      if(this.tempId !== tempId) {\n        return;\n      }\n\n      this.playSound(name, loop);\n    }, timeout);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/evgeny-nadymov/telegram-react\n * Copyright (C) 2018 Evgeny Nadymov\n * https://github.com/evgeny-nadymov/telegram-react/blob/master/LICENSE\n */\n\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport AudioAssetPlayer from \"../../helpers/audioAssetPlayer\";\nimport { safeReplaceObject } from \"../../helpers/object\";\nimport { nextRandomUint } from \"../../helpers/random\";\nimport tsNow from \"../../helpers/tsNow\";\nimport { GroupCall, GroupCallParticipant, GroupCallParticipantVideo, GroupCallParticipantVideoSourceGroup, InputGroupCall, Peer, PhoneJoinGroupCall, PhoneJoinGroupCallPresentation, Update, Updates } from \"../../layer\";\nimport GroupCallInstance from \"../calls/groupCallInstance\";\nimport GROUP_CALL_STATE from \"../calls/groupCallState\";\nimport createMainStreamManager from \"../calls/helpers/createMainStreamManager\";\nimport { generateSsrc } from \"../calls/localConferenceDescription\";\nimport { WebRTCLineType } from \"../calls/sdpBuilder\";\nimport StreamManager from \"../calls/streamManager\";\nimport { Ssrc } from \"../calls/types\";\nimport { logger } from \"../logger\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport { NULL_PEER_ID } from \"../mtproto/mtproto_config\";\nimport rootScope from \"../rootScope\";\nimport apiUpdatesManager from \"./apiUpdatesManager\";\nimport appChatsManager from \"./appChatsManager\";\nimport appPeersManager from \"./appPeersManager\";\nimport appUsersManager from \"./appUsersManager\";\n\nexport type GroupCallId = GroupCall['id'];\nexport type MyGroupCall = GroupCall | InputGroupCall;\n\nexport type GroupCallConnectionType = 'main' | 'presentation';\n\nexport type JoinGroupCallJsonPayload = {\n  fingerprints: {\n    fingerprint: string;\n    setup: string;\n    hash: string;\n  }[];\n  pwd: string;\n  ssrc: number;\n  'ssrc-groups': GroupCallParticipantVideoSourceGroup.groupCallParticipantVideoSourceGroup[];\n  ufrag: string;\n};\n\nconst GET_PARTICIPANTS_LIMIT = 100;\n\nlet IS_MUTED = true;\n\nexport type GroupCallOutputSource = 'main' | 'presentation' | number;\n\nexport type GroupCallAudioAssetName = \"group_call_connect.mp3\" | \"group_call_end.mp3\" | \"group_call_start.mp3\" | \"voip_onallowtalk.mp3\";\n\nexport class AppGroupCallsManager {\n  private log: ReturnType<typeof logger>;\n  \n  private groupCalls: Map<GroupCallId, MyGroupCall>;\n  private participants: Map<GroupCallId, Map<PeerId, GroupCallParticipant>>;\n  private nextOffsets: Map<GroupCallId, string>;\n  \n  // private audioAsset: AudioAsset;\n  \n  private currentGroupCall: GroupCallInstance;\n  private connectionAudio: HTMLAudioElement;\n  private doNotDispatchParticipantUpdate: PeerId;\n  private audioAsset: AudioAssetPlayer<GroupCallAudioAssetName>;\n\n  constructor() {\n    this.log = logger('GROUP-CALLS');\n    \n    this.groupCalls = new Map();\n    this.participants = new Map();\n    this.nextOffsets = new Map();\n    \n    rootScope.addMultipleEventsListeners({\n      updateGroupCall: (update) => {\n        this.saveGroupCall(update.call, update.chat_id);\n      },\n      \n      updateGroupCallParticipants: (update) => {\n        this.saveGroupCall(update.call);\n        \n        // this.getGroupCallFull(update.call.id, true); // ! WARNING TEMP\n\n        const groupCallId = update.call.id;\n        this.saveApiParticipants(groupCallId, update.participants);\n      }\n    });\n\n    rootScope.addEventListener('group_call_update', (groupCall) => {\n      if(groupCall._ === 'groupCallDiscarded') {\n        const {currentGroupCall} = this;\n        if(currentGroupCall?.id === groupCall.id) {\n          currentGroupCall.hangUp(false, false, true);\n        }\n\n        this.participants.delete(groupCall.id);\n      }\n    });\n\n    this.audioAsset = new AudioAssetPlayer<GroupCallAudioAssetName>([\n      'group_call_connect.mp3',\n      'group_call_end.mp3',\n      'group_call_start.mp3',\n      'voip_onallowtalk.mp3'\n    ]);\n  }\n\n  get groupCall() {\n    return this.currentGroupCall;\n  }\n\n  public getCachedParticipants(groupCallId: GroupCallId) {\n    let participants = this.participants.get(groupCallId);\n    if(!participants) {\n      this.participants.set(groupCallId, participants = new Map());\n    }\n\n    return participants;\n  }\n\n  private prepareToSavingNextOffset(groupCallId: GroupCallId) {\n    const nextOffsetsMap = this.nextOffsets;\n\n    const setNextOffset = (newNextOffset: string) => {\n      if(nextOffsetsMap.get(groupCallId) === nextOffset) {\n        nextOffsetsMap.set(groupCallId, newNextOffset);\n      }\n    };\n\n    const nextOffset = nextOffsetsMap.get(groupCallId);\n    return {\n      nextOffset,\n      setNextOffset\n    };\n  }\n\n  public saveApiParticipant(groupCallId: GroupCallId, participant: GroupCallParticipant, skipCounterUpdating?: boolean) {\n    const {currentGroupCall} = this;\n    const participants = this.getCachedParticipants(groupCallId);\n\n    const peerId = appPeersManager.getPeerId(participant.peer);\n\n    const oldParticipant = participants.get(peerId);\n    const hasLeft = participant.pFlags.left;\n    if(!oldParticipant && hasLeft) {\n      return;\n    }\n\n    // * fix missing flag\n    if(!participant.pFlags.muted && !participant.pFlags.can_self_unmute) {\n      participant.pFlags.can_self_unmute = true;\n    }\n\n    const isCurrentGroupCall = currentGroupCall?.id === groupCallId;\n\n    if(oldParticipant) {\n      safeReplaceObject(oldParticipant, participant);\n      participant = oldParticipant;\n    } else {\n      participants.set(peerId, participant);\n    }\n\n    if(isCurrentGroupCall) {\n      currentGroupCall.onParticipantUpdate(participant, this.doNotDispatchParticipantUpdate);\n    }\n\n    // if(!skipCounterUpdating) {\n      const groupCall = this.getGroupCall(groupCallId);\n      if(groupCall?._ === 'groupCall') {\n        let modified = false;\n        if(hasLeft) {\n          --groupCall.participants_count;\n          modified = true;\n        } else if(participant.pFlags.just_joined && !oldParticipant && !participant.pFlags.self) {\n          ++groupCall.participants_count;\n          modified = true;\n        }\n  \n        if(modified) {\n          rootScope.dispatchEvent('group_call_update', groupCall);\n        }\n      }\n    // }\n    \n    if(hasLeft) {\n      participants.delete(peerId);\n    }\n\n    if(oldParticipant && this.doNotDispatchParticipantUpdate !== peerId) {\n      rootScope.dispatchEvent('group_call_participant', {\n        groupCallId,\n        participant\n      });\n    }\n  }\n\n  public saveApiParticipants(groupCallId: GroupCallId, apiParticipants: GroupCallParticipant[], skipCounterUpdating?: boolean) {\n    if((apiParticipants as any).saved) return;\n    (apiParticipants as any).saved = true;\n    apiParticipants.forEach(p => this.saveApiParticipant(groupCallId, p, skipCounterUpdating));\n  }\n\n  public async editParticipant(groupCallId: GroupCallId, participant: GroupCallParticipant, options: Partial<{\n    muted: boolean,\n    volume: number,\n    raiseHand: boolean,\n    videoStopped: boolean,\n    videoPaused: boolean,\n    presentationPaused: boolean\n  }>) {\n    if(!Object.keys(options).length) {\n      return;\n    }\n\n    let processUpdate = true;\n    if(participant) {\n      const {currentGroupCall} = this;\n      const isCurrentCall = currentGroupCall?.id === groupCallId;\n      const isUpdatingMeInCurrentCall = isCurrentCall && participant.pFlags.self;\n\n      if(isUpdatingMeInCurrentCall) {\n        if(options.muted !== undefined && !currentGroupCall.isSharingAudio) {\n          delete options.muted;\n\n          if(!Object.keys(options).length) {\n            return;\n          }\n        }\n      }\n\n      // if(isCurrentCall) {\n        const muted = options.muted;\n        if(muted !== undefined) {\n          /* const isAdmin = appChatsManager.hasRights(currentGroupCall.chatId, 'manage_call');\n          if(isAdmin) {\n            if(muted) {\n              participant.pFlags.muted = true;\n              delete participant.pFlags.can_self_unmute;\n            } else {\n              participant.pFlags.can_self_unmute = true;\n            }\n          } else  */if(participant.pFlags.self) {\n            if(muted) {\n              participant.pFlags.muted = true;\n            } else if(participant.pFlags.can_self_unmute) {\n              delete participant.pFlags.muted;\n            }\n          }/*  else {\n            if(muted) {\n              participant.pFlags.muted_by_you = true;\n            } else {\n              delete participant.pFlags.muted_by_you;\n            }\n          } */\n        }\n      // }\n\n      /* const a: [keyof GroupCallParticipant['pFlags'], keyof typeof options][] = [\n        ['muted', 'muted']\n      ];\n\n      a.forEach(([key, optionKey]) => {\n        const value = options[optionKey];\n        if(value === undefined) {\n          return;\n        }\n\n        if(value) {\n          participant.pFlags[key] = true;\n        } else {\n          delete participant.pFlags[key];\n        }\n      }); */\n\n      if(options.raiseHand !== undefined) {\n        if(options.raiseHand) participant.raise_hand_rating = '1';\n        else delete participant.raise_hand_rating;\n      }\n\n      if(isUpdatingMeInCurrentCall) {\n        if(options.videoStopped !== undefined) {\n          if(options.videoStopped) delete participant.video;\n          else participant.video = this.generateSelfVideo(currentGroupCall.connections.main.sources.video);\n        }\n\n        if(!participant.pFlags.muted && participant.pFlags.can_self_unmute) {\n          currentGroupCall.setMuted(false);\n        }\n\n        currentGroupCall.dispatchEvent('state', currentGroupCall.state);\n      }\n\n      rootScope.dispatchEvent('group_call_participant', {groupCallId, participant});\n\n      /* if(participant.pFlags.self) {\n        processUpdate = false;\n      } */\n    }\n\n    const peerId = participant.pFlags.self ? NULL_PEER_ID : appPeersManager.getPeerId(participant.peer);\n    const updates = await apiManager.invokeApiSingle('phone.editGroupCallParticipant', {\n      call: appGroupCallsManager.getGroupCallInput(groupCallId),\n      participant: peerId === NULL_PEER_ID ? appPeersManager.getInputPeerSelf() : appPeersManager.getInputPeerById(peerId),\n      muted: options.muted,\n      volume: options.volume,\n      raise_hand: options.raiseHand,\n      video_paused: options.videoPaused,\n      video_stopped: options.videoStopped,\n      presentation_paused: options.presentationPaused\n    });\n    \n    // do not replace with peerId because it can be null\n    if(!processUpdate) this.doNotDispatchParticipantUpdate = appPeersManager.getPeerId(participant.peer);\n    apiUpdatesManager.processUpdateMessage(updates);\n    if(!processUpdate) this.doNotDispatchParticipantUpdate = undefined;\n  }\n  \n  public getGroupCall(id: GroupCallId) {\n    return this.groupCalls.get(id);\n  }\n\n  public async getGroupCallFull(id: GroupCallId, override?: boolean): Promise<GroupCall> {\n    const call = this.getGroupCall(id);\n    if(call && call._ !== 'inputGroupCall' && !override) {\n      return call;\n    }\n\n    const limit = this.getCachedParticipants(id).size ? 0 : GET_PARTICIPANTS_LIMIT;\n    return apiManager.invokeApiSingleProcess({\n      method: 'phone.getGroupCall',\n      params: {\n        call: this.getGroupCallInput(id),\n        limit\n      },\n      processResult: (groupCall) => {\n        // ? maybe I should save group call after participants so I can avoid passing the 'skipCounterUpdating' flag ?\n        appUsersManager.saveApiUsers(groupCall.users);\n        appChatsManager.saveApiChats(groupCall.chats);\n        this.saveApiParticipants(id, groupCall.participants, true);\n        const call = this.saveGroupCall(groupCall.call) as GroupCall;\n\n        if(limit && this.nextOffsets.get(id) === undefined) {\n          this.nextOffsets.set(id, groupCall.participants_next_offset);\n        }\n\n        return call;\n      }\n    });\n  }\n  \n  public saveGroupCall(call: MyGroupCall, chatId?: ChatId) {\n    const oldCall = this.groupCalls.get(call.id);\n    const shouldUpdate = call._ !== 'inputGroupCall' && (!oldCall || oldCall._ !== 'groupCallDiscarded');\n    if(oldCall) {\n      if(shouldUpdate) {\n        safeReplaceObject(oldCall, call);\n      }\n      \n      call = oldCall;\n    } else {\n      this.groupCalls.set(call.id, call);\n    }\n\n    if(shouldUpdate) {\n      rootScope.dispatchEvent('group_call_update', call as any);\n    }\n\n    return call;\n  }\n  \n  public startConnectingSound() {\n    this.stopConnectingSound();\n    this.audioAsset.playSoundWithTimeout('group_call_connect.mp3', true, 2500);\n  }\n  \n  public stopConnectingSound() {\n    this.audioAsset.stopSound();\n    this.audioAsset.cancelDelayedPlay();\n  }\n\n  public setCurrentGroupCall(groupCall: GroupCallInstance) {\n    this.currentGroupCall = groupCall;\n\n    if(groupCall) {\n      rootScope.dispatchEvent('group_call_instance', groupCall);\n    }\n    /* TdLibController.clientUpdate({\n      '@type': 'clientUpdateGroupCall',\n      call\n    }); */\n  }\n\n  public async createGroupCall(chatId: ChatId, scheduleDate?: number, title?: string) {\n    const updates = await apiManager.invokeApi('phone.createGroupCall', {\n      peer: appPeersManager.getInputPeerById(chatId.toPeerId(true)),\n      random_id: nextRandomUint(32),\n      schedule_date: scheduleDate,\n      title\n    });\n\n    apiUpdatesManager.processUpdateMessage(updates);\n\n    const update = (updates as Updates.updates).updates.find(update => update._ === 'updateGroupCall') as Update.updateGroupCall;\n    return update.call;\n  }\n  \n  public async joinGroupCall(chatId: ChatId, groupCallId: GroupCallId, muted = IS_MUTED, rejoin?: boolean, joinVideo?: boolean) {\n    this.audioAsset.createAudio();\n\n    this.log(`joinGroupCall chatId=${chatId} id=${groupCallId} muted=${muted} rejoin=${rejoin}`);\n    \n    let streamManager: StreamManager;\n    if(rejoin) {\n      streamManager = this.currentGroupCall.connections.main.streamManager;\n    } else {\n      streamManager = await createMainStreamManager(muted, joinVideo);\n    }\n\n    return this.joinGroupCallInternal(chatId, groupCallId, streamManager, muted, rejoin, joinVideo);\n  }\n\n  public async joinGroupCallInternal(chatId: ChatId, groupCallId: GroupCallId, streamManager: StreamManager, muted: boolean, rejoin = false, joinVideo?: boolean) {\n    const log = this.log.bindPrefix('joinGroupCallInternal');\n    log('start', groupCallId);\n\n    const type: GroupCallConnectionType = 'main';\n\n    let {currentGroupCall} = this;\n    if(currentGroupCall && rejoin) {\n      // currentGroupCall.connections.main.connection = connection;\n      currentGroupCall.handleUpdateGroupCallParticipants = false;\n      currentGroupCall.updatingSdp = false;\n      log('update currentGroupCall', groupCallId, currentGroupCall);\n    } else {\n      currentGroupCall = new GroupCallInstance({\n        chatId,\n        id: groupCallId\n      });\n\n      currentGroupCall.fixSafariAudio();\n\n      currentGroupCall.addEventListener('state', (state) => {\n        if(this.currentGroupCall === currentGroupCall && state === GROUP_CALL_STATE.CLOSED) {\n          this.setCurrentGroupCall(null);\n          this.stopConnectingSound();\n          this.audioAsset.playSound('group_call_end.mp3');\n          rootScope.dispatchEvent('chat_update', currentGroupCall.chatId);\n        }\n      });\n\n      currentGroupCall.groupCall = await this.getGroupCallFull(groupCallId);\n\n      const connectionInstance = currentGroupCall.createConnectionInstance({\n        streamManager,\n        type,\n        options: {\n          type,\n          isMuted: muted,\n          joinVideo,\n          rejoin\n        }\n      });\n\n      const connection = connectionInstance.createPeerConnection();\n      connection.addEventListener('negotiationneeded', () => {\n        connectionInstance.negotiate();\n      });\n\n      connection.addEventListener('track', (event) => {\n        log('ontrack', event);\n        currentGroupCall.onTrack(event);\n      });\n  \n      connection.addEventListener('iceconnectionstatechange', () => {\n        currentGroupCall.dispatchEvent('state', currentGroupCall.state);\n        \n        const {iceConnectionState} = connection;\n        if(iceConnectionState === 'disconnected' || iceConnectionState === 'checking' || iceConnectionState === 'new') {\n          this.startConnectingSound();\n        } else {\n          this.stopConnectingSound();\n        }\n        \n        switch(iceConnectionState) {\n          case 'checking': {\n            break;\n          }\n          \n          case 'closed': {\n            currentGroupCall.hangUp();\n            break;\n          }\n          \n          case 'completed': {\n            break;\n          }\n          \n          case 'connected': {\n            if(!currentGroupCall.joined) {\n              currentGroupCall.joined = true;\n              this.audioAsset.playSound('group_call_start.mp3');\n  \n              this.getGroupCallParticipants(groupCallId).then(({participants}) => {\n                this.saveApiParticipants(groupCallId, [...participants.values()]);\n              });\n            }\n            \n            break;\n          }\n          \n          case 'disconnected': {\n            break;\n          }\n          \n          case 'failed': {\n            //TODO: replace with ICE restart\n            currentGroupCall.hangUp();\n            // connection.restartIce();\n            break;\n          }\n          \n          case 'new': {\n            break;\n          }\n        }\n      });\n\n      connectionInstance.createDescription();\n      connectionInstance.createDataChannel();\n\n      connectionInstance.appendStreamToConference();\n\n      this.setCurrentGroupCall(currentGroupCall);\n      log('set currentGroupCall', groupCallId, currentGroupCall);\n\n      this.startConnectingSound();\n\n      return connectionInstance.negotiate();\n    }\n  }\n  \n  public getGroupCallInput(id: GroupCallId): InputGroupCall {\n    const groupCall = this.getGroupCall(id);\n    return {\n      _: 'inputGroupCall',\n      id: groupCall.id,\n      access_hash: groupCall.access_hash\n    };\n  }\n\n  public generateSelfVideo(source: Ssrc, audioSource?: number): GroupCallParticipantVideo {\n    return source && {\n      _: 'groupCallParticipantVideo',\n      pFlags: {},\n      endpoint: '',\n      source_groups: source.sourceGroups,\n      audio_source: audioSource\n    };\n  }\n  \n  public generateSelfParticipant(): GroupCallParticipant {\n    const mainSources = this.currentGroupCall.connections.main.sources;\n    const presentationSources = this.currentGroupCall.connections.presentation?.sources;\n    return {\n      _: 'groupCallParticipant',\n      pFlags: {\n        can_self_unmute: true,\n        self: true\n      },\n      source: mainSources.audio.source,\n      video: this.generateSelfVideo(mainSources.video),\n      presentation: presentationSources && this.generateSelfVideo(presentationSources.video, presentationSources.audio?.source),\n      date: tsNow(true),\n      peer: appPeersManager.getOutputPeer(rootScope.myId)\n    };\n  }\n\n  public makeSsrcsFromParticipant = (participant: GroupCallParticipant) => {\n    return [\n      this.makeSsrcFromParticipant(participant, 'audio', participant.source),\n      participant.video?.audio_source && this.makeSsrcFromParticipant(participant, 'audio', participant.video.audio_source),\n      participant.video && this.makeSsrcFromParticipant(participant, 'video', participant.video.source_groups, participant.video.endpoint),\n      participant.presentation?.audio_source && this.makeSsrcFromParticipant(participant, 'audio', participant.presentation.audio_source),\n      participant.presentation && this.makeSsrcFromParticipant(participant, 'video', participant.presentation.source_groups, participant.presentation.endpoint)\n    ].filter(Boolean);\n  };\n\n  public makeSsrcFromParticipant(participant: GroupCallParticipant, type: WebRTCLineType, source?: number | GroupCallParticipantVideoSourceGroup[], endpoint?: string): Ssrc {\n    return generateSsrc(type, source, endpoint);\n  }\n\n  public async getGroupCallParticipants(id: GroupCallId) {\n    const {nextOffset, setNextOffset} = this.prepareToSavingNextOffset(id);\n\n    if(nextOffset !== '') {\n      await apiManager.invokeApiSingleProcess({\n        method: 'phone.getGroupParticipants', \n        params: {\n          call: this.getGroupCallInput(id),\n          ids: [],\n          sources: [],\n          offset: nextOffset || '',\n          limit: GET_PARTICIPANTS_LIMIT\n        },\n        processResult: (groupCallParticipants) => {\n          const newNextOffset = groupCallParticipants.count === groupCallParticipants.participants.length ? '' : groupCallParticipants.next_offset;\n  \n          appChatsManager.saveApiChats(groupCallParticipants.chats);\n          appUsersManager.saveApiUsers(groupCallParticipants.users);\n          this.saveApiParticipants(id, groupCallParticipants.participants);\n    \n          setNextOffset(newNextOffset);\n        }\n      });\n    }\n\n    return {\n      participants: this.getCachedParticipants(id),\n      isEnd: this.nextOffsets.get(id) === ''\n    };\n  }\n\n  public async hangUp(groupCallId: GroupCallId, discard = false, rejoin = false) {\n    this.log(`hangUp start id=${groupCallId} discard=${discard} rejoin=${rejoin}`);\n    const {currentGroupCall} = this;\n    if(currentGroupCall?.id !== groupCallId) return;\n\n    currentGroupCall.hangUp(discard, rejoin);\n  }\n\n  public toggleMuted(muted?: boolean) {\n    return this.changeUserMuted(NULL_PEER_ID, muted);\n  }\n  \n  public changeUserMuted(peerId: PeerId, muted?: boolean) {\n    const {currentGroupCall} = this;\n    if(!currentGroupCall) return;\n\n    const participant = currentGroupCall.getParticipantByPeerId(peerId);\n    if(NULL_PEER_ID === peerId && participant.pFlags.can_self_unmute) {\n      muted = muted === undefined ? !participant.pFlags.muted : muted;\n    }\n\n    return this.editParticipant(currentGroupCall.id, participant, {muted});\n  }\n}\n\nconst appGroupCallsManager = new AppGroupCallsManager();\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.appGroupCallsManager = appGroupCallsManager);\nexport default appGroupCallsManager;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { GROUP_CALL_AMPLITUDE_ANALYSE_INTERVAL_MS } from \"../constants\";\nimport StreamManager from \"../streamManager\";\nimport getAudioConstraints from \"./getAudioConstraints\";\nimport getStream from \"./getStream\";\nimport getVideoConstraints from \"./getVideoConstraints\";\n\nexport default async function createMainStreamManager(muted?: boolean, joinVideo?: boolean) {\n  const constraints: MediaStreamConstraints = {\n    audio: getAudioConstraints(),\n    video: joinVideo && getVideoConstraints()\n  };\n\n  const streamManager = new StreamManager(GROUP_CALL_AMPLITUDE_ANALYSE_INTERVAL_MS);\n  \n  try {\n    const stream = await getStream(constraints, muted);\n    streamManager.addStream(stream, 'input');\n  } catch(err) {\n    console.error('joinGroupCall getStream error', err, constraints);\n    streamManager.inputStream = new MediaStream();\n  }\n\n  return streamManager;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport Config from \"../lib/config\";\n\nconst badCharsRe = /[`~!@#$%^&*()\\-_=+\\[\\]\\\\|{}'\";:\\/?.>,<]+/g;\nconst trimRe = /^\\s+|\\s$/g;\n\nexport function clearBadCharsAndTrim(text: string) {\n  return text.replace(badCharsRe, '').replace(trimRe, '');\n}\n\nexport function latinizeString(text: string) {\n  return text.replace(/[^A-Za-z0-9]/g, (ch) => {\n    const latinizeCh = Config.LatinizeMap[ch];\n    return latinizeCh !== undefined ? latinizeCh : ch;\n  });\n}\n\nexport default function cleanSearchText(text: string, latinize = true) {\n  const hasTag = text.charAt(0) === '%';\n  text = clearBadCharsAndTrim(text);\n  if(latinize) text = latinizeString(text);\n  \n  text = text.toLowerCase();\n  if(hasTag) text = '%' + text;\n\n  return text;\n}\n\nexport type ProcessSearchTextOptions = Partial<{\n  clearBadChars: boolean,\n  latinize: boolean,\n  ignoreCase: boolean,\n  includeTag: boolean\n}>;\n\nexport function processSearchText(text: string, options: ProcessSearchTextOptions = {}) {\n  const hasTag = options.includeTag && text.charAt(0) === '%';\n  if(options.clearBadChars) text = clearBadCharsAndTrim(text);\n  if(options.latinize) text = latinizeString(text);\n  if(options.ignoreCase) text = text.toLowerCase();\n  if(hasTag) text = '%' + text;\n  return text;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\n\r\n/**\r\n * Descend sorted storage\r\n */\r\n\r\ntype ItemType = number;\r\n\r\nexport enum SliceEnd {\r\n  None = 0,\r\n  Top = 1,\r\n  Bottom = 2,\r\n  Both = SliceEnd.Top | SliceEnd.Bottom\r\n};\r\n\r\nexport interface Slice extends Array<ItemType> {\r\n  //slicedArray: SlicedArray;\r\n  end: SliceEnd;\r\n\r\n  isEnd: (side: SliceEnd) => boolean;\r\n  setEnd: (side: SliceEnd) => void;\r\n  unsetEnd: (side: SliceEnd) => void;\r\n\r\n  slice: (from?: number, to?: number) => Slice;\r\n  splice: (start: number, deleteCount: number, ...items: ItemType[]) => Slice;\r\n}\r\n\r\nexport interface SliceConstructor {\r\n  new(...items: ItemType[]): Slice;\r\n}\r\n\r\nexport default class SlicedArray {\r\n  private slices: Slice[]/*  = [[7,6,5],[4,3,2],[1,0,-1]] */;\r\n  private sliceConstructor: SliceConstructor;\r\n  \r\n  constructor() {\r\n    // @ts-ignore\r\n    this.sliceConstructor = SlicedArray.getSliceConstructor(this);\r\n\r\n    const first = this.constructSlice();\r\n    //first.setEnd(SliceEnd.Bottom);\r\n    this.slices = [first];\r\n  }\r\n\r\n  private static getSliceConstructor(slicedArray: SlicedArray) {\r\n    return class Slice extends Array<ItemType> implements Slice {\r\n      //slicedArray: SlicedArray;\r\n      end: SliceEnd = SliceEnd.None;\r\n  \r\n      /* constructor(...items: ItemType[]) {\r\n        super(...items);\r\n        //this.slicedArray = slicedArray;\r\n      } */\r\n  \r\n      isEnd(side: SliceEnd): boolean {\r\n        if((this.end & side) === side) {\r\n          return true;\r\n        }/*  else if(!this.slicedArray) {\r\n          return false;\r\n        } */\r\n  \r\n        let isEnd = false;\r\n        if(side === SliceEnd.Top) {\r\n          const slice = slicedArray.last;\r\n          isEnd = slice.end & side ? this.includes(slice[slice.length - 1])/*  || !slice.length */ : false;\r\n        } else if(side === SliceEnd.Bottom) {\r\n          const slice = slicedArray.first;\r\n          isEnd = slice.end & side ? this.includes(slice[0])/*  || !slice.length */ : false;\r\n        } else if(side === SliceEnd.Both) {\r\n          return this.isEnd(SliceEnd.Top) && this.isEnd(SliceEnd.Bottom);\r\n        }\r\n\r\n        if(isEnd) {\r\n          this.setEnd(side);\r\n        }\r\n  \r\n        return isEnd;\r\n      }\r\n  \r\n      setEnd(side: SliceEnd) {\r\n        this.end |= side;\r\n      }\r\n\r\n      unsetEnd(side: SliceEnd) {\r\n        this.end &= ~side;\r\n      }\r\n\r\n      splice(start: number, deleteCount: number, ...items: ItemType[]) {\r\n        const ret = super.splice(start, deleteCount, ...items);\r\n\r\n        if(!this.length) {\r\n          const slices = slicedArray.slices as number[][];\r\n          const idx = slices.indexOf(this);\r\n          if(idx !== -1) {\r\n            if(slices.length === 1) { // left empty slice without ends\r\n              this.unsetEnd(SliceEnd.Both);\r\n            } else { // delete this slice\r\n              slices.splice(idx, 1);\r\n            }\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  public constructSlice(...items: ItemType[]) {\r\n    //const slice = new Slice(this, ...items);\r\n    // can't pass items directly to constructor because first argument is length\r\n    const slice = new this.sliceConstructor(items.length);\r\n    for(let i = 0, length = items.length; i < length; ++i) {\r\n      slice[i] = items[i];\r\n    }\r\n    return slice;\r\n    \r\n    // ! code below will slow execution in 15 times\r\n    /* const self = this;\r\n    const p: Slice = new Proxy(slice, {\r\n      get: function(target, name: any) {\r\n        if(name === 'constructor') {\r\n          const p = new Proxy(Slice, {\r\n            construct: (target, args) => {\r\n              return self.constructSlice(...args);\r\n            }\r\n          });\r\n\r\n          return p;\r\n        }\r\n\r\n        return target[name];\r\n      }\r\n    });\r\n\r\n    return p; */\r\n\r\n    /*\r\n    var p = slicedArray.constructSlice();\r\n    p.length = 100000;\r\n    p.fill(255);\r\n\r\n    var a = new Array(100000);\r\n    a.fill(255);\r\n\r\n    var b = 0;\r\n    var perf = performance.now();\r\n    for(var i = 0; i < p.length; ++i) {\r\n        b += p[i];\r\n    }\r\n\r\n    console.log('perf 1', performance.now() - perf);\r\n\r\n    b = 0;\r\n    perf = performance.now();\r\n    for(var i = 0; i < a.length; ++i) {\r\n        b += a[i];\r\n    }\r\n\r\n    console.log('perf 2', performance.now() - perf);\r\n    */\r\n  }\r\n\r\n  public insertSlice(slice: ItemType[], flatten = true) {\r\n    if(!slice.length) {\r\n      return;\r\n    }\r\n\r\n    const first = this.slices[0];\r\n    if(!first.length) {\r\n      first.push(...slice);\r\n      return first;\r\n    }\r\n\r\n    const lowerBound = slice[slice.length - 1];\r\n    const upperBound = slice[0];\r\n\r\n    let foundSlice: Slice, lowerIndex = -1, upperIndex = -1, foundSliceIndex = 0;\r\n    for(; foundSliceIndex < this.slices.length; ++foundSliceIndex) {\r\n      foundSlice = this.slices[foundSliceIndex];\r\n      lowerIndex = foundSlice.indexOf(lowerBound);\r\n      upperIndex = foundSlice.indexOf(upperBound);\r\n      \r\n      if(upperIndex !== -1 && -1 !== lowerIndex) {\r\n        break;\r\n      } else if(upperIndex !== -1 || -1 !== lowerIndex) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(upperIndex !== -1 && -1 !== lowerIndex) {\r\n\r\n    } else if(upperIndex !== -1) {  // ([1, 2, 3] | [1, 2, 3, 4, 5]) -> [1, 2, 3, 4, 5]\r\n      const sliced = slice.slice(foundSlice.length - upperIndex);\r\n      foundSlice.push(...sliced);\r\n    } else if(lowerIndex !== -1) {  // ([1, 2, 3] | [-1, 0, 1]) -> [-1, 0, 1, 2, 3]\r\n      const sliced = slice.slice(0, slice.length - lowerIndex - 1);\r\n      foundSlice.unshift(...sliced);\r\n    } else {\r\n      let insertIndex = 0;\r\n      for(const length = this.slices.length; insertIndex < length; ++insertIndex) { // * maybe should iterate from the end, could be faster ?\r\n        const s = this.slices[insertIndex];\r\n        if(slice[0] > s[0]) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.slices.splice(insertIndex, 0, this.constructSlice(...slice));\r\n      foundSliceIndex = insertIndex;\r\n    }\r\n\r\n    if(flatten) {\r\n      return this.flatten(foundSliceIndex);\r\n    }\r\n  }\r\n\r\n  private flatten(foundSliceIndex: number) {\r\n    if(this.slices.length >= 2) {\r\n      for(let i = 0, length = this.slices.length; i < (length - 1); ++i) {\r\n        const prevSlice = this.slices[i];\r\n        const nextSlice = this.slices[i + 1];\r\n  \r\n        const upperIndex = prevSlice.indexOf(nextSlice[0]);\r\n        if(upperIndex !== -1) {\r\n          prevSlice.setEnd(nextSlice.end);\r\n          this.slices.splice(i + 1, 1);\r\n\r\n          if(i < foundSliceIndex) {\r\n            --foundSliceIndex;\r\n          }\r\n\r\n          --length; // respect array bounds\r\n          --i;      // repeat from the same place\r\n  \r\n          this.insertSlice(nextSlice, false);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.slices[foundSliceIndex];\r\n  }\r\n\r\n  // * \r\n  \r\n  get first() {\r\n    return this.slices[0];\r\n  }\r\n  \r\n  get last() {\r\n    return this.slices[this.slices.length - 1];\r\n  }\r\n\r\n  get slice() {\r\n    return this.first;\r\n  }\r\n\r\n  get length() {\r\n    return this.slice.length;\r\n  }\r\n\r\n  public findSlice(item: ItemType) {\r\n    for(let i = 0, length = this.slices.length; i < length; ++i) {\r\n      const slice = this.slices[i];\r\n      const index = slice.indexOf(item);\r\n      if(index !== -1) {\r\n        return {slice, index};\r\n      }\r\n    }\r\n    \r\n    return undefined;\r\n  }\r\n\r\n  public findSliceOffset(maxId: number) {\r\n    let slice: Slice;\r\n    for(let i = 0; i < this.slices.length; ++i) {\r\n      let offset = 0;\r\n      slice = this.slices[i];\r\n      if(slice.length < 2) {\r\n        continue;\r\n      }\r\n      \r\n      for(; offset < slice.length; offset++) {\r\n        if(maxId >= slice[offset]) {\r\n          /* if(!offset) { // because can't find 3 in [[5,4], [2,1]]\r\n            return undefined;\r\n          } */\r\n\r\n          return {\r\n            slice, \r\n            offset: maxId === slice[offset] ? offset : offset - 1\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    if(slice && slice.isEnd(SliceEnd.Top)) {\r\n      return {\r\n        slice,\r\n        offset: slice.length\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  // * https://core.telegram.org/api/offsets\r\n  public sliceMe(offsetId: number, add_offset: number, limit: number) {\r\n    let slice = this.slice;\r\n    let offset = 0;\r\n    let sliceOffset = 0;\r\n\r\n    if(offsetId) {\r\n      const pos = this.findSliceOffset(offsetId);\r\n      if(!pos) {\r\n        return undefined;\r\n      }\r\n\r\n      slice = pos.slice;\r\n      offset = sliceOffset = pos.offset;\r\n\r\n      if(slice.includes(offsetId)) {\r\n        sliceOffset += 1;\r\n      }\r\n\r\n      /* if(slice.includes(offsetId) && add_offset < 0) {\r\n        add_offset += 1;\r\n      } */\r\n    }\r\n\r\n    let sliceStart = Math.max(sliceOffset + add_offset, 0);\r\n    let sliceEnd = sliceOffset + add_offset + limit;\r\n    //const fixHalfBackLimit = add_offset && !(limit / add_offset % 2) && (sliceEnd % 2) ? 1 : 0;\r\n    //sliceEnd += fixHalfBackLimit;\r\n\r\n    const sliced = slice.slice(sliceStart, sliceEnd) as Slice;\r\n\r\n    const topWasMeantToLoad = add_offset < 0 ? limit + add_offset : limit;\r\n    const bottomWasMeantToLoad = Math.abs(add_offset);\r\n\r\n    // can use 'slice' here to check because if it's end, then 'sliced' is out of 'slice'\r\n    // useful when there is only 1 message in chat on its reopening\r\n    const topFulfilled = (slice.length - sliceOffset) >= topWasMeantToLoad || (slice.isEnd(SliceEnd.Top) ? (sliced.setEnd(SliceEnd.Top), true) : false);\r\n    const bottomFulfilled = (sliceOffset - bottomWasMeantToLoad) >= 0 || (slice.isEnd(SliceEnd.Bottom) ? (sliced.setEnd(SliceEnd.Bottom), true) : false);\r\n\r\n    //console.log('sliceMe', topFulfilled, bottomFulfilled);\r\n\r\n    return {\r\n      slice: sliced, \r\n      offsetIdOffset: offset,\r\n      fulfilled: SliceEnd.None | (topFulfilled && bottomFulfilled ? SliceEnd.Both : ((topFulfilled ? SliceEnd.Top : SliceEnd.None) | (bottomFulfilled ? SliceEnd.Bottom : SliceEnd.None)))\r\n    };\r\n  }\r\n\r\n  public unshift(...items: ItemType[]) {\r\n    let slice = this.first;\r\n    if(!slice.length) {\r\n      slice.setEnd(SliceEnd.Bottom);\r\n    } else if(!slice.isEnd(SliceEnd.Bottom)) {\r\n      slice = this.constructSlice();\r\n      slice.setEnd(SliceEnd.Bottom);\r\n      this.slices.unshift(slice);\r\n    }\r\n\r\n    slice.unshift(...items);\r\n  }\r\n\r\n  public push(...items: ItemType[]) {\r\n    let slice = this.last;\r\n    if(!slice.length) {\r\n      slice.setEnd(SliceEnd.Top);\r\n    } else if(!slice.isEnd(SliceEnd.Top)) {\r\n      slice = this.constructSlice();\r\n      slice.setEnd(SliceEnd.Top);\r\n      this.slices.push(slice);\r\n    }\r\n\r\n    slice.push(...items);\r\n  }\r\n\r\n  public delete(item: ItemType) {\r\n    const found = this.findSlice(item);\r\n    if(found) {\r\n      found.slice.splice(found.index, 1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.SlicedArray = SlicedArray);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\nimport { copy } from \"../../helpers/object\";\r\nimport { InputMedia, Message, MessageEntity, MessageMedia, Poll, PollResults } from \"../../layer\";\r\nimport { logger, LogTypes } from \"../logger\";\r\nimport apiManager from \"../mtproto/mtprotoworker\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport rootScope from \"../rootScope\";\r\nimport apiUpdatesManager from \"./apiUpdatesManager\";\r\nimport appMessagesIdsManager from \"./appMessagesIdsManager\";\r\nimport appMessagesManager from './appMessagesManager';\r\nimport appPeersManager from './appPeersManager';\r\nimport appUsersManager from \"./appUsersManager\";\r\n\r\nexport class AppPollsManager {\r\n  public polls: {[id: string]: Poll} = {};\r\n  public results: {[id: string]: PollResults} = {};\r\n  public pollToMessages: {[id: string]: Set<string>} = {};\r\n\r\n  private log = logger('POLLS', LogTypes.Error);\r\n\r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updateMessagePoll: (update) => {\r\n        this.log('updateMessagePoll:', update);\r\n\r\n        let poll: Poll = update.poll || this.polls[update.poll_id];\r\n        if(!poll) {\r\n          return;\r\n        }\r\n\r\n        let results = update.results;\r\n        const ret = this.savePoll(poll, results as any);\r\n        poll = ret.poll;\r\n        results = ret.results;\r\n        \r\n        rootScope.dispatchEvent('poll_update', {poll, results: results as any});\r\n      }\r\n    });\r\n  }\r\n\r\n  public savePoll(poll: Poll, results: PollResults, message?: Message.message) {\r\n    if(message) {\r\n      this.updatePollToMessage(message, true);\r\n    }\r\n\r\n    const id = poll.id;\r\n    if(this.polls[id]) {\r\n      poll = Object.assign(this.polls[id], poll);\r\n      results = this.saveResults(poll, results);\r\n    } else {\r\n      this.polls[id] = poll;\r\n\r\n      poll.rQuestion = RichTextProcessor.wrapEmojiText(poll.question);\r\n      poll.rReply = RichTextProcessor.wrapEmojiText('📊') + ' ' + (poll.rQuestion || 'poll');\r\n      poll.chosenIndexes = [];\r\n      results = this.saveResults(poll, results);\r\n    }\r\n\r\n    return {poll, results};\r\n  }\r\n\r\n  public saveResults(poll: Poll, results: PollResults) {\r\n    if(this.results[poll.id]) {\r\n      results = Object.assign(this.results[poll.id], results);\r\n    } else {\r\n      this.results[poll.id] = results;\r\n    }\r\n\r\n    if(!results.pFlags.min) { // ! https://core.telegram.org/constructor/pollResults - min\r\n      poll.chosenIndexes.length = 0;\r\n      if(results?.results?.length) {\r\n        results.results.forEach((answer, idx) => {\r\n          if(answer.pFlags?.chosen) {\r\n            poll.chosenIndexes.push(idx);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  public getPoll(pollId: string): {poll: Poll, results: PollResults} {\r\n    return {\r\n      poll: this.polls[pollId], \r\n      results: this.results[pollId]\r\n    };\r\n  }\r\n\r\n  public getInputMediaPoll(poll: Poll, correctAnswers?: Uint8Array[], solution?: string, solutionEntities?: MessageEntity[]): InputMedia.inputMediaPoll {\r\n    if(solution) {\r\n      if(!solutionEntities) {\r\n        solutionEntities = [];\r\n      }\r\n\r\n      solution = RichTextProcessor.parseMarkdown(solution, solutionEntities);\r\n    } else {\r\n      solution = undefined; // can be string here\r\n    }\r\n\r\n    return {\r\n      _: 'inputMediaPoll',\r\n      poll,\r\n      correct_answers: correctAnswers,\r\n      solution,\r\n      solution_entities: solution ? solutionEntities : undefined\r\n    };\r\n  }\r\n\r\n  public updatePollToMessage(message: Message.message, add: boolean) {\r\n    const {id} = (message.media as MessageMedia.messageMediaPoll).poll;\r\n    let set = this.pollToMessages[id];\r\n    \r\n    if(!add && !set) {\r\n      return;\r\n    }\r\n\r\n    if(!set) {\r\n      set = this.pollToMessages[id] = new Set();\r\n    }\r\n\r\n    const key = message.peerId + '_' + message.mid;\r\n    if(add) set.add(key);\r\n    else set.delete(key);\r\n\r\n    if(!add && !set.size) {\r\n      delete this.polls[id];\r\n      delete this.results[id];\r\n      delete this.pollToMessages[id];\r\n    }\r\n  }\r\n\r\n  public sendVote(message: any, optionIds: number[]): Promise<void> {\r\n    const poll: Poll = message.media.poll;\r\n\r\n    const options: Uint8Array[] = optionIds.map(index => {\r\n      return poll.answers[index].option;\r\n    });\r\n    \r\n    const messageId = message.mid;\r\n    const peerId = message.peerId;\r\n    const inputPeer = appPeersManager.getInputPeerById(peerId);\r\n\r\n    if(message.pFlags.is_outgoing) {\r\n      return appMessagesManager.invokeAfterMessageIsSent(messageId, 'sendVote', (message) => {\r\n        this.log('invoke sendVote callback');\r\n        return this.sendVote(message, optionIds);\r\n      });\r\n    }\r\n\r\n    return apiManager.invokeApi('messages.sendVote', {\r\n      peer: inputPeer,\r\n      msg_id: appMessagesIdsManager.getServerMessageId(message.mid),\r\n      options\r\n    }).then(updates => {\r\n      this.log('sendVote updates:', updates);\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n    });\r\n  }\r\n\r\n  public getResults(message: any) {\r\n    const inputPeer = appPeersManager.getInputPeerById(message.peerId);\r\n\r\n    return apiManager.invokeApi('messages.getPollResults', {\r\n      peer: inputPeer,\r\n      msg_id: appMessagesIdsManager.getServerMessageId(message.mid)\r\n    }).then(updates => {\r\n      apiUpdatesManager.processUpdateMessage(updates);\r\n      this.log('getResults updates:', updates);\r\n    });\r\n  }\r\n\r\n  public getVotes(message: any, option?: Uint8Array, offset?: string, limit = 20) {\r\n    return apiManager.invokeApi('messages.getPollVotes', {\r\n      peer: appPeersManager.getInputPeerById(message.peerId),\r\n      id: appMessagesIdsManager.getServerMessageId(message.mid),\r\n      option,\r\n      offset,\r\n      limit\r\n    }).then((votesList) => {\r\n      this.log('getPollVotes messages:', votesList);\r\n\r\n      appUsersManager.saveApiUsers(votesList.users);\r\n\r\n      return votesList;\r\n    });\r\n  }\r\n\r\n  public stopPoll(message: any) {\r\n    const poll: Poll = message.media.poll;\r\n    \r\n    if(poll.pFlags.closed) return Promise.resolve();\r\n\r\n    const newPoll = copy(poll);\r\n    newPoll.pFlags.closed = true;\r\n    return appMessagesManager.editMessage(message, undefined, {\r\n      newMedia: this.getInputMediaPoll(newPoll)\r\n    }).then(() => {\r\n      //console.log('stopped poll');\r\n    }, err => {\r\n      this.log.error('stopPoll error:', err);\r\n    });\r\n  }\r\n}\r\n\r\nconst appPollsManager = new AppPollsManager();\r\nMOUNT_CLASS_TO.appPollsManager = appPollsManager;\r\nexport default appPollsManager;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/evgeny-nadymov/telegram-react\n * Copyright (C) 2018 Evgeny Nadymov\n * https://github.com/evgeny-nadymov/telegram-react/blob/master/LICENSE\n */\n\n/// NOTE: telegram returns sign source, while webrtc uses unsign source internally\n/// unsign => sign\nexport function toTelegramSource(source: number) {\n\treturn source << 0;\n}\n\n/// NOTE: telegram returns sign source, while webrtc uses unsign source internally\n/// sign => unsign\nexport function fromTelegramSource(source: number) {\n\treturn source >>> 0;\n}\n\nexport function getAmplitude(array: Uint8Array, scale = 3) {\n\tif(!array) return 0;\n\n\tconst {length} = array;\n\tlet total = 0;\n\tfor(let i = 0; i < length; ++i) {\n\t\ttotal += array[i] * array[i];\n\t}\n\tconst rms = Math.sqrt(total / length) / 255;\n\n\treturn Math.min(1, rms * scale);\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/evgeny-nadymov/telegram-react\n * Copyright (C) 2018 Evgeny Nadymov\n * https://github.com/evgeny-nadymov/telegram-react/blob/master/LICENSE\n */\n\nimport { indexOfAndSplice } from '../../helpers/array';\nimport { safeAssign } from '../../helpers/object';\nimport { GroupCallParticipantVideoSourceGroup } from '../../layer';\nimport { SDPBuilder, WebRTCLineType, WEBRTC_MEDIA_PORT } from './sdpBuilder';\nimport { AudioCodec, GroupCallConnectionTransport, Ssrc, UpdateGroupCallConnectionData, VideoCodec } from './types';\n\nexport class ConferenceEntry {\n  public source: number;\n  public sourceGroups: GroupCallParticipantVideoSourceGroup[];\n  public transceiver: RTCRtpTransceiver;\n  public originalDirection: RTCRtpTransceiverDirection;\n  public direction: RTCRtpTransceiverDirection;\n  public port: string;\n  public endpoint: string;\n  public peerId: PeerId;\n  \n  public sendEntry: ConferenceEntry;\n  public recvEntry: ConferenceEntry;\n\n  constructor(public mid: string, public type: WebRTCLineType) {\n    this.port = WEBRTC_MEDIA_PORT;\n  }\n\n  public setDirection(direction: RTCRtpTransceiverDirection) {\n    if(!this.originalDirection) {\n      this.originalDirection = direction;\n    }\n\n    return this.direction = direction;\n  }\n\n  public setPort(port: string) {\n    return this.port = port;\n  }\n\n  public setEndpoint(endpoint: string) {\n    return this.endpoint = endpoint;\n  }\n\n  public setPeerId(peerId: PeerId) {\n    return this.peerId = peerId;\n  }\n\n  public createTransceiver(connection: RTCPeerConnection, init?: RTCRtpTransceiverInit) {\n    if(init?.direction) {\n      this.setDirection(init.direction);\n    }\n\n    return this.transceiver = connection.addTransceiver(this.type, init);\n  }\n\n  public setSource(source: number | GroupCallParticipantVideoSourceGroup[]) {\n    let sourceGroups: GroupCallParticipantVideoSourceGroup[];\n    if(Array.isArray(source)) {\n      if(!source[0]) return;\n      sourceGroups = source;\n      source = sourceGroups[0].sources[0];\n    }\n\n    this.sourceGroups = sourceGroups;\n    return this.source = source;\n  }\n\n  public shouldBeSkipped(isAnswer?: boolean) {\n    return isAnswer && this.direction === 'inactive';\n  }\n}\n\nexport function generateSsrc(type: WebRTCLineType, source: number | GroupCallParticipantVideoSourceGroup[], endpoint?: string): Ssrc {\n  let sourceGroups: GroupCallParticipantVideoSourceGroup[];\n  if(Array.isArray(source)) {\n    if(!source[0]) return;\n    sourceGroups = source;\n    source = sourceGroups[0].sources[0];\n  }\n  \n  return {\n    endpoint,\n    type,\n    source,\n    sourceGroups,\n  };\n}\n\nexport default class LocalConferenceDescription implements UpdateGroupCallConnectionData {\n  public readonly sessionId: string;\n  // public ssrcs: Ssrc[];\n  public readonly transport: GroupCallConnectionTransport;\n  public readonly audio?: AudioCodec;\n  public readonly video: VideoCodec;\n  \n  private maxSeenId: number;\n  public readonly entries: ConferenceEntry[];\n  private entriesByMid: Map<ConferenceEntry['mid'], ConferenceEntry>;\n  private entriesBySource: Map<ConferenceEntry['source'], ConferenceEntry>;\n  private entriesByPeerId: Map<ConferenceEntry['peerId'], Set<ConferenceEntry>>;\n  \n  constructor(public connection: RTCPeerConnection) {\n    this.sessionId = '' + Date.now();\n    // this.ssrcs = [];\n    this.maxSeenId = -1;\n    this.entries = [];\n    this.entriesByMid = new Map();\n    this.entriesBySource = new Map();\n    this.entriesByPeerId = new Map();\n  }\n\n  public setData(data: UpdateGroupCallConnectionData) {\n    return safeAssign(this, data);\n  }\n\n  public createEntry(type: WebRTCLineType) {\n    const mid = '' + ++this.maxSeenId;\n    const entry = new ConferenceEntry(mid, type);\n    this.entries.push(entry);\n    this.entriesByMid.set(mid, entry);\n    return entry;\n  }\n\n  public deleteEntry(entry: ConferenceEntry) {\n    indexOfAndSplice(this.entries, entry);\n    this.entriesByMid.delete(entry.mid);\n    this.entriesBySource.delete(entry.source);\n\n    const set = this.entriesByPeerId.get(entry.peerId);\n    if(set) {\n      set.delete(entry);\n      if(!set.size) {\n        this.entriesByPeerId.delete(entry.peerId);\n      }\n    }\n  }\n\n  public setEntrySource(entry: ConferenceEntry, source: Parameters<ConferenceEntry['setSource']>[0]) {\n    entry.setSource(source);\n    this.entriesBySource.set(entry.source, entry);\n  }\n\n  public setEntryPeerId(entry: ConferenceEntry, peerId: ConferenceEntry['peerId']) {\n    entry.setPeerId(peerId);\n    let set = this.entriesByPeerId.get(peerId);\n    if(!set) {\n      this.entriesByPeerId.set(peerId, set = new Set());\n    }\n\n    set.add(entry);\n  }\n  \n  public findEntry(verify: Parameters<LocalConferenceDescription['entries']['find']>[0]) {\n    return this.entries.find(verify);\n  }\n\n  public findFreeSendRecvEntry(type: WebRTCLineType, isSending: boolean) {\n    let entry = this.entries.find(entry => {\n      return entry.direction === 'sendrecv' && entry.type === type && !(isSending ? entry.sendEntry : entry.recvEntry);\n    });\n\n    if(!entry) {\n      entry = this.createEntry(type);\n      entry.setDirection('sendrecv');\n    }\n\n    return entry;\n  }\n  \n  public getEntryByMid(mid: ConferenceEntry['mid']) {\n    return this.entriesByMid.get(mid);\n  }\n\n  public getEntryBySource(source: ConferenceEntry['source']) {\n    return this.entriesBySource.get(source);\n  }\n\n  public getEntriesByPeerId(peerId: ConferenceEntry['peerId']) {\n    return this.entriesByPeerId.get(peerId);\n  }\n\n  public generateSdp(options: Omit<Parameters<SDPBuilder['addConference']>[0], 'conference'>) {\n    return SDPBuilder.fromConference({\n      conference: this,\n      ...options\n    });\n  }\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { CancellablePromise, deferredPromise } from \"./cancellablePromise\";\r\nimport { getHeavyAnimationPromise } from \"../hooks/useHeavyAnimationCheck\";\r\nimport { fastRaf } from \"./schedulers\";\r\n\r\ntype HeavyQueue<T> = {\r\n  items: any[], \r\n  process: (...args: any[]) => T,\r\n  context: any,\r\n  promise?: CancellablePromise<ReturnType<HeavyQueue<T>['process']>[]>\r\n};\r\nconst heavyQueue: HeavyQueue<any>[] = [];\r\nlet processingQueue = false;\r\n\r\nexport default function addHeavyTask<T>(queue: HeavyQueue<T>, method: 'push' | 'unshift' = 'push') {\r\n  if(!queue.items.length) {\r\n    return Promise.resolve([]);\r\n  }\r\n  \r\n  queue.promise = deferredPromise<T[]>();\r\n  heavyQueue[method](queue);\r\n  processHeavyQueue();\r\n\r\n  return queue.promise;\r\n}\r\n\r\nfunction processHeavyQueue() {\r\n  if(!processingQueue) {\r\n    const queue = heavyQueue.shift();\r\n    timedChunk(queue).finally(() => {\r\n      processingQueue = false;\r\n      if(heavyQueue.length) {\r\n        processHeavyQueue();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction timedChunk<T>(queue: HeavyQueue<T>) {\r\n  if(!queue.items.length) {\r\n    queue.promise.resolve([]);\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  const todo = queue.items.slice();\r\n  const results: T[] = [];\r\n\r\n  return new Promise<T[]>((resolve, reject) => {\r\n    const f = async() => {\r\n      const start = performance.now();\r\n\r\n      do {\r\n        await getHeavyAnimationPromise();\r\n        const possiblePromise = queue.process.apply(queue.context, todo.shift());\r\n        let realResult: T;\r\n        if(possiblePromise instanceof Promise) {\r\n          try {\r\n            realResult = await possiblePromise;\r\n          } catch(err) {\r\n            reject(err);\r\n            return;\r\n          }\r\n        } else {\r\n          realResult = possiblePromise;\r\n        }\r\n\r\n        results.push(realResult);\r\n      } while(todo.length > 0 && (performance.now() - start) < 6);\r\n\r\n      if(todo.length > 0) {\r\n        fastRaf(f);\r\n        //setTimeout(f, 25);\r\n      } else {\r\n        resolve(results);\r\n      }\r\n    };\r\n\r\n    fastRaf(f);\r\n    //setTimeout(f, 25);\r\n  }).then(queue.promise.resolve, queue.promise.reject);\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type fastBlur from '../vendor/fastBlur';\r\nimport addHeavyTask from './heavyQueue';\r\n\r\nconst RADIUS = 2;\r\nconst ITERATIONS = 2;\r\n\r\nconst isFilterAvailable = 'filter' in (document.createElement('canvas').getContext('2d') || {});\r\nlet requireBlurPromise: Promise<any>;\r\nlet fastBlurFunc: typeof fastBlur;\r\nif(!isFilterAvailable) {\r\n  requireBlurPromise = import('../vendor/fastBlur').then(m => {\r\n    fastBlurFunc = m.default;\r\n  });\r\n} else {\r\n  requireBlurPromise = Promise.resolve();\r\n}\r\n\r\nfunction processBlurNext(img: HTMLImageElement, radius: number, iterations: number) {\r\n  return new Promise<string>((resolve) => {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    \r\n    const ctx = canvas.getContext('2d', {alpha: false});\r\n    if(isFilterAvailable) {\r\n      ctx.filter = `blur(${radius}px)`;\r\n      ctx.drawImage(img, -radius * 2, -radius * 2, canvas.width + radius * 4, canvas.height + radius * 4);\r\n    } else {\r\n      ctx.drawImage(img, 0, 0);\r\n      fastBlurFunc(ctx, 0, 0, canvas.width, canvas.height, radius, iterations);\r\n    }\r\n    \r\n    resolve(canvas.toDataURL());\r\n    /* if(DEBUG) {\r\n      console.log(`[blur] end, radius: ${radius}, iterations: ${iterations}, time: ${performance.now() - perf}`);\r\n    } */\r\n\r\n    /* canvas.toBlob(blob => {\r\n      resolve(URL.createObjectURL(blob));\r\n      \r\n      if(DEBUG) {\r\n        console.log(`[blur] end, radius: ${radius}, iterations: ${iterations}, time: ${performance.now() - perf}`);\r\n      }\r\n    }); */\r\n  });\r\n}\r\n\r\nconst blurPromises: Map<string, Promise<string>> = new Map();\r\nconst CACHE_SIZE = 1000;\r\n\r\nexport default function blur(dataUri: string, radius: number = RADIUS, iterations: number = ITERATIONS) {\r\n  if(!dataUri) {\r\n    console.error('no dataUri for blur', dataUri);\r\n    return Promise.resolve(dataUri);\r\n  }\r\n\r\n  if(blurPromises.size > CACHE_SIZE) {\r\n    blurPromises.clear();\r\n  }\r\n  \r\n  if(blurPromises.has(dataUri)) return blurPromises.get(dataUri);\r\n  const promise = new Promise<string>((resolve) => {\r\n    //return resolve(dataUri);\r\n    requireBlurPromise.then(() => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        if(isFilterAvailable) {\r\n          processBlurNext(img, radius, iterations).then(resolve);\r\n        } else {\r\n          addHeavyTask({\r\n            items: [[img, radius, iterations]],\r\n            context: null,\r\n            process: processBlurNext\r\n          }, 'unshift').then(results => {\r\n            resolve(results[0]);\r\n          });\r\n        }\r\n      };\r\n      img.src = dataUri;\r\n\r\n      /* addHeavyTask({\r\n        items: [[dataUri, radius, iterations]],\r\n        context: null,\r\n        process: processBlur\r\n      }, 'unshift').then(results => {\r\n        resolve(results[0]);\r\n      }); */\r\n    });\r\n  });\r\n\r\n  blurPromises.set(dataUri, promise);\r\n\r\n  return promise;\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { RefreshReferenceTask, RefreshReferenceTaskResponse } from \"./apiFileManager\";\nimport appMessagesManager from \"../appManagers/appMessagesManager\";\nimport appStickersManager from \"../appManagers/appStickersManager\";\nimport { Photo } from \"../../layer\";\nimport { bytesToHex } from \"../../helpers/bytes\";\nimport { deepEqual } from \"../../helpers/object\";\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\nimport apiManager from \"./mtprotoworker\";\nimport assumeType from \"../../helpers/assumeType\";\nimport { logger } from \"../logger\";\n\nexport type ReferenceContext = ReferenceContext.referenceContextProfilePhoto | ReferenceContext.referenceContextMessage | ReferenceContext.referenceContextEmojiesSounds | ReferenceContext.referenceContextReactions;\nexport namespace ReferenceContext {\n  export type referenceContextProfilePhoto = {\n    type: 'profilePhoto',\n    peerId: PeerId\n  };\n\n  export type referenceContextMessage = {\n    type: 'message',\n    peerId: PeerId,\n    messageId: number\n  };\n\n  export type referenceContextEmojiesSounds = {\n    type: 'emojiesSounds'\n  };\n\n  export type referenceContextReactions = {\n    type: 'reactions'\n  };\n}\n\nexport type ReferenceBytes = Photo.photo['file_reference'];\nexport type ReferenceContexts = Set<ReferenceContext>;\n\n//type ReferenceBytes = Uint8Array;\n\nclass ReferenceDatabase {\n  private contexts: Map<ReferenceBytes, ReferenceContexts> = new Map();\n  //private references: Map<ReferenceBytes, number[]> = new Map();\n  private links: {[hex: string]: ReferenceBytes} = {};\n  private log = logger('RD', undefined, true);\n  private refreshEmojiesSoundsPromise: Promise<any>;\n\n  constructor() {\n    apiManager.addTaskListener('refreshReference', (task: RefreshReferenceTask) => {\n      const originalPayload = task.payload;\n\n      assumeType<RefreshReferenceTaskResponse>(task);\n      task.originalPayload = originalPayload;\n\n      this.refreshReference(originalPayload).then((bytes) => {\n        task.payload = bytes;\n      }, (err) => {\n        task.error = err;\n      }).then(() => apiManager.postMessage(task));\n    });\n  }\n\n  public saveContext(reference: ReferenceBytes, context: ReferenceContext, contexts?: ReferenceContexts) {\n    [contexts, reference] = this.getContexts(reference);\n    if(!contexts) {\n      contexts = new Set();\n      this.contexts.set(reference, contexts);\n    }\n    \n    this.links[bytesToHex(reference)] = reference;\n    for(const _context of contexts) {\n      if(deepEqual(_context, context)) {\n        return;\n      }\n    }\n\n    contexts.add(context);\n  }\n\n  public getReferenceByLink(reference: ReferenceBytes) {\n    return this.links[bytesToHex(reference)];\n  }\n\n  public getContexts(reference: ReferenceBytes): [ReferenceContexts, ReferenceBytes] {\n    const contexts = this.contexts.get(reference) || (reference = this.getReferenceByLink(reference) || reference, this.contexts.get(reference));\n    return [contexts, reference];\n  }\n\n  public getContext(reference: ReferenceBytes): [ReferenceContext, ReferenceBytes] {\n    const contexts = this.getContexts(reference);\n    return contexts[0] ? [contexts[0].values().next().value, contexts[1]] : undefined;\n  }\n\n  public deleteContext(reference: ReferenceBytes, context: ReferenceContext, contexts?: ReferenceContexts) {\n    [contexts, reference] = this.getContexts(reference);\n    if(contexts) {\n      for(const _context of contexts) {\n        if(deepEqual(_context, context)) {\n          contexts.delete(_context);\n          if(!contexts.size) {\n            this.contexts.delete(reference);\n            delete this.links[bytesToHex(reference)];\n          }\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public refreshReference(reference: ReferenceBytes, context?: ReferenceContext): Promise<Uint8Array | number[]> {\n    this.log('refreshReference: start', reference.slice(), context);\n    if(!context) {\n      const c = this.getContext(reference);\n      if(!c) {\n        this.log('refreshReference: got no context for reference:', reference.slice());\n        return Promise.reject('NO_CONTEXT');\n      }\n\n      [context, reference] = c;\n    }\n\n    let promise: Promise<any>;\n    switch(context?.type) {\n      case 'message': {\n        promise = appMessagesManager.wrapSingleMessage(context.peerId, context.messageId, true);\n        break; \n        // .then(() => {\n        //   console.log('FILE_REFERENCE_EXPIRED: got message', context, appMessagesManager.getMessage((context as ReferenceContext.referenceContextMessage).messageId).media, reference);\n        // });\n      }\n\n      case 'emojiesSounds': {\n        promise = this.refreshEmojiesSoundsPromise || appStickersManager.getAnimatedEmojiSounds(true).then(() => {\n          this.refreshEmojiesSoundsPromise = undefined;\n        });\n        break;\n      }\n\n      default: {\n        this.log.warn('refreshReference: not implemented context', context);\n        return Promise.reject();\n      }\n    }\n\n    const hex = bytesToHex(reference);\n    this.log('refreshReference: refreshing reference:', hex);\n    return promise.then(() => {\n      const newHex = bytesToHex(reference);\n      this.log('refreshReference: refreshed, reference before:', hex, 'after:', newHex);\n      if(hex !== newHex) {\n        return reference;\n      }\n\n      this.deleteContext(reference, context);\n\n      const newContext = this.getContext(reference);\n      if(newContext) {\n        return this.refreshReference(reference, newContext[0]);\n      }\n\n      this.log.error('refreshReference: no new context, reference before:', hex, 'after:', newHex, context);\n\n      throw 'NO_NEW_CONTEXT';\n    });\n  }\n\n  /* public replaceReference(oldReference: ReferenceBytes, newReference: ReferenceBytes) {\n    const contexts = this.contexts.get(oldReference);\n    if(contexts) {\n      this.contexts.delete(oldReference);\n      this.contexts.set(newReference, contexts);\n    }\n  } */\n}\n\nconst referenceDatabase = new ReferenceDatabase();\nMOUNT_CLASS_TO.referenceDatabase = referenceDatabase;\nexport default referenceDatabase;","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport default function htmlToDocumentFragment(html: string) {\r\n  var template = document.createElement('template');\r\n  html = html.trim(); // Never return a text node of whitespace as the result\r\n  template.innerHTML = html;\r\n  return template.content;\r\n}\r\n","export default async function getStream(constraints: MediaStreamConstraints, muted: boolean) {\n  // console.log('getStream', constraints);\n  \n\tconst stream = await navigator.mediaDevices.getUserMedia(constraints);\n\tstream.getTracks().forEach(x => {\n\t\t/* x.onmute = x => {\n\t\t\tconsole.log('track.onmute', x);\n\t\t};\n\t\tx.onunmute = x => {\n\t\t\tconsole.log('track.onunmute', x);\n\t\t}; */\n\n\t\tx.enabled = !muted;\n\t});\n\n\t// console.log('getStream result', stream);\n\treturn stream;\n}\n\n(window as any).getStream = getStream;\n","export default function getVideoConstraints(): MediaTrackConstraints {\n  return {\n    width: {min: 1280, max: 1920/* , ideal: 1920 */},\n    height: {min: 720, max: 1080/* , ideal: 1080 */},\n    frameRate: {min: 24, max: 30}\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/evgeny-nadymov/telegram-react\n * Copyright (C) 2018 Evgeny Nadymov\n * https://github.com/evgeny-nadymov/telegram-react/blob/master/LICENSE\n */\n\nimport { logger } from '../logger';\nimport rootScope from '../rootScope';\nimport { GROUP_CALL_AMPLITUDE_ANALYSE_COUNT_MAX } from './constants';\nimport stopTrack from './helpers/stopTrack';\nimport LocalConferenceDescription from './localConferenceDescription';\nimport { getAmplitude, toTelegramSource } from './utils';\n\nexport type StreamItemBase = {\n  type: 'input' | 'output',\n  track: MediaStreamTrack,\n  source: string,\n  stream: MediaStream\n};\n\nexport type StreamItem = StreamAudioItem | StreamVideoItem;\n\nexport type StreamAudioItem = StreamItemBase & {kind: 'audio', streamAnalyser: AudioStreamAnalyser};\nexport type StreamVideoItem = StreamItemBase & {kind: 'video'};\n\nexport type StreamAmplitude = {\n  type: \"input\" | \"output\";\n  source: string;\n  stream: MediaStream;\n  track: MediaStreamTrack;\n  value: number;\n};\n\nclass AudioStreamAnalyser {\n  public analyser: AnalyserNode;\n  public gain: GainNode;\n  public streamSource: MediaStreamAudioSourceNode;\n\n  constructor(context: AudioContext, stream: MediaStream) {\n    const streamSource = this.streamSource = context.createMediaStreamSource(stream);\n    const analyser = this.analyser = context.createAnalyser();\n    const gain = this.gain = context.createGain();\n    // const streamDestination = context.createMediaStreamDestination();\n    \n    analyser.minDecibels = -100;\n    analyser.maxDecibels = -30;\n    analyser.smoothingTimeConstant = 0.05;\n    analyser.fftSize = 1024;\n    \n    // connect Web Audio API\n    streamSource.connect(analyser);\n    // analyser.connect(context.destination);\n  }\n}\n\nexport default class StreamManager {\n  private context: AudioContext;\n  public outputStream: MediaStream;\n  public inputStream: MediaStream;\n\n  private timer: number;\n  private counter: number;\n\n  private items: StreamItem[];\n\n  private log: ReturnType<typeof logger>;\n\n  public direction: RTCRtpTransceiver['direction'];\n  public canCreateConferenceEntry: boolean;\n  public lol: boolean;\n  \n  constructor(private interval?: number) {\n    this.context = new (window.AudioContext || (window as any).webkitAudioContext)();\n    this.items = [];\n    this.outputStream = new MediaStream();\n    this.inputStream = new MediaStream();\n    this.counter = 0;\n    this.log = logger('SM');\n    this.direction = 'sendonly';\n    this.canCreateConferenceEntry = true;\n    // this.lol = true;\n  }\n\n  public addStream(stream: MediaStream, type: StreamItem['type']) {\n    stream.getTracks().forEach(track => {\n      this.addTrack(stream, track, type);\n    });\n  }\n\n  public addTrack(stream: MediaStream, track: MediaStreamTrack, type: StreamItem['type']) {\n    this.log('addTrack', type, track, stream);\n\n    const {context, items, inputStream, outputStream} = this;\n    const kind: StreamItem['kind'] = track.kind as any;\n    const source = StreamManager.getSource(stream, type);\n    \n    // this.removeTrack(track);\n    switch(type) {\n      case 'input': {\n        if(!inputStream) {\n          this.inputStream = stream;\n        } else {\n          inputStream.addTrack(track);\n        }\n\n        break;\n      }\n\n      case 'output': {\n        for(let i = 0; i < items.length; ++i) {\n          const {track: t, type, source: itemSource} = items[i];\n          if(itemSource === source && type === 'input') {\n            items.splice(i, 1);\n            outputStream.removeTrack(t);\n            break;\n          }\n        }\n        \n        if(kind !== 'video') {\n          outputStream.addTrack(track);\n        }\n        \n        break;\n      }\n    }\n\n    this.finalizeAddingTrack({\n      type,\n      source,\n      stream,\n      track,\n      kind,\n      streamAnalyser: kind === 'audio' ? new AudioStreamAnalyser(context, stream) : undefined\n    });\n\n    if(kind === 'audio' && this.interval) {\n      this.changeTimer();\n    }\n  }\n\n  private finalizeAddingTrack(item: StreamItem) {\n    const {track} = item;\n    track.addEventListener('ended', () => {\n      this.removeTrack(track);\n    }, {once: true});\n\n    this.items.push(item);\n  }\n\n  public hasInputTrackKind(kind: StreamItem['kind']) {\n    return this.items.find(item => item.type === 'input' && item.kind === kind);\n  }\n\n  public static getSource(stream: MediaStream, type: StreamItem['type']) {\n    return type === 'input' ? (stream.source || stream.id) : '' + toTelegramSource(+stream.id.substring(6));\n  }\n  \n  public removeTrack(track: MediaStreamTrack) {\n    this.log('removeTrack', track);\n\n    const {items} = this;\n    \n    let handled = false;\n    for(let i = 0, length = items.length; !handled && i < length; ++i) {\n      const {track: t, type} = items[i];\n      switch(type) {\n        case 'output': {\n          if(t === track) {\n            items.splice(i, 1);\n            this.outputStream.removeTrack(track);\n            handled = true;\n          }\n\n          break;\n        }\n\n        case 'input': {\n          if(t === track) {\n            items.splice(i, 1);\n            this.inputStream.removeTrack(track);\n            handled = true;\n          }\n\n          break;\n        }\n      }\n    }\n    \n    if(track.kind === 'audio' && this.interval) {\n      this.changeTimer();\n    }\n  }\n  \n  public replaceInputAudio(stream: MediaStream, oldTrack: MediaStreamTrack) {\n    this.removeTrack(oldTrack);\n    this.addStream(stream, 'input');\n  }\n  \n  private changeTimer() {\n    if(this.timer !== undefined) {\n      clearInterval(this.timer);\n    }\n    \n    if(this.items.length) {\n      this.timer = window.setInterval(this.analyse, this.interval);\n    }\n  }\n  \n  public getAmplitude = (item: StreamAudioItem): StreamAmplitude => {\n    const {streamAnalyser, stream, track, source, type} = item;\n    const analyser = streamAnalyser.analyser;\n    if(!analyser) return;\n    \n    const array = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(array);\n    const value = getAmplitude(array);\n    \n    return {\n      type,\n      source,\n      stream,\n      track,\n      value\n    };\n  };\n  \n  public analyse = () => {\n    const all = this.counter % 3 === 0;\n    const filteredItems = all ? this.items : this.items.filter(x => x.type === 'input');\n    const audioItems = filteredItems.filter(x => x.kind === 'audio') as StreamAudioItem[];\n    const amplitudes = audioItems.slice(0, GROUP_CALL_AMPLITUDE_ANALYSE_COUNT_MAX).map(this.getAmplitude);\n    if(++this.counter >= 1000) {\n      this.counter = 0;\n    }\n    \n    rootScope.dispatchEvent('group_call_amplitude', {\n      amplitudes,\n      type: all ? 'all' : 'input'\n    });\n  };\n\n  /* public appendToConnection(connection: RTCPeerConnection) {\n    if(this.inputStream) {\n      this.inputStream.getTracks().forEach(track => {\n        connection.log('addTrack', track);\n        connection.addTrack(track, this.inputStream);\n\n        if(track.kind === 'video') {\n          track.enabled = true;\n        }\n      });\n    }\n  } */\n\n  public appendToConference(conference: LocalConferenceDescription) {\n    if(this.lol) {\n      return;\n    }\n    // return;\n    const {inputStream, direction, canCreateConferenceEntry} = this;\n    // const direction: RTCRtpTransceiverInit['direction'] = 'sendrecv';\n    // const direction: RTCRtpTransceiverInit['direction'] = 'sendonly';\n    const transceiverInit: RTCRtpTransceiverInit = {direction, streams: [inputStream]};\n    const transceiverAudioInit: RTCRtpTransceiverInit = {...transceiverInit};\n    const transceiverVideoInit: RTCRtpTransceiverInit = {...transceiverInit};\n\n    // if(this.isScreenSharingManager) {\n    //   transceiverVideoInit.sendEncodings = [{}];\n    // } else {\n    //   transceiverVideoInit.sendEncodings = [{maxBitrate: 2500000}];\n    // }\n\n    const types: ['audio' | 'video', RTCRtpTransceiverInit][] = [\n      ['audio' as const, transceiverAudioInit], \n      ['video' as const, transceiverVideoInit]\n    ];\n\n    const tracks = inputStream.getTracks();\n    // const transceivers = conference.connection.getTransceivers();\n    for(const [type, transceiverInit] of types) {\n      let entry = conference.findEntry(entry => entry.direction === direction && entry.type === type);\n      if(!entry) {\n        if(!canCreateConferenceEntry) {\n          continue;\n        }\n\n        entry = conference.createEntry(type);\n      }\n      /* const entry = conference.findFreeSendRecvEntry(type, true);\n      if(!entry.transceiver) {\n        entry.transceiver = transceivers.find(transceiver => transceiver.mid === entry.mid);\n      } */\n\n      let {transceiver} = entry;\n      if(!transceiver) {\n        transceiver = entry.createTransceiver(conference.connection, transceiverInit);\n\n        /* if(this.isScreenSharingManager) {\n          transceiver.sender.setParameters({\n            ...transceiver.sender.getParameters(),\n            degradationPreference: 'maintain-resolution'\n          });\n        } */\n      }\n\n      if(entry.direction !== transceiver.direction) {\n        transceiver.direction = entry.direction;\n      }\n\n      const track = tracks.find(track => track.kind === type);\n      const sender = transceiver.sender;\n      if(sender.track === track) {\n        continue;\n      }\n\n      // try { // ! don't use await here. it will wait for adding track and fake one won't be visible in startNegotiation.\n        /* await  */sender.replaceTrack(track).catch(err => {\n          this.log.error(err);\n        });\n      // } catch(err) {\n\n      // }\n    }\n  }\n\n  public stop() {\n    try {\n      const tracks = this.inputStream.getTracks().concat(this.outputStream.getTracks());\n      tracks.forEach(track => {\n        stopTrack(track);\n      });\n    } catch(e) {\n      this.log.error(e);\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport {Awaited} from '../types';\n\nexport default function callbackify<T extends Awaited<any>, R>(\n  smth: T, \n  callback: (result: Awaited<T>) => R\n): PromiseLike<R> | R {\n  if(smth instanceof Promise) {\n    return smth.then(callback);\n  } else {\n    return callback(smth as any);\n  }\n}\n","const IS_VIBRATE_SUPPORTED = !!navigator?.vibrate;\n\nexport default IS_VIBRATE_SUPPORTED;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport { IS_SAFARI } from \"../environment/userAgent\";\r\nimport { logger, LogTypes } from \"./logger\";\r\n\r\ntype Result = {\r\n  bytes: Uint8Array, \r\n  waveform?: Uint8Array\r\n};\r\n\r\ntype Task = {\r\n  pages: Uint8Array,\r\n  withWaveform: boolean,\r\n  waveform?: Uint8Array,\r\n  callback: {resolve: (result: Result) => void, reject: (err: any) => void},\r\n  timeout: number\r\n};\r\n\r\nexport class OpusDecodeController {\r\n  private worker: Worker;\r\n  private wavWorker : Worker;\r\n  private sampleRate = 48000;\r\n  private tasks: Array<Task> = [];\r\n  private keepAlive = false;\r\n  private isPlaySupportedResult: boolean;\r\n  private log = logger('OPUS', LogTypes.Error);\r\n\r\n  public isPlaySupported() {\r\n    if(this.isPlaySupportedResult !== undefined) return this.isPlaySupportedResult;\r\n\r\n    const audio = document.createElement('audio');\r\n    return this.isPlaySupportedResult = !!(audio.canPlayType && audio.canPlayType('audio/ogg;').replace(/no/, ''))/*  && false */;\r\n  }\r\n\r\n  public loadWavWorker() {\r\n    if(this.wavWorker) return;\r\n\r\n    this.wavWorker = new Worker('waveWorker.min.js');\r\n    this.wavWorker.addEventListener('message', (e) => {\r\n      const data = e.data;\r\n\r\n      this.log('[WAV] got message:', data);\r\n      if(data && data.page) {\r\n        const bytes = data.page;\r\n        this.onTaskEnd(this.tasks.shift(), bytes);\r\n      }\r\n    });\r\n  }\r\n\r\n  public loadWorker() {\r\n    if(this.worker) return;\r\n\r\n    this.worker = new Worker('decoderWorker.min.js');\r\n    this.worker.addEventListener('message', (e) => {\r\n      const data = e.data;\r\n      \r\n      this.log('[DECODER] got message', data);\r\n      if(data.type === 'done') {\r\n        //this.log('[DECODER] send done to wav');\r\n        this.wavWorker.postMessage({command: 'done'});\r\n\r\n        if(data.waveform) {\r\n          this.tasks[0].waveform = data.waveform;\r\n        }\r\n      } else { // e.data contains decoded buffers as float32 values\r\n        //this.log('[DECODER] send encode to wav');\r\n        this.wavWorker.postMessage({\r\n          command: 'encode',\r\n          buffers: e.data\r\n        }, IS_SAFARI ? undefined : data.map((typedArray: Uint8Array) => typedArray.buffer));\r\n      }\r\n    });\r\n  }\r\n\r\n  public setKeepAlive(keepAlive: boolean) {\r\n    this.keepAlive = keepAlive;\r\n    if(this.keepAlive) {\r\n      this.loadWorker();\r\n      this.loadWavWorker();\r\n    } else if(!this.tasks.length) {\r\n      this.terminateWorkers();\r\n    }\r\n  }\r\n\r\n  public onTaskEnd(task: Task, result?: Uint8Array) {\r\n    if(!result) {\r\n      task.callback.reject('timeout');\r\n    } else {\r\n      clearTimeout(task.timeout);\r\n      task.callback.resolve({bytes: result, waveform: task.waveform});\r\n    }\r\n\r\n    if(this.tasks.length) {\r\n      this.executeNewTask(this.tasks[0]);\r\n    }\r\n\r\n    this.terminateWorkers();\r\n  }\r\n\r\n  public terminateWorkers(kill = false) {\r\n    if((this.keepAlive || this.tasks.length) && !kill) return;\r\n\r\n    if(this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n    \r\n    if(this.wavWorker) {\r\n      this.wavWorker.terminate();\r\n      this.wavWorker = null;\r\n    }\r\n  }\r\n\r\n  public executeNewTask(task: Task) {\r\n    this.worker.postMessage({ \r\n      command: 'init',\r\n      decoderSampleRate: this.sampleRate,\r\n      outputBufferSampleRate: this.sampleRate\r\n    });\r\n\r\n    this.wavWorker.postMessage({ \r\n      command: 'init',\r\n      wavBitDepth: 16,\r\n      wavSampleRate: this.sampleRate\r\n    });\r\n\r\n    //console.log('sending command to worker:', task);\r\n    //setTimeout(() => {\r\n      this.log('[DECODER] send decode');\r\n      this.worker.postMessage({\r\n        command: 'decode',\r\n        pages: task.pages,\r\n        waveform: task.withWaveform\r\n      }, IS_SAFARI ? undefined : [task.pages.buffer]);\r\n    //}, 1e3);\r\n\r\n    task.timeout = window.setTimeout(() => {\r\n      this.log.error('decode timeout'/* , task */);\r\n\r\n      this.terminateWorkers(true);\r\n      if(this.tasks.length) {\r\n        this.loadWorker();\r\n        this.loadWavWorker();\r\n      }\r\n\r\n      this.onTaskEnd(this.tasks.shift());\r\n    }, 10e3);\r\n  }\r\n\r\n  public pushDecodeTask(pages: Uint8Array, withWaveform: boolean) {\r\n    return new Promise<Result>((resolve, reject) => {\r\n      const task = {\r\n        pages,\r\n        withWaveform,\r\n        callback: {resolve, reject},\r\n        timeout: 0\r\n      };\r\n\r\n      this.loadWorker();\r\n      this.loadWavWorker();\r\n\r\n      if(this.tasks.push(task) === 1) {\r\n        this.executeNewTask(task);\r\n      }\r\n    });\r\n  }\r\n\r\n  public async decode(typedArray: Uint8Array, withWaveform = false) {\r\n    return this.pushDecodeTask(typedArray, withWaveform).then(result => {\r\n      const dataBlob = new Blob([result.bytes], {type: \"audio/wav\"});\r\n      return {url: URL.createObjectURL(dataBlob), waveform: result.waveform};\r\n    });\r\n  }\r\n}\r\n\r\nconst opusDecodeController = new OpusDecodeController();\r\nMOUNT_CLASS_TO.opusDecodeController = opusDecodeController;\r\nexport default opusDecodeController;","import { IS_APPLE_MOBILE, IS_SAFARI } from \"./userAgent\";\n\nconst IS_WEBM_SUPPORTED = !!document.createElement('video').canPlayType('video/webm') && !IS_SAFARI && !IS_APPLE_MOBILE;\n\n(window as any).IS_WEBM_SUPPORTED = IS_WEBM_SUPPORTED;\nexport default IS_WEBM_SUPPORTED;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport appPhotosManager from \"./appPhotosManager\";\r\nimport appDocsManager from \"./appDocsManager\";\r\nimport { RichTextProcessor } from \"../richtextprocessor\";\r\nimport { ReferenceContext } from \"../mtproto/referenceDatabase\";\r\nimport rootScope from \"../rootScope\";\r\nimport { safeReplaceObject } from \"../../helpers/object\";\r\nimport { limitSymbols } from \"../../helpers/string\";\r\nimport { WebPage } from \"../../layer\";\r\nimport { MOUNT_CLASS_TO } from \"../../config/debug\";\r\n\r\nconst photoTypeSet = new Set(['photo', 'video', 'gif', 'document']);\r\n\r\ntype WebPageMessageKey = `${PeerId}_${number}`;\r\n\r\nexport class AppWebPagesManager {\r\n  private webpages: {\r\n    [webPageId: string]: WebPage\r\n  } = {};\r\n  private pendingWebPages: {\r\n    [webPageId: string]: Set<WebPageMessageKey>\r\n  } = {};\r\n  \r\n  constructor() {\r\n    rootScope.addMultipleEventsListeners({\r\n      updateWebPage: (update) => {\r\n        this.saveWebPage(update.webpage);\r\n      }\r\n    });\r\n  }\r\n  \r\n  public saveWebPage(apiWebPage: WebPage, messageKey?: WebPageMessageKey, mediaContext?: ReferenceContext) {\r\n    if(apiWebPage._ === 'webPageNotModified') return;\r\n    const {id} = apiWebPage;\r\n\r\n    const oldWebPage = this.webpages[id];\r\n    const isUpdated = oldWebPage && \r\n      oldWebPage._ === apiWebPage._ && \r\n      (oldWebPage as WebPage.webPage).hash === (oldWebPage as WebPage.webPage).hash;\r\n\r\n    if(apiWebPage._ === 'webPage') {\r\n      if(apiWebPage.photo?._ === 'photo') {\r\n        apiWebPage.photo = appPhotosManager.savePhoto(apiWebPage.photo, mediaContext);\r\n      } else {\r\n        delete apiWebPage.photo;\r\n      }\r\n  \r\n      if(apiWebPage.document?._ === 'document') {\r\n        apiWebPage.document = appDocsManager.saveDoc(apiWebPage.document, mediaContext);\r\n      } else {\r\n        if(apiWebPage.type === 'document') {\r\n          delete apiWebPage.type;\r\n        }\r\n  \r\n        delete apiWebPage.document;\r\n      }\r\n\r\n      const siteName = apiWebPage.site_name;\r\n      let shortTitle = apiWebPage.title || apiWebPage.author || siteName || '';\r\n      if(siteName && shortTitle === siteName) {\r\n        delete apiWebPage.site_name;\r\n      }\r\n\r\n      shortTitle = limitSymbols(shortTitle, 80, 100);\r\n\r\n      apiWebPage.rTitle = RichTextProcessor.wrapRichText(shortTitle, {noLinks: true, noLinebreaks: true});\r\n      let contextHashtag = '';\r\n      if(siteName === 'GitHub') {\r\n        const matches = apiWebPage.url.match(/(https?:\\/\\/github\\.com\\/[^\\/]+\\/[^\\/]+)/);\r\n        if(matches) {\r\n          contextHashtag = matches[0] + '/issues/{1}';\r\n        }\r\n      }\r\n\r\n      // delete apiWebPage.description\r\n      const shortDescriptionText = limitSymbols(apiWebPage.description || '', 150, 180);\r\n      apiWebPage.rDescription = RichTextProcessor.wrapRichText(shortDescriptionText, {\r\n        contextSite: siteName || 'external',\r\n        contextHashtag: contextHashtag\r\n      });\r\n\r\n      if(!photoTypeSet.has(apiWebPage.type) &&\r\n        !apiWebPage.description &&\r\n        apiWebPage.photo) {\r\n        apiWebPage.type = 'photo';\r\n      }\r\n    }\r\n    \r\n    let pendingSet = this.pendingWebPages[id];\r\n    if(messageKey) {\r\n      if(!pendingSet) pendingSet = this.pendingWebPages[id] = new Set();\r\n      pendingSet.add(messageKey);\r\n    }\r\n    \r\n    if(oldWebPage === undefined) {\r\n      this.webpages[id] = apiWebPage;\r\n    } else {\r\n      safeReplaceObject(oldWebPage, apiWebPage);\r\n    }\r\n    \r\n    if(!messageKey && pendingSet !== undefined && isUpdated) {\r\n      const msgs: {peerId: PeerId, mid: number, isScheduled: boolean}[] = [];\r\n      pendingSet.forEach((value) => {\r\n        const [peerId, mid, isScheduled] = value.split('_');\r\n        msgs.push({\r\n          peerId: peerId.toPeerId(), \r\n          mid: +mid, \r\n          isScheduled: !!isScheduled\r\n        });\r\n      });\r\n\r\n      rootScope.dispatchEvent('webpage_updated', {\r\n        id,\r\n        msgs\r\n      });\r\n    }\r\n\r\n    return apiWebPage;\r\n  }\r\n\r\n  public getMessageKeyForPendingWebPage(peerId: PeerId, mid: number, isScheduled?: boolean): WebPageMessageKey {\r\n    return peerId + '_' + mid + (isScheduled ? '_s' : '') as any;\r\n  }\r\n\r\n  public deleteWebPageFromPending(webPage: WebPage, messageKey: WebPageMessageKey) {\r\n    const id = (webPage as WebPage.webPage).id;\r\n    if(!id) return;\r\n\r\n    const set = this.pendingWebPages[id];\r\n    if(set && set.has(messageKey)) {\r\n      set.delete(messageKey);\r\n\r\n      if(!set.size) {\r\n        delete this.pendingWebPages[id];\r\n      }\r\n    }\r\n  }\r\n\r\n  public getWebPage(id: WebPage.webPage['id']) {\r\n    return this.webpages[id];\r\n  }\r\n}\r\n\r\nconst appWebPagesManager = new AppWebPagesManager();\r\nMOUNT_CLASS_TO && (MOUNT_CLASS_TO.appWebPagesManager = appWebPagesManager);\r\nexport default appWebPagesManager;\r\n","import IS_WEBP_SUPPORTED from \"./webpSupport\";\n\nconst IMAGE_MIME_TYPES_SUPPORTED = new Set([\n  'image/jpeg',\n  'image/png',\n  'image/bmp'\n]);\n\nif(IS_WEBP_SUPPORTED) {\n  IMAGE_MIME_TYPES_SUPPORTED.add('image/webp');\n}\n\nexport default IMAGE_MIME_TYPES_SUPPORTED;\n","export const GROUP_CALL_AMPLITUDE_ANALYSE_COUNT_MAX = 50;\nexport const GROUP_CALL_AMPLITUDE_ANALYSE_INTERVAL_MS = 100;\nexport const GROUP_CALL_PARTICIPANTS_LOAD_LIMIT = 100;\n","import simulateEvent from \"../../../helpers/dom/dispatchEvent\";\n\nexport default function stopTrack(track: MediaStreamTrack) {\n  track.stop();\n  simulateEvent(track, 'ended');\n}\n","export default async function getScreenStream(constraints: DisplayMediaStreamConstraints) {\n  const screenStream = await navigator.mediaDevices.getDisplayMedia(constraints);\n  const track = screenStream.getVideoTracks()[0];\n  track.contentHint = 'text';\n  return screenStream;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport getScreenStream from \"./getScreenStream\";\nimport getStream from \"./getStream\";\n\n/**\n * ! Use multiple constraints together only with first invoke\n */\nexport default function getStreamCached() {\n  const _cache: {\n    main: Partial<{\n      audio: Promise<MediaStream>,\n      video: Promise<MediaStream>\n    }>,\n    screen: Partial<{\n      audio: Promise<MediaStream>,\n      video: Promise<MediaStream>\n    }>\n  } = {\n    main: {},\n    screen: {}\n  };\n\n  return async(options: {\n    isScreen: true, \n    constraints: DisplayMediaStreamConstraints,\n  } | {\n    isScreen?: false,\n    constraints: MediaStreamConstraints, \n    muted: boolean\n  }) => {\n    const {isScreen, constraints} = options;\n    const cache = _cache[isScreen ? 'screen' : 'main'];\n    let promise: Promise<MediaStream> = cache[constraints.audio ? 'audio' : 'video'];\n\n    if(!promise) {\n      promise = (isScreen ? getScreenStream : getStream)(constraints, (options as any).muted);\n      if(constraints.audio && !cache.audio) cache.audio = promise.finally(() => cache.audio = undefined);\n      if(constraints.video && !cache.video) cache.video = promise.finally(() => cache.video = undefined);\n    }\n\n    try {\n      return await promise;\n      /* let out: Partial<{\n        audio: MediaStream,\n        video: MediaStream\n      }> = {};\n\n      await Promise.all([\n        constraints.audio && cache.audio.then(stream => out.audio = stream),\n        constraints.video && cache.video.then(stream => out.video = stream)\n      ].filter(Boolean));\n\n      return out; */\n    } catch(err) {\n      throw err;\n    }\n  };\n}\n\n(window as any).getStreamCached = getStreamCached;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport EventListenerBase, { EventListenerListeners } from \"../../helpers/eventListenerBase\";\nimport noop from \"../../helpers/noop\";\nimport { logger } from \"../logger\";\nimport getAudioConstraints from \"./helpers/getAudioConstraints\";\nimport getStreamCached from \"./helpers/getStreamCached\";\nimport getVideoConstraints from \"./helpers/getVideoConstraints\";\nimport LocalConferenceDescription from \"./localConferenceDescription\";\nimport StreamManager, { StreamItem } from \"./streamManager\";\n\nexport type TryAddTrackOptions = {\n  stream: MediaStream, \n  track: MediaStreamTrack, \n  type: StreamItem['type'], \n  source?: string\n};\n\nexport default abstract class CallInstanceBase<E extends EventListenerListeners> extends EventListenerBase<E> {\n  protected log: ReturnType<typeof logger>;\n  protected outputDeviceId: string;\n\n  protected player: HTMLElement;\n  protected elements: Map<string, HTMLMediaElement>;\n\n  protected audio: HTMLAudioElement;\n  // protected fixedSafariAudio: boolean;\n\n  protected getStream: ReturnType<typeof getStreamCached>;\n\n  constructor() {\n    super(false);\n\n    const player = this.player = document.createElement('div');\n    player.classList.add('call-player');\n    player.style.display = 'none';\n    document.body.append(player);\n\n    this.elements = new Map();\n\n    // possible Safari fix\n    const audio = this.audio = new Audio();\n    audio.autoplay = true;\n    audio.volume = 1.0;\n    this.player.append(audio);\n    this.elements.set('audio', audio);\n\n    this.fixSafariAudio();\n\n    this.getStream = getStreamCached();\n  }\n\n  public get isSharingAudio() {\n    return !!this.streamManager.hasInputTrackKind('audio');\n  }\n\n  public get isSharingVideo() {\n    return !!this.streamManager.hasInputTrackKind('video');\n  }\n\n  public abstract get isMuted(): boolean;\n  public abstract get isClosing(): boolean;\n\n  public fixSafariAudio() {\n    // if(this.fixedSafariAudio) return;\n    this.audio.play().catch(noop);\n    // this.fixedSafariAudio = true;\n  }\n\n  public requestAudioSource(muted: boolean) {\n    return this.requestInputSource(true, false, muted);\n  }\n\n  public requestInputSource(audio: boolean, video: boolean, muted: boolean) {\n    const {streamManager} = this;\n    if(streamManager) {\n      const isAudioGood = !audio || this.isSharingAudio;\n      const isVideoGood = !video || this.isSharingVideo;\n      if(isAudioGood && isVideoGood) {\n        return Promise.resolve();\n      }\n    }\n\n    const constraints: MediaStreamConstraints = {\n      audio: audio && getAudioConstraints(),\n      video: video && getVideoConstraints()\n    };\n    \n    return this.getStream({\n      constraints, \n      muted\n    }).then(stream => {\n      if(stream.getVideoTracks().length) {\n        this.saveInputVideoStream(stream, 'main');\n      }\n      \n      this.onInputStream(stream);\n    });\n  }\n\n  public getElement(endpoint: number | string) {\n    return this.elements.get('' + endpoint);\n  }\n\n  public abstract get streamManager(): StreamManager;\n  public abstract get description(): LocalConferenceDescription;\n  public abstract toggleMuted(): Promise<void>;\n\n  public cleanup() {\n    this.player.textContent = '';\n    this.player.remove();\n    this.elements.clear();\n\n    // can have no connectionInstance but streamManager with input stream\n    this.streamManager.stop();\n\n    super.cleanup();\n  }\n\n  public onTrack(event: RTCTrackEvent) {\n    this.tryAddTrack({\n      stream: event.streams[0], \n      track: event.track, \n      type: 'output'\n    });\n  }\n\n  public saveInputVideoStream(stream: MediaStream, type?: string) {\n    const track = stream.getVideoTracks()[0];\n    this.tryAddTrack({\n      stream, \n      track, \n      type: 'input', \n      source: type || 'main'\n    });\n  }\n  \n  public tryAddTrack({stream, track, type, source}: TryAddTrackOptions) {\n    if(!source) {\n      source = StreamManager.getSource(stream, type);\n    }\n\n    this.log('tryAddTrack', stream, track, type, source);\n\n    const isOutput = type === 'output';\n\n    const {player, elements, streamManager} = this;\n    \n    const tagName = track.kind as StreamItem['kind'];\n    const isVideo = tagName === 'video';\n\n    const elementEndpoint = isVideo ? source : tagName;\n    let element = elements.get(elementEndpoint);\n\n    if(isVideo) {\n      track.addEventListener('ended', () => {\n        this.log('[track] onended');\n        elements.delete(elementEndpoint);\n        // element.remove();\n      }, {once: true});\n    }\n    \n    if(isOutput) {\n      streamManager.addTrack(stream, track, type);\n    }\n\n    const useStream = isVideo ? stream : streamManager.outputStream;\n    if(!element) {\n      element = document.createElement(tagName);\n      element.autoplay = true;\n      element.srcObject = useStream;\n      element.volume = 1.0;\n\n      if((element as any).sinkId !== 'undefined') {\n        const {outputDeviceId} = this;\n        if(outputDeviceId) {\n          (element as any).setSinkId(outputDeviceId);\n        }\n      }\n      \n      if(!isVideo) {\n        player.appendChild(element);\n      }\n      // audio.play();\n\n      elements.set(elementEndpoint, element);\n    } else {\n      if(element.paused) {\n        element.play().catch(noop);\n      }\n\n      // ! EVEN IF MEDIASTREAM IS THE SAME NEW TRACK WON'T PLAY WITHOUT REPLACING IT WHEN NEW PARTICIPANT IS ENTERING !\n      // if(element.srcObject !== useStream) {\n        element.srcObject = useStream;\n      // }\n    }\n\n    return source;\n  }\n\n  public setMuted(muted?: boolean) {\n    this.streamManager.inputStream.getAudioTracks().forEach((track) => {\n      if(track?.kind === 'audio') {\n        track.enabled = muted === undefined ? !track.enabled : !muted;\n      }\n    });\n  }\n\n  protected onInputStream(stream: MediaStream): void {\n    if(!this.isClosing) {\n      const {streamManager, description} = this;\n      streamManager.addStream(stream, 'input');\n      \n      if(description) {\n        streamManager.appendToConference(description);\n      }\n    }\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport SDPMediaSection from \"./mediaSection\";\nimport SDPSessionSection from \"./sessionSection\";\n\nexport type AttributeKey = 'group' | 'rtcp' | 'ice-ufrag' | \n  'ice-pwd' | 'ice-options' | 'fingerprint' | 'setup' | \n  'mid' | 'extmap' | 'sendonly' | 'msid' | 'rtcp-mux' | \n  'rtpmap' | 'rtcp-fb' | 'fmtp' | 'ssrc' | 'ssrc-group' |\n  'extmap-allow-mixed' | 'msid-semantic';\n\nexport type AttributeMap = {[k in AttributeKey]?: boolean};\n\nexport default class SDP {\n  #session: SDPSessionSection;\n  #media: SDPMediaSection[];\n\n  constructor(session: SDP['session'], mediaSections: SDP['media']) {\n    this.#session = session;\n    this.#media = mediaSections;\n  }\n\n  public get session() {\n    return this.#session;\n  }\n\n  public get media() {\n    return this.#media;\n  }\n\n  public get bundle() {\n    const bundleLine = this.session.lines.find(line => line.parsed?.key === 'group');\n    return bundleLine.value.split(' ').slice(1);\n  }\n\n  toString() {\n    return this.session.lines\n    .concat(...this.media.map(section => section.lines))\n    .map(line => line.toString()).join('\\r\\n') + '\\r\\n';\n  }\n\n  /* get buggedMedia() {\n    const bundle = this.bundle;\n    type A = {\n      mid: SDPMediaSection['mid'],\n      mediaType: SDPMediaSection['mediaType'],\n      direction: SDPMediaSection['direction']\n    };\n    const out: A[] = [];\n    for(let i = 0, length = this.media.length; i < length; ++i) {\n      const section = this.media[i];\n      const mid = section.mid;\n      if(!bundle.includes(mid)) {\n        out.push(section);\n      }\n    }\n\n    return out;\n  } */\n\n  /* get mediaTypes() {\n    return this.media.map((section) => {\n      return {mid: section.oa.get('mid').oa, type: section.mediaType, direction: section.direction};\n    });\n  } */\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport default function splitStringByLimitWithRest(str: string, separator: string, limit: number) {\n  const splitted = str.split(separator);\n  const out: string[] = [];\n\n  while(limit > 0 && splitted.length) {\n    out.push(splitted.shift());\n    --limit;\n  }\n\n  if(splitted.length) {\n    out.push(splitted.join(separator));\n  }\n\n  return out;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport default class UniqueNumberGenerator {\n  #set: Set<number>;\n  #min: number;\n  #max: number;\n\n  constructor(min: number, max: number) {\n    this.#set = new Set();\n    this.#min = min;\n    this.#max = max;\n  }\n\n  public generate() {\n    const min = this.#min;\n    const max = this.#max;\n    const set = this.#set;\n\n    const maxTries = max - min + 1;\n    let value = Math.floor(min + maxTries * Math.random()), _try = 0;\n    while(set.has(value)) {\n      if(value < max) {\n        ++value;\n      } else {\n        value = min;\n      }\n\n      if(++_try >= maxTries) {\n        return null;\n      }\n    }\n\n    set.add(value);\n    return value;\n  }\n\n  public add(value: number) {\n    this.#set.add(value);\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { AttributeKey } from \".\";\n\nexport default class SDPAttributeSplitted {\n  #key: AttributeKey;\n  #value: string;\n\n  // key = 'ssrc-group', value = 'SIM 1 2 3'\n  constructor(key: AttributeKey, value: string) {\n    this.#key = key;\n    this.#value = value;\n  }\n\n  public get key() {\n    return this.#key;\n  }\n\n  public get value() {\n    return this.#value;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nexport default class SDPMediaLineParts {\n  #type: 'audio' | 'video' | 'application';\n  #port: string;\n  #protocol: string;\n  #ids: string[];\n\n  constructor(\n    type: SDPMediaLineParts['type'], \n    port: SDPMediaLineParts['port'], \n    protocol: SDPMediaLineParts['protocol'], \n    ids: SDPMediaLineParts['ids']\n  ) {\n    this.#type = type;\n    this.#port = port;\n    this.#protocol = protocol;\n    this.#ids = ids;\n  }\n\n  public get type() {\n    return this.#type;\n  }\n  \n  public get port() {\n    return this.#port;\n  }\n\n  public get protocol() {\n    return this.#protocol;\n  }\n\n  public get ids() {\n    return this.#ids;\n  }\n\n  toString() {\n    return this.type + ' ' + this.port + ' ' + this.protocol + ' ' + this.ids.join(' ');\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport splitStringByLimitWithRest from \"../../../helpers/string/splitStringByLimitWithRest\";\nimport SDPAttributeSplitted from \"./attributeSplitted\";\nimport SDPMediaLineParts from \"./mediaLineParts\";\n\nexport default class SDPLine {\n  #key: 'm' | 'a' | 'o' | 'v' | 's' | 't' | 'c';\n  #value: string;\n  #mediaLineParts: SDPMediaLineParts;\n  #parsed?: SDPAttributeSplitted;\n\n  // key = 'a', value = 'ssrc-group:SIM 1 2 3'\n  constructor(key: SDPLine['key'], value: string | SDPMediaLineParts | SDPAttributeSplitted) {\n    this.#key = key;\n\n    if(typeof(value) === 'string') {\n      this.#value = value;\n\n      if(key === 'm') {\n        const splitted = value.split(' ');\n        this.#mediaLineParts = new SDPMediaLineParts(splitted[0] as any, splitted[1], splitted[2], splitted.slice(3));\n      } else {\n        if(key === 'a') {\n          const result = splitStringByLimitWithRest(value, ':', 1);\n          value = result[0];\n          this.#parsed = result.length === 1 ? new SDPAttributeSplitted(value as any, null) : new SDPAttributeSplitted(value as any, result[1]);\n        }\n      }\n    } else {\n      if(value instanceof SDPMediaLineParts) {\n        this.#mediaLineParts = value;\n        this.#value = value.toString();\n      } else if(value instanceof SDPAttributeSplitted) {\n        this.#parsed = value;\n        this.#value = value.value ? `${value.key}:${value.value}` : value.key;\n      }\n    }\n  }\n\n  public get key() {\n    return this.#key;\n  }\n\n  public get value() {\n    return this.#value;\n  }\n\n  public get parsed() {\n    return this.#parsed;\n  }\n\n  public get mediaLineParts() {\n    return this.#mediaLineParts;\n  }\n\n  toString() {\n    return `${this.key}=${this.value}`;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport splitStringByLimitWithRest from \"../../../helpers/string/splitStringByLimitWithRest\";\n\nexport default class SDPAttributeInner {\n  #key: string;\n  #lines: Array<string>;\n  #prefix: string;\n  #nestedMap: Map<string, SDPAttributeInner>;\n  #missed: boolean;\n  #keys: Array<string>;\n\n  constructor(key: SDPAttributeInner['key'], lines: SDPAttributeInner['lines'], prefix: string = ':', missed = false) {\n    this.#key = key;\n    this.#lines = lines;\n    this.#prefix = prefix;\n    this.#missed = missed;\n    this.#nestedMap = missed ? new Map() : null;\n    this.#keys = missed ? [] : null;\n  }\n\n  public get lines() {\n    return this.#lines;\n  }\n\n  public get value() {\n    return this.#missed || !this.lines.length ? null : this.lines[0];\n  }\n\n  public get exists() {\n    return !this.#missed;\n  }\n\n  public get key() {\n    return this.#key;\n  }\n\n  public get keys() {\n    SDPAttributeInner.fill(this);\n    return this.#keys;\n  }\n\n  public forEach(callback: Parameters<Map<string, SDPAttributeInner>['forEach']>[0]) {\n    SDPAttributeInner.fill(this);\n    this.#nestedMap.forEach(callback);\n  }\n\n  public get(key: string) {\n    SDPAttributeInner.fill(this);\n    return this.#nestedMap.get(key) || new SDPAttributeInner(key, [], ':', true);\n  }\n  \n  private static fill(attribute: SDPAttributeInner) {\n    if(attribute.#nestedMap !== null) {\n      return;\n    }\n\n    const map: Map<string, Array<string>> = new Map();\n    attribute.lines.forEach(str => {\n      const [key, rest] = splitStringByLimitWithRest(str, attribute.#prefix, 1);\n      const values = map.get(key) || [];\n      map.set(key, [...values, rest || '']);\n    });\n  \n    const nestedMap = attribute.#nestedMap = SDPAttributeInner.makeAttributes(map);\n    attribute.#keys = Array.from(nestedMap.keys());\n  }\n\n  private static makeAttributes(innerParts: Map<string, Array<string>>) {\n    const out: Map<string, SDPAttributeInner> = new Map();\n  \n    innerParts.forEach((lines, key) => {\n      out.set(key, new SDPAttributeInner(key, lines));\n    });\n  \n    return out;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport SDPAttributeInner from \"./attributeInner\";\nimport SDPLine from \"./line\";\n\nexport default class SDPAttributes {\n  #lines: SDPLine[];\n  #attributes: Map<string, SDPAttributeInner>;\n\n  constructor(lines: SDPLine[]) {\n    this.#lines = lines;\n    this.#attributes = new Map();\n    SDPAttributes.fillAttributes(this);\n  }\n\n  public get(key: string) {\n    return this.#attributes.get(key) || new SDPAttributeInner(key, [], ' ', true);\n  }\n\n  private static fillAttributes(attributes: SDPAttributes) {\n    const attributesMap: Map<string, Array<string>> = new Map();\n    attributes.#lines.forEach((line) => {\n      if(line.key === 'a') {\n        const {key, value} = line.parsed;\n\n        let linesArray = attributesMap.get(key);\n        if(!linesArray) {\n          linesArray = [];\n          attributesMap.set(key, linesArray);\n        }\n        \n        linesArray.push(value || '');\n      }\n    });\n\n    attributesMap.forEach((linesArray, key) => {\n      attributes.#attributes.set(key, new SDPAttributeInner(key, linesArray, ' ', false));\n    });\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { AttributeMap } from \".\";\nimport { NoExtraProperties } from \"../../../types\";\nimport SDPAttributes from \"./attributes\";\nimport SDPLine from \"./line\";\n\nexport type SDPMediaDirection = 'sendonly' | 'recvonly' | 'inactive' | 'sendrecv';\nexport default class SDPMediaSection {\n  #lines: Array<SDPLine>;\n  #mediaLine: SDPLine;\n  #attributes: SDPAttributes;\n  #direction: SDPMediaDirection;\n\n  constructor(lines: Array<SDPLine>) {\n    this.#lines = lines;\n    this.#mediaLine = lines[0];\n    this.#attributes = this.#direction = null;\n  }\n\n  public get lines() {\n    return this.#lines;\n  }\n\n  public get mediaLine() {\n    return this.#mediaLine;\n  }\n\n  public get mediaLineParts() {\n    return this.#mediaLine.mediaLineParts;\n  }\n\n  public get mediaType() {\n    return this.mediaLineParts.type;\n  }\n\n  public get direction() {\n    if(!this.#direction) {\n      const attributes = this.attributes;\n\n      let direction: SDPMediaDirection;\n      if(attributes.get('sendonly').exists) direction = 'sendonly';\n      else if(attributes.get('recvonly').exists) direction = 'recvonly';\n      else if(attributes.get('inactive').exists) direction = 'inactive';\n      else direction = 'sendrecv';\n\n      this.#direction = direction;\n    }\n\n    return this.#direction;\n  }\n\n  public get isSending() {\n    return this.direction === 'sendrecv' || this.direction === 'sendonly';\n  }\n\n  public get isReceiving() {\n    return this.direction === 'sendrecv' || this.direction === 'recvonly';\n  }\n\n  public get attributes() {\n    this.#attributes || (this.#attributes = new SDPAttributes(this.lines));\n    return this.#attributes;\n  }\n\n  public get mid() {\n    return this.attributes.get('mid').value;\n  }\n\n  public lookupAttributeKeys<T extends AttributeMap>(keys: NoExtraProperties<AttributeMap, T>): {[k in keyof T]: T[k] extends true ? string : string[]} {\n    const out: any = {};\n\n    for(const key in keys) {\n      const result = this.attributes.get(key);\n      // @ts-ignore\n      const resultShouldBeArray = !keys[key];\n      if(!result) {\n        out[key] = resultShouldBeArray ? [] : undefined;\n      } else {\n        out[key] = resultShouldBeArray ? result.lines : result.value;\n      }\n    }\n\n    return out;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport SDPLine from \"./line\";\n\nexport default class SDPSessionSection {\n  #lines: SDPLine[];\n  #sessionId: string;\n\n  constructor(lines: SDPLine[]) {\n    this.#lines = lines;\n    this.#sessionId = lines.filter(line => line.key === 'o').map(line => line.value.split(' ')[1])[0];\n  }\n\n  public get lines() {\n    return this.#lines;\n  }\n\n  public get sessionId() {\n    return this.#sessionId;\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport SDP from \".\";\nimport splitStringByLimitWithRest from \"../../../helpers/string/splitStringByLimitWithRest\";\nimport UniqueNumberGenerator from \"../../../helpers/uniqueNumberGenerator\";\nimport SDPLine from \"./line\";\nimport SDPMediaSection from \"./mediaSection\";\nimport SDPSessionSection from \"./sessionSection\";\n\nexport function parseSdp(str: string) {\n  function createSection() {\n    if(sessionSection) {\n      mediaSections.push(new SDPMediaSection(lines));\n    } else {\n      sessionSection = new SDPSessionSection(lines);\n    }\n  }\n\n  let sessionSection: SDPSessionSection = null, mediaSections: SDPMediaSection[] = [], lines: SDPLine[] = [];\n  str.split(/\\r?\\n/).forEach(lineStr => {\n    if(!isIncorrectSdpLine(lineStr)) {\n      const line = parseSdpLine(lineStr);\n      if(line.key === 'm') {\n        createSection();\n        lines = [];\n      }\n\n      lines.push(line);\n    }\n  });\n\n  createSection();\n  return new SDP(sessionSection, mediaSections);\n}\n\nexport function isIncorrectSdpLine(str: string) {\n  return /^[\\s\\xa0]*$/.test(str);\n}\n\nexport function parseSdpLine(str: string) {\n  const splitted = splitStringByLimitWithRest(str, '=', 1);\n  return new SDPLine(splitted[0] as any, splitted[1]);\n}\n\nexport function addSimulcast(sdp: SDP) {\n  let generator: UniqueNumberGenerator;\n  sdp.media.forEach((section, idx) => {\n    if(section.mediaType === 'video' && section.isSending && !section.attributes.get('ssrc-group').get('SIM').exists) {\n      if(!generator) {\n        generator = new UniqueNumberGenerator(2, 4294967295);\n      }\n\n      const originalSsrcs = section.attributes.get('ssrc-group').get('FID').value.split(' ');\n      const lines = section.lines;\n      originalSsrcs.forEach(ssrc => generator.add(+ssrc)); // fix possible duplicates\n      const ssrcs = [originalSsrcs[0], generator.generate(), generator.generate()];\n      const ssrcs2 = [originalSsrcs[1], generator.generate(), generator.generate()];\n\n      lines.push(parseSdpLine('a=ssrc-group:SIM ' + ssrcs.join(' ')));\n\n      const ssrcsStrLines = section.attributes.get('ssrc').get(originalSsrcs[0]).lines;\n\n      ssrcs.forEach((ssrc, idx) => {\n        const ssrc2 = ssrcs2[idx];\n        if(idx > 0) {\n          lines.push(parseSdpLine('a=ssrc-group:FID ' + ssrc + ' ' + ssrc2));\n\n          ssrcsStrLines.forEach(v => {\n            lines.push(parseSdpLine('a=ssrc:' + ssrc + ' ' + v));\n          });\n\n          ssrcsStrLines.forEach(v => {\n            lines.push(parseSdpLine('a=ssrc:' + ssrc2 + ' ' + v));\n          });\n        }\n      });\n\n      sdp.media[idx] = new SDPMediaSection(lines);\n    }\n  });\n\n  return !!generator;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport SDP from \"../sdp\";\nimport SDPMediaSection from \"../sdp/mediaSection\";\nimport { toTelegramSource } from \"../utils\";\nimport { parseSourceGroups } from \"./parseSourceGroups\";\n\nexport default function parseMediaSectionInfo(sdp: SDP, channel: SDPMediaSection) {\n  const clientInfo = channel.lookupAttributeKeys({\n    'ice-ufrag': true,\n    'ice-pwd': true,\n    fingerprint: true,\n    setup: true,\n    ssrc: true,\n    mid: true,\n    'ssrc-group': false\n  });\n\n  if(!clientInfo.fingerprint) { // support Firefox\n    const line = sdp.session.lines.find(line => line.parsed?.key === 'fingerprint');\n    clientInfo.fingerprint = line.parsed.value;\n  }\n\n  const telegramSourceGroups = parseSourceGroups(clientInfo['ssrc-group']);\n  const [hash, fingerprint] = clientInfo.fingerprint.split(' ', 2);\n  const ssrc = clientInfo.ssrc && toTelegramSource(+clientInfo.ssrc.split(' ', 1)[0]);\n  // ssrc = telegramSourceGroups ? telegramSourceGroups[0].sources[0] : ssrc;\n\n  return {\n    raw: clientInfo,\n    ufrag: clientInfo['ice-ufrag'],\n    pwd: clientInfo['ice-pwd'],\n    fingerprint: {\n      fingerprint,\n      setup: clientInfo.setup,\n      hash\n    },\n    source: ssrc,\n    sourceGroups: telegramSourceGroups,\n    mid: clientInfo.mid\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { GroupCallParticipantVideoSourceGroup } from \"../../../layer\";\nimport { toTelegramSource } from \"../utils\";\n\nexport function parseSourceGroups(sdpLines: string[]) {\n  const telegramSourceGroups = sdpLines.map(str => {\n    const [semantics, ...rest] = str.split(' ');\n\n    const sourceGroup: GroupCallParticipantVideoSourceGroup = {\n      _: 'groupCallParticipantVideoSourceGroup',\n      semantics,\n      // sources: rest.map(ssrc => +ssrc)\n      sources: rest.map(ssrc => toTelegramSource(+ssrc))\n    };\n\n    return sourceGroup;\n  });\n\n  /* const simIndex = telegramSourceGroups.findIndex(g => g.semantics === 'SIM');\n  if(simIndex !== -1) {\n    const sourceGroup = telegramSourceGroups.splice(simIndex, 1)[0];\n    telegramSourceGroups.unshift(sourceGroup);\n  } */\n\n  return telegramSourceGroups.length ? telegramSourceGroups : undefined;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { forEachReverse } from \"../../../helpers/array\";\nimport { copy } from \"../../../helpers/object\";\nimport { ConferenceEntry } from \"../localConferenceDescription\";\nimport { parseSdp, addSimulcast } from \"../sdp/utils\";\nimport { generateMediaFirstLine, SDPBuilder } from \"../sdpBuilder\";\nimport { UpdateGroupCallConnectionData } from \"../types\";\nimport parseMediaSectionInfo from \"./parseMediaSectionInfo\";\n\nexport default function fixLocalOffer(options: {\n  offer: RTCSessionDescriptionInit, \n  data: UpdateGroupCallConnectionData,\n  skipAddingMulticast?: boolean\n  // mids?: string[]\n}) {\n  const {offer, data} = options;\n  const sdp = parseSdp(offer.sdp);\n  let hasMunged = false;\n\n  if(!options.skipAddingMulticast) {\n    hasMunged = addSimulcast(sdp) || hasMunged;\n  }\n\n  // const bundleLine = parsedSdp.session.lines.find(line => line.Ha?.key === 'group');\n  // const bundleMids = bundleLine.value.split(' ').slice(1);\n\n  forEachReverse(sdp.media, (section, idx, arr) => {\n    // const mid = section.oa.get('mid').oa;\n\n    // это может случиться при выключении и включении видео. почему-то появится секция уже удалённая\n    // ! нельзя тут модифицировать локальное описание, будет критовать\n    /* if(mids && !mids.includes(mid) && !bundleMids.includes(mid)) {\n      console.error('wtf');\n      hasMunged = true;\n      arr.splice(idx, 1);\n      return;\n    } */\n\n    if(/* section.mediaType !== 'video' ||  */section.isSending) {\n      return;\n    }\n\n    if(section.mediaType === 'application') {\n      return;\n    }\n\n    const mediaLine = section.mediaLine;\n    const mediaLineParts = mediaLine.mediaLineParts;\n    const mediaCodecIds = mediaLineParts.ids;\n    const localMLine = mediaLine.toString();\n\n    const codec = data[section.mediaType];\n    const payloadTypes = codec['payload-types'];\n\n    /* forEachReverse(payloadTypes, (payloadType, idx, arr) => {\n      if(!mediaCodecIds.includes('' + payloadType.id) && section.mediaType === 'video') {\n      // if(payloadType.name === 'H265') {\n        console.warn('[sdp] filtered unsupported codec', payloadType, mediaCodecIds, section.mediaType);\n        arr.splice(idx, 1);\n      }\n    }); */\n\n    const codecIds = payloadTypes.map(payload => '' + payload.id);\n    const correctMLine = generateMediaFirstLine(section.mediaType, undefined, codecIds);\n    \n    if(localMLine !== correctMLine) {\n      const sectionInfo = parseMediaSectionInfo(sdp, section);\n\n      let newData = {...data};\n      newData.transport = copy(newData.transport);\n      newData.transport.ufrag = sectionInfo.ufrag;\n      newData.transport.pwd = sectionInfo.pwd;\n      newData.transport.fingerprints = [sectionInfo.fingerprint];\n      newData.transport.candidates = [];\n\n      const entry = new ConferenceEntry(sectionInfo.mid, mediaLineParts.type);\n      entry.setPort(mediaLineParts.port);\n      sectionInfo.source && entry.setSource(sectionInfo.sourceGroups || sectionInfo.source);\n      entry.setDirection(section.direction);\n\n      const newSdp = new SDPBuilder().addSsrcEntry(entry, newData).finalize();\n\n      const newChannel = parseSdp(newSdp).media[0];\n      arr[idx] = newChannel;\n\n      hasMunged = true;\n    }\n  });\n\n  if(hasMunged) {\n    const mungedSdp = sdp.toString();\n    offer.sdp = mungedSdp;\n  }\n\n  return {offer, sdp/* , bundleMids */};\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { forEachReverse } from \"../../helpers/array\";\nimport throttle from \"../../helpers/schedulers/throttle\";\nimport { Updates, PhoneJoinGroupCall, PhoneJoinGroupCallPresentation, Update } from \"../../layer\";\nimport apiUpdatesManager from \"../appManagers/apiUpdatesManager\";\nimport appGroupCallsManager, { GroupCallConnectionType, JoinGroupCallJsonPayload } from \"../appManagers/appGroupCallsManager\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport rootScope from \"../rootScope\";\nimport CallConnectionInstanceBase, { CallConnectionInstanceOptions } from \"./callConnectionInstanceBase\";\nimport GroupCallInstance from \"./groupCallInstance\";\nimport filterServerCodecs from \"./helpers/filterServerCodecs\";\nimport fixLocalOffer from \"./helpers/fixLocalOffer\";\nimport processMediaSection from \"./helpers/processMediaSection\";\nimport { ConferenceEntry } from \"./localConferenceDescription\";\nimport SDP from \"./sdp\";\nimport SDPMediaSection from \"./sdp/mediaSection\";\nimport { WebRTCLineType } from \"./sdpBuilder\";\nimport { UpdateGroupCallConnectionData } from \"./types\";\n\nexport default class GroupCallConnectionInstance extends CallConnectionInstanceBase {\n  private groupCall: GroupCallInstance;\n  public updateConstraints?: boolean;\n  private type: GroupCallConnectionType;\n  private options: {\n    type: Extract<GroupCallConnectionType, 'main'>, \n    isMuted?: boolean, \n    joinVideo?: boolean, \n    rejoin?: boolean\n  } | {\n    type: Extract<GroupCallConnectionType, 'presentation'>,\n  };\n\n  private updateConstraintsInterval: number;\n  public negotiateThrottled: () => void;\n\n  constructor(options: CallConnectionInstanceOptions & {\n    groupCall: GroupCallConnectionInstance['groupCall'],\n    type: GroupCallConnectionInstance['type'],\n    options: GroupCallConnectionInstance['options'],\n  }) {\n    super(options);\n\n    this.negotiateThrottled = throttle(this.negotiate.bind(this), 0, false);\n  }\n\n  public createPeerConnection() {\n    return this.connection || super.createPeerConnection({ \n      iceServers: [], \n      iceTransportPolicy: 'all', \n      bundlePolicy: 'max-bundle', \n      rtcpMuxPolicy: 'require', \n      iceCandidatePoolSize: 0, \n      // sdpSemantics: \"unified-plan\", \n      // extmapAllowMixed: true,\n    });\n  }\n\n  public createDataChannel() {\n    if(this.dataChannel) {\n      return this.dataChannel;\n    }\n\n    const dataChannel = super.createDataChannel();\n\n    dataChannel.addEventListener('open', () => {\n      this.maybeUpdateRemoteVideoConstraints();\n    });\n\n    dataChannel.addEventListener('close', () => {\n      if(this.updateConstraintsInterval) {\n        clearInterval(this.updateConstraintsInterval);\n        this.updateConstraintsInterval = undefined;\n      }\n    });\n\n    return dataChannel;\n  }\n\n  public createDescription() {\n    if(this.description) {\n      return this.description;\n    }\n\n    const description = super.createDescription();\n\n    /* const perType = 0;\n    const types = ['audio' as const, 'video' as const];\n    const count = types.length * perType;\n    const init: RTCRtpTransceiverInit = {direction: 'recvonly'};\n    types.forEach(type => {\n      for(let i = 0; i < perType; ++i) {\n        description.createEntry(type).createTransceiver(connection, init);\n      }\n    }); */\n\n    return description;\n  }\n\n  public appendStreamToConference() {\n    super.appendStreamToConference();/* .then(() => {\n      currentGroupCall.connections.main.negotiating = false;\n      this.startNegotiation({\n        type: type,\n        isMuted: muted,\n        rejoin\n      });\n    }); */\n  }\n\n  private async invokeJoinGroupCall(localSdp: SDP, mainChannels: SDPMediaSection[], options: GroupCallConnectionInstance['options']) {\n    const {groupCall, description} = this;\n    const groupCallId = groupCall.id;\n\n    const processedChannels = mainChannels.map(section => {\n      const processed = processMediaSection(localSdp, section);\n\n      this.sources[processed.entry.type as 'video' | 'audio'] = processed.entry;\n      \n      return processed;\n    });\n\n    let promise: Promise<Updates>;\n    const audioChannel = processedChannels.find(channel => channel.media.mediaType === 'audio');\n    const videoChannel = processedChannels.find(channel => channel.media.mediaType === 'video');\n    let {source, params} = audioChannel || {};\n    const useChannel = videoChannel || audioChannel;\n\n    const channels: {[type in WebRTCLineType]?: typeof audioChannel} = {\n      audio: audioChannel,\n      video: videoChannel\n    };\n\n    description.entries.forEach(entry => {\n      if(entry.direction === 'sendonly') {\n        const channel = channels[entry.type];\n        if(!channel) return;\n\n        description.setEntrySource(entry, channel.sourceGroups || channel.source);\n        description.setEntryPeerId(entry, rootScope.myId);\n      }\n    });\n\n    // overwrite ssrc with audio in video params\n    if(params !== useChannel.params) {\n      const data: JoinGroupCallJsonPayload = JSON.parse(useChannel.params.data);\n      // data.ssrc = source || data.ssrc - 1; // audio channel can be missed in screensharing\n      if(source) data.ssrc = source;\n      else delete data.ssrc;\n      params = {\n        _: 'dataJSON',\n        data: JSON.stringify(data)\n      };\n    }\n    \n    const groupCallInput = appGroupCallsManager.getGroupCallInput(groupCallId);\n    if(options.type === 'main') {\n      const request: PhoneJoinGroupCall = {\n        call: groupCallInput,\n        join_as: {_: 'inputPeerSelf'},\n        params,\n        muted: options.isMuted,\n        video_stopped: !options.joinVideo\n      };\n\n      promise = apiManager.invokeApi('phone.joinGroupCall', request);\n      this.log(`[api] joinGroupCall id=${groupCallId}`, request);\n    } else {\n      const request: PhoneJoinGroupCallPresentation = {\n        call: groupCallInput,\n        params,\n      };\n\n      promise = apiManager.invokeApi('phone.joinGroupCallPresentation', request);\n      this.log(`[api] joinGroupCallPresentation id=${groupCallId}`, request);\n    }\n\n    const updates = await promise;\n    apiUpdatesManager.processUpdateMessage(updates);\n    const update = (updates as Updates.updates).updates.find(update => update._ === 'updateGroupCallConnection') as Update.updateGroupCallConnection;\n\n    const data: UpdateGroupCallConnectionData = JSON.parse(update.params.data);\n\n    data.audio = data.audio || groupCall.connections.main.description.audio;\n    description.setData(data);\n    filterServerCodecs(mainChannels, data);\n\n    return data;\n  }\n\n  protected async negotiateInternal() {\n    const {connection, description} = this;\n    const isNewConnection = connection.iceConnectionState === 'new' && !description.getEntryByMid('0').source;\n    const log = this.log.bindPrefix('startNegotiation');\n    log('start');\n    \n    const originalOffer = await connection.createOffer({iceRestart: false});\n\n    if(isNewConnection && this.dataChannel) {\n      const dataChannelEntry = description.createEntry('application');\n      dataChannelEntry.setDirection('sendrecv');\n    }\n\n    const {sdp: localSdp, offer} = fixLocalOffer({\n      offer: originalOffer, \n      data: description\n    });\n\n    log('[sdp] setLocalDescription', offer.sdp);\n    await connection.setLocalDescription(offer);\n\n    const mainChannels = localSdp.media.filter(media => {\n      return media.mediaType !== 'application' && media.isSending;\n    });\n\n    if(isNewConnection) {\n      try {\n        await this.invokeJoinGroupCall(localSdp, mainChannels, this.options);\n      } catch(e) {\n        this.log.error('[tdweb] joinGroupCall error', e);\n      }\n    }\n    \n    /* if(!data) {\n      log('abort 0');\n      this.closeConnectionAndStream(connection, streamManager);\n      return;\n    } */\n\n    /* if(connection.iceConnectionState !== 'new') {\n      log(`abort 1 connectionState=${connection.iceConnectionState}`);\n      this.closeConnectionAndStream(connection, streamManager);\n      return;\n    } */\n    /* if(this.currentGroupCall !== currentGroupCall || connectionHandler.connection !== connection) {\n      log('abort', this.currentGroupCall, currentGroupCall);\n      this.closeConnectionAndStream(connection, streamManager);\n      return;\n    } */\n    \n    const isAnswer = true;\n    // const _bundleMids = bundleMids.slice();\n    const entriesToDelete: ConferenceEntry[] = [];\n    const bundle = localSdp.bundle;\n    forEachReverse(bundle, (mid, idx, arr) => {\n      const entry = description.getEntryByMid(mid);\n      if(entry.shouldBeSkipped(isAnswer)) {\n        arr.splice(idx, 1);\n        entriesToDelete.push(entry);\n      }\n    });\n\n    /* forEachReverse(description.entries, (entry, idx, arr) => {\n      const mediaSection = _parsedSdp.media.find(section => section.oa.get('mid').oa === entry.mid);\n      const deleted = !mediaSection;\n      // const deleted = !_bundleMids.includes(entry.mid); // ! can't use it because certain mid can be missed in bundle\n      if(deleted) {\n        arr.splice(idx, 1);\n      }\n    }); */\n\n    const entries = localSdp.media.map((section) => {\n      const mid = section.mid;\n      let entry = description.getEntryByMid(mid);\n      if(!entry) {\n        entry = new ConferenceEntry(mid, section.mediaType);\n        entry.setDirection('inactive');\n      }\n\n      return entry;\n    });\n\n    const answerDescription: RTCSessionDescriptionInit = {\n      type: 'answer',\n      sdp: description.generateSdp({\n        bundle, \n        entries, \n        isAnswer\n      })\n    };\n\n    entriesToDelete.forEach(entry => {\n      description.deleteEntry(entry);\n    });\n\n    log(`[sdp] setRemoteDescription signaling=${connection.signalingState} ice=${connection.iceConnectionState} gathering=${connection.iceGatheringState} connection=${connection.connectionState}`, answerDescription.sdp);\n    await connection.setRemoteDescription(answerDescription);\n\n    log('end');\n  }\n\n  public negotiate() {\n    let promise = this.negotiating;\n    if(promise) {\n      return promise;\n    }\n\n    promise = super.negotiate();\n\n    if(this.updateConstraints) {\n      promise.then(() => {\n        this.maybeUpdateRemoteVideoConstraints();\n        this.updateConstraints = false;\n      });\n    }\n\n    if(this.options.type === 'presentation') {\n      promise.then(() => {\n        this.connection.getTransceivers().find(transceiver => {\n          if(transceiver.sender?.track?.kind === 'video') {\n            transceiver.sender.setParameters({\n              ...transceiver.sender.getParameters(),\n              degradationPreference: 'maintain-resolution'\n            });\n          }\n        });\n      });\n    }\n\n    return promise;\n  }\n\n  public maybeUpdateRemoteVideoConstraints() {\n    if(this.dataChannel.readyState !== 'open') {\n      return;\n    }\n\n    this.log('maybeUpdateRemoteVideoConstraints');\n    \n    // * https://github.com/TelegramMessenger/tgcalls/blob/6f2746e04c9b040f8c8dfc64d916a1853d09c4ce/tgcalls/group/GroupInstanceCustomImpl.cpp#L2549\n    type VideoConstraints = {minHeight?: number, maxHeight: number};\n    const obj: {\n      colibriClass: 'ReceiverVideoConstraints',\n      constraints: {[endpoint: string]: VideoConstraints},\n      defaultConstraints: VideoConstraints,\n      onStageEndpoints: string[]\n    } = {\n      colibriClass: 'ReceiverVideoConstraints',\n      constraints: {},\n      defaultConstraints: {maxHeight: 0},\n      onStageEndpoints: []\n    };\n\n    for(const entry of this.description.entries) {\n      if(entry.direction !== 'recvonly' || entry.type !== 'video') {\n        continue;\n      }\n\n      const {endpoint} = entry;\n      obj.onStageEndpoints.push(endpoint);\n      obj.constraints[endpoint] = {\n        minHeight: 180,\n        maxHeight: 720\n      };\n    }\n\n    this.sendDataChannelData(obj);\n\n    if(!obj.onStageEndpoints.length) {\n      if(this.updateConstraintsInterval) {\n        clearInterval(this.updateConstraintsInterval);\n        this.updateConstraintsInterval = undefined;\n      }\n    } else if(!this.updateConstraintsInterval) {\n      this.updateConstraintsInterval = window.setInterval(this.maybeUpdateRemoteVideoConstraints.bind(this), 5000);\n    }\n  }\n  \n  public addInputVideoStream(stream: MediaStream) {\n    // const {sources} = this;\n    // if(sources?.video) {\n      // const source = this.sources.video.source;\n      // stream.source = '' + source;\n      this.groupCall.saveInputVideoStream(stream, this.type);\n    // }\n\n    this.streamManager.addStream(stream, 'input');\n    this.appendStreamToConference(); // replace sender track\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { safeAssign } from \"../../helpers/object\";\nimport { logger } from \"../logger\";\nimport createDataChannel from \"./helpers/createDataChannel\";\nimport createPeerConnection from \"./helpers/createPeerConnection\";\nimport LocalConferenceDescription from \"./localConferenceDescription\";\nimport StreamManager from \"./streamManager\";\nimport { Ssrc } from \"./types\";\n\nexport type CallConnectionInstanceOptions = {\n  streamManager: StreamManager,\n  connection?: RTCPeerConnection,\n  log?: ReturnType<typeof logger>\n};\n\nexport default abstract class CallConnectionInstanceBase {\n  public connection: RTCPeerConnection;\n  public streamManager: StreamManager;\n  public dataChannel: RTCDataChannel;\n  public description: LocalConferenceDescription;\n  public sources: {\n    audio: Ssrc,\n    video?: Ssrc,\n  };\n  protected negotiating: Promise<void>;\n  protected log: ReturnType<typeof logger>;\n\n  constructor(options: CallConnectionInstanceOptions) {\n    safeAssign(this, options);\n\n    if(!this.log) {\n      this.log = this.connection?.log || logger('CALL-CONNECTION-BASE');\n    }\n\n    this.sources = {} as any;\n  }\n\n  public createPeerConnection(config?: RTCConfiguration) {\n    return this.connection || (this.connection = createPeerConnection(config, this.log.bindPrefix('connection')).connection);\n  }\n\n  public createDataChannel(dict?: RTCDataChannelInit) {\n    return this.dataChannel || (this.dataChannel = createDataChannel(this.connection, dict, this.log.bindPrefix('data')));\n  }\n\n  public createDescription() {\n    return this.description || (this.description = new LocalConferenceDescription(this.connection));\n  }\n\n  public appendStreamToConference() {\n    return this.streamManager.appendToConference(this.description);\n  }\n\n  public closeConnection() {\n    const {connection} = this;\n    if(!connection) {\n      return;\n    }\n\n    try {\n      connection.log('close');\n      connection.close();\n    } catch(e) {\n      this.log.error(e);\n    }\n  }\n\n  public closeConnectionAndStream(stopStream: boolean) {\n    this.closeConnection();\n    stopStream && this.streamManager.stop();\n  }\n\n  protected abstract negotiateInternal(): CallConnectionInstanceBase['negotiating'];\n\n  public negotiate() {\n    let promise = this.negotiating;\n    if(promise) {\n      return promise;\n    }\n\n    return this.negotiating = this.negotiateInternal().finally(() => {\n      this.negotiating = undefined;\n    });\n  }\n\n  public sendDataChannelData(data: any) {\n    if(this.dataChannel.readyState !== 'open') {\n      return;\n    }\n\n    this.dataChannel.send(JSON.stringify(data));\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { Logger, logger } from \"../../logger\";\n\nexport default function createPeerConnection(config: RTCConfiguration, log?: Logger) {\n  if(!log) {\n    log = logger('RTCPeerConnection');\n  }\n\n  log('constructor');\n\n  // @ts-ignore\n  const connection = new RTCPeerConnection(config);\n  connection.addEventListener('track', (event) => {\n    log('ontrack', event);\n  });\n  connection.addEventListener('signalingstatechange', () => {\n    log('onsignalingstatechange', connection.signalingState);\n  });\n  connection.addEventListener('connectionstatechange', () => {\n    log('onconnectionstatechange', connection.connectionState);\n  });\n  connection.addEventListener('negotiationneeded', () => { // * will be fired every time input device changes\n    log('onnegotiationneeded', connection.signalingState);\n  });\n  connection.addEventListener('icecandidate', (event) => {\n    log('onicecandidate', event);\n  });\n  connection.addEventListener('iceconnectionstatechange', () => {\n    log('oniceconnectionstatechange', connection.iceConnectionState);\n  });\n  connection.addEventListener('datachannel', () => {\n    log('ondatachannel');\n  });\n\n  connection.log = log;\n\n  return {connection};\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { Logger, logger } from \"../../logger\";\n\nexport default function createDataChannel(connection: RTCPeerConnection, dict?: RTCDataChannelInit, log?: Logger) {\n  // return;\n\n  if(!log) {\n    log = logger('RTCDataChannel');\n  }\n\n  const channel = connection.createDataChannel('data', dict);\n\n  channel.addEventListener('message', (e) => {\n    log('onmessage', e);\n  });\n  channel.addEventListener('open', () => {\n    log('onopen');\n  });\n  channel.addEventListener('close', () => {\n    log('onclose');\n  });\n\n  channel.log = log;\n\n  return channel;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { DataJSON } from \"../../../layer\";\nimport { JoinGroupCallJsonPayload } from \"../../appManagers/appGroupCallsManager\";\nimport SDP from \"../sdp\";\nimport { Ssrc } from \"../types\";\nimport parseMediaSectionInfo from \"./parseMediaSectionInfo\";\n\nexport default function processMediaSection(sdp: SDP, media: SDP['media'][0]) {\n  const sectionInfo = parseMediaSectionInfo(sdp, media);\n\n  const mediaType: Exclude<typeof media['mediaType'], 'application'> = media.mediaType as any;\n  const entry: Ssrc = {\n    source: sectionInfo.source,\n    sourceGroups: sectionInfo.sourceGroups,\n    type: mediaType\n  };\n\n  // do not change this value, otherwise onconnectionstatechange won't fire\n  sectionInfo.fingerprint.setup = 'active';\n  const payload: JoinGroupCallJsonPayload = {\n    fingerprints: [sectionInfo.fingerprint],\n    pwd: sectionInfo.pwd,\n    ssrc: sectionInfo.source,\n    'ssrc-groups': sectionInfo.sourceGroups || [],\n    ufrag: sectionInfo.ufrag\n  };\n  const paramsDataJson = JSON.stringify(payload);\n\n  const params: DataJSON = {\n    _: 'dataJSON',\n    data: paramsDataJson\n  };\n\n  return {\n    params, \n    source: sectionInfo.source, \n    media, \n    sourceGroups: sectionInfo.sourceGroups, \n    entry\n  };\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { forEachReverse } from \"../../../helpers/array\";\nimport SDPMediaSection from \"../sdp/mediaSection\";\nimport { UpdateGroupCallConnectionData, Codec } from \"../types\";\n\nexport default function filterServerCodecs(mainChannels: SDPMediaSection[], data: UpdateGroupCallConnectionData) {\n  // ! Need to filter server's extmap for Firefox\n  const performExtmap = (channel: typeof mainChannels[0]) => {\n    const out: {[id: string]: string} = {};\n    const extmap = channel.attributes.get('extmap');\n    extmap.forEach((extmap) => {\n      const id = extmap.key.split('/', 1)[0];\n      out[id] = extmap.value;\n    });\n\n    return out;\n  };\n\n  const codecsToPerform: [Codec, 'audio' | 'video'][] = /* flatten([data, dataPresentation].filter(Boolean).map(data => {\n    return  */['audio' as const, 'video' as const].filter(type => data[type]).map(type => ([data[type], type]));\n  // }));\n\n  codecsToPerform.forEach(([codec, type]) => {\n    const channel = mainChannels.find(line => line.mediaType === type);\n    if(!channel) {\n      return;\n    }\n\n    const extmap = performExtmap(channel);\n    forEachReverse(codec[\"rtp-hdrexts\"], (value, index, arr) => {\n      if(extmap[value.id] !== value.uri) {\n        arr.splice(index, 1);\n        console.log(`[sdp] filtered extmap:`, value, index, type);\n      }\n    });\n  });\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport { IS_SAFARI } from \"../../environment/userAgent\";\nimport { indexOfAndSplice } from \"../../helpers/array\";\nimport { safeAssign } from \"../../helpers/object\";\nimport throttle from \"../../helpers/schedulers/throttle\";\nimport { GroupCall, GroupCallParticipant, Updates } from \"../../layer\";\nimport apiUpdatesManager from \"../appManagers/apiUpdatesManager\";\nimport appGroupCallsManager, { GroupCallConnectionType, GroupCallId, GroupCallOutputSource } from \"../appManagers/appGroupCallsManager\";\nimport appPeersManager from \"../appManagers/appPeersManager\";\nimport { logger } from \"../logger\";\nimport apiManager from \"../mtproto/mtprotoworker\";\nimport { NULL_PEER_ID } from \"../mtproto/mtproto_config\";\nimport rootScope from \"../rootScope\";\nimport CallInstanceBase, { TryAddTrackOptions } from \"./callInstanceBase\";\nimport GroupCallConnectionInstance from \"./groupCallConnectionInstance\";\nimport GROUP_CALL_STATE from \"./groupCallState\";\nimport getScreenConstraints from \"./helpers/getScreenConstraints\";\nimport getScreenStream from \"./helpers/getScreenStream\";\nimport getStream from \"./helpers/getStream\";\nimport getVideoConstraints from \"./helpers/getVideoConstraints\";\nimport stopTrack from \"./helpers/stopTrack\";\nimport localConferenceDescription from \"./localConferenceDescription\";\nimport { WebRTCLineType } from \"./sdpBuilder\";\nimport StreamManager from \"./streamManager\";\nimport { Ssrc } from \"./types\";\n\nexport default class GroupCallInstance extends CallInstanceBase<{\n  state: (state: GROUP_CALL_STATE) => void,\n  pinned: (source?: GroupCallOutputSource) => void,\n}> {\n  public id: GroupCallId;\n  public chatId: ChatId;\n  public handleUpdateGroupCallParticipants: boolean;\n  public updatingSdp: boolean;\n  public isSpeakingMap: Map<any, any>;\n  public connections: {[k in GroupCallConnectionType]?: GroupCallConnectionInstance};\n  public groupCall: GroupCall;\n  public participant: GroupCallParticipant;\n  \n  // will be set with negotiation\n  public joined: boolean;\n  \n  private pinnedSources: Array<GroupCallOutputSource>;\n  private participantsSsrcs: Map<PeerId, Ssrc[]>;\n  private hadAutoPinnedSources: Set<GroupCallOutputSource>;\n  private dispatchPinnedThrottled: () => void;\n  private startVideoSharingPromise: Promise<void>;\n  private startScreenSharingPromise: Promise<void>;\n\n  constructor(options: {\n    id: GroupCallInstance['id'],\n    chatId: GroupCallInstance['chatId'],\n    isSpeakingMap?: GroupCallInstance['isSpeakingMap'],\n    connections?: GroupCallInstance['connections']\n  }) {\n    super();\n\n    safeAssign(this, options);\n\n    if(!this.log) {\n      this.log = logger('GROUP-CALL');\n    }\n\n    if(!this.connections) {\n      this.connections = {};\n    }\n\n    if(!this.isSpeakingMap) {\n      this.isSpeakingMap = new Map();\n    }\n\n    this.pinnedSources = [];\n    this.participantsSsrcs = new Map();\n    this.hadAutoPinnedSources = new Set();\n    this.dispatchPinnedThrottled = throttle(() => {\n      this.dispatchEvent('pinned', this.pinnedSource);\n    }, 0, false);\n\n    this.addEventListener('state', (state) => {\n      if(state === GROUP_CALL_STATE.CLOSED) {\n        this.cleanup();\n      }\n    });\n  }\n\n  get connectionState() {\n    return this.connections.main.connection.iceConnectionState;\n  }\n\n  get state() {\n    const {connectionState} = this;\n    if(connectionState === 'closed') {\n      return GROUP_CALL_STATE.CLOSED;\n    } else if(connectionState !== 'connected' && (!IS_SAFARI || connectionState !== 'completed')) {\n      return GROUP_CALL_STATE.CONNECTING;\n    } else {\n      const {participant} = this;\n      if(!participant.pFlags.can_self_unmute) {\n        return GROUP_CALL_STATE.MUTED_BY_ADMIN;\n      } else if(participant.pFlags.muted) {\n        return GROUP_CALL_STATE.MUTED;\n      } else {\n        return GROUP_CALL_STATE.UNMUTED;\n      }\n    }\n  }\n\n  get participants() {\n    return appGroupCallsManager.getCachedParticipants(this.id);\n  }\n\n  get isSharingScreen() {\n    return !!this.connections.presentation;\n  }\n\n  get pinnedSource() {\n    return this.pinnedSources[this.pinnedSources.length - 1];\n  }\n\n  public get isMuted() {\n    return this.state !== GROUP_CALL_STATE.UNMUTED;\n  }\n\n  public get isClosing() {\n    const {state} = this;\n    return state === GROUP_CALL_STATE.CLOSED;\n  }\n\n  public get streamManager(): StreamManager {\n    return this.connections.main.streamManager;\n  }\n\n  public get description(): localConferenceDescription {\n    return this.connections.main.description;\n  }\n\n  public pinSource(source: GroupCallOutputSource) {\n    indexOfAndSplice(this.pinnedSources, source);\n    this.pinnedSources.push(source);\n    this.dispatchPinnedThrottled();\n  }\n\n  public unpinSource(source: GroupCallOutputSource) {\n    this.hadAutoPinnedSources.delete(source);\n    indexOfAndSplice(this.pinnedSources, source);\n    this.dispatchPinnedThrottled();\n  }\n\n  public unpinAll() {\n    this.pinnedSources.length = 0;\n    this.dispatchPinnedThrottled();\n  }\n\n  public getParticipantByPeerId(peerId: PeerId) {\n    return NULL_PEER_ID === peerId ? this.participant : this.participants.get(peerId);\n  }\n\n  public toggleMuted() {\n    return this.requestAudioSource(true).then(() => appGroupCallsManager.toggleMuted());\n  }\n\n  public getElement(endpoint: GroupCallOutputSource) {\n    return super.getElement(endpoint);\n  }\n\n  public getVideoElementFromParticipantByType(participant: GroupCallParticipant, type: 'video' | 'presentation') {\n    let source: GroupCallOutputSource;\n    if(participant.pFlags.self) {\n      const connectionType: GroupCallConnectionType = type === 'video' ? 'main' : 'presentation';\n      source = connectionType;\n    } else {\n      const codec = participant[type];\n      source = codec.source_groups[0].sources[0];\n    }\n\n    const element = this.getElement(source) as HTMLVideoElement;\n    if(!element) return;\n\n    const clone = element.cloneNode() as typeof element;\n    clone.srcObject = element.srcObject;\n    clone.setAttribute('playsinline', 'true');\n    clone.muted = true;\n    return {video: clone, source};\n  }\n\n  public createConnectionInstance(options: {\n    streamManager: StreamManager,\n    type: GroupCallConnectionType,\n    options: GroupCallConnectionInstance['options'],\n  }) {\n    return this.connections[options.type] = new GroupCallConnectionInstance({\n      groupCall: this,\n      log: this.log.bindPrefix(options.type),\n      ...options\n    });\n  }\n\n  public changeRaiseHand(raise: boolean) {\n    return appGroupCallsManager.editParticipant(this.id, this.participant, {raiseHand: raise});\n  }\n\n  public async startScreenSharingInternal() {\n    try {\n      const type: GroupCallConnectionType = 'presentation';\n\n      const stream = await getScreenStream(getScreenConstraints());\n      const streamManager = new StreamManager();\n      \n      const connectionInstance = this.createConnectionInstance({\n        streamManager,\n        type,\n        options: {\n          type\n        }\n      });\n      \n      const connection = connectionInstance.createPeerConnection();\n      connection.addEventListener('negotiationneeded', () => {\n        connectionInstance.negotiate();\n      });\n\n      stream.getVideoTracks()[0].addEventListener('ended', () => {\n        if(this.connections.presentation) { // maybe user has stopped screensharing through browser's ui\n          this.stopScreenSharing();\n        }\n      }, {once: true});\n      \n      connectionInstance.createDescription();\n      connectionInstance.addInputVideoStream(stream);\n    } catch(err) {\n      this.log.error('start screen sharing error', err);\n    }\n  }\n\n  public startScreenSharing() {\n    return this.startScreenSharingPromise || (this.startScreenSharingPromise = this.startScreenSharingInternal().finally(() => {\n      this.startScreenSharingPromise = undefined;\n    }));\n  }\n\n  public stopScreenSharing() {\n    const connectionInstance = this.connections.presentation;\n    if(!connectionInstance) {\n      return Promise.resolve();\n    }\n\n    delete this.connections.presentation;\n    this.unpinSource('presentation');\n    connectionInstance.closeConnectionAndStream(true);\n\n    delete this.participant.presentation;\n    appGroupCallsManager.saveApiParticipant(this.id, this.participant);\n\n    return apiManager.invokeApi('phone.leaveGroupCallPresentation', {\n      call: appGroupCallsManager.getGroupCallInput(this.id)\n    }).then(updates => {\n      apiUpdatesManager.processUpdateMessage(updates);\n    });\n  }\n\n  public toggleScreenSharing() {\n    if(this.isSharingScreen) {\n      return this.stopScreenSharing();\n    } else {\n      return this.startScreenSharing();\n    }\n  }\n\n  public async startVideoSharingInternal() {\n    const constraints: MediaStreamConstraints = {\n      video: getVideoConstraints()\n    };\n\n    try {\n      const stream = await getStream(constraints, false);\n      const connectionInstance = this.connections.main;\n      connectionInstance.addInputVideoStream(stream);\n\n      await appGroupCallsManager.editParticipant(this.id, this.participant, {\n        videoPaused: false,\n        videoStopped: false\n      });\n    } catch(err) {\n      this.log.error('startVideoSharing error', err, constraints);\n    }\n  }\n\n  public startVideoSharing() {\n    return this.startVideoSharingPromise || (this.startVideoSharingPromise = this.startVideoSharingInternal().finally(() => {\n      this.startVideoSharingPromise = undefined;\n    }));\n  }\n\n  public async stopVideoSharing() {\n    const connectionInstance = this.connections.main;\n    const track = connectionInstance.streamManager.inputStream.getVideoTracks()[0];\n    if(!track) {\n      return;\n    }\n\n    stopTrack(track);\n    connectionInstance.streamManager.appendToConference(connectionInstance.description); // clear sender track\n\n    await appGroupCallsManager.editParticipant(this.id, this.participant, {\n      videoStopped: true\n    });\n  }\n\n  public toggleVideoSharing() {\n    if(this.isSharingVideo) {\n      return this.stopVideoSharing();\n    } else {\n      return this.startVideoSharing();\n    }\n  }\n\n  public async hangUp(discard = false, rejoin = false, isDiscarded = false) {\n    for(const type in this.connections) {\n      const connection = this.connections[type as GroupCallConnectionType];\n      connection.closeConnectionAndStream(!rejoin);\n    }\n\n    this.dispatchEvent('state', this.state);\n\n    if(isDiscarded) {\n      return;\n    }\n    \n    if(!rejoin) {\n      let promise: Promise<Updates>;\n      const groupCallInput = appGroupCallsManager.getGroupCallInput(this.id);\n\n      if(discard) {\n        this.log(`[api] discardGroupCall id=${this.id}`);\n        promise = apiManager.invokeApi('phone.discardGroupCall', {\n          call: groupCallInput\n        });\n      } else if(this.joined) {\n        this.log(`[api] leaveGroupCall id=${this.id}`);\n        const connectionInstance = this.connections.main;\n        promise = apiManager.invokeApi('phone.leaveGroupCall', {\n          call: groupCallInput,\n          source: connectionInstance.sources.audio.source\n        });\n      } else {\n        this.log(`[api] id=${this.id} payload=null`);\n        promise = apiManager.invokeApi('phone.joinGroupCall', {\n          call: groupCallInput,\n          join_as: {_: 'inputPeerSelf'},\n          muted: true,\n          video_stopped: true,\n          params: {\n            _: 'dataJSON',\n            data: ''\n          }\n        });\n      }\n\n      const updates = await promise;\n      apiUpdatesManager.processUpdateMessage(updates);\n    }\n  }\n\n  public tryAddTrack(options: Omit<TryAddTrackOptions, 'streamManager'>) {\n    const {description} = this;\n    const source = super.tryAddTrack(options);\n    \n    if(options.type === 'output') {\n      const entry = description.getEntryBySource(+source);\n      const participant = this.participants.get(entry.peerId);\n      if(participant) {\n        rootScope.dispatchEvent('group_call_participant', {groupCallId: this.id, participant});\n      }\n    }\n\n    return source;\n  }\n\n  public onParticipantUpdate(participant: GroupCallParticipant, doNotDispatchParticipantUpdate?: PeerId) {\n    const connectionInstance = this.connections.main;\n    const {connection, description} = connectionInstance;\n\n    const peerId = appPeersManager.getPeerId(participant.peer);\n    const hasLeft = !!participant.pFlags.left;\n    const oldSsrcs = this.participantsSsrcs.get(peerId) || [];\n\n    if(participant.presentation && !hasLeft) {\n      const {source} = appGroupCallsManager.makeSsrcFromParticipant(participant, 'video', participant.presentation.source_groups, participant.presentation.endpoint);\n      if(!this.hadAutoPinnedSources.has(source)) {\n        this.hadAutoPinnedSources.add(source);\n        this.pinSource(participant.pFlags.self ? 'presentation' : source);\n      }\n    }\n\n    if(participant.pFlags.self) {\n      this.participant = participant;\n\n      if(connectionInstance.sources.audio.source !== participant.source) {\n        this.hangUp();\n      }\n\n      let mute = false;\n      if(!participant.pFlags.can_self_unmute) {\n        this.stopScreenSharing();\n        this.stopVideoSharing();\n        mute = true;\n      } else if(participant.pFlags.muted) {\n        mute = true;\n      }\n\n      if(mute) {\n        this.setMuted(true);\n      }\n\n      if(doNotDispatchParticipantUpdate !== peerId) {\n        this.dispatchEvent('state', this.state);\n      }\n\n      return;\n    }\n\n    const ssrcs = hasLeft ? [] : appGroupCallsManager.makeSsrcsFromParticipant(participant);\n\n    if(!hasLeft) {\n      this.participantsSsrcs.set(peerId, ssrcs);\n    } else {\n      this.participantsSsrcs.delete(peerId);\n    }\n\n    // const TEST_OLD = false;\n\n    const modifiedTypes: Set<WebRTCLineType> = new Set();\n    oldSsrcs.forEach(oldSsrc => {\n      const oldSource = oldSsrc.source;\n      const newSsrc = ssrcs.find(ssrc => ssrc.source === oldSource);\n      if(!newSsrc) {\n        this.unpinSource(oldSource);\n\n        const oldEntry = description.getEntryBySource(oldSource);\n        if(oldEntry && oldEntry.direction !== 'inactive') {\n          oldEntry.setDirection('inactive');\n          modifiedTypes.add(oldEntry.type);\n        }\n      }\n    });\n\n    ssrcs.forEach(ssrc => {\n      let entry = description.getEntryBySource(ssrc.source);\n      if(entry) {\n        if(entry.direction === 'inactive') {\n          entry.setDirection(entry.originalDirection);\n          modifiedTypes.add(entry.type);\n        }\n\n        return;\n      }\n\n      entry = description.createEntry(ssrc.type);\n      description.setEntrySource(entry, ssrc.sourceGroups || ssrc.source);\n      description.setEntryPeerId(entry, peerId);\n\n      // if(TEST_OLD) {\n      //   description.bundleMids.push(entry.mid);\n      //   entry.setDirection('recvonly');\n      // } else {\n        ssrc.type === 'video' && entry.setEndpoint(ssrc.endpoint);\n        entry.createTransceiver(connection, {direction: 'recvonly'});\n      // }\n\n      modifiedTypes.add(entry.type);\n    });\n\n    /* if(TEST_OLD) {\n      this.setRemoteOffer({\n        connection,\n        description,\n        ssrcs\n      });\n    } else  */if(modifiedTypes.size) {\n      if(modifiedTypes.has('video')) {\n        connectionInstance.updateConstraints = true;\n      }\n\n      connectionInstance.negotiateThrottled();\n    }\n  }\n}\n","export default function getScreenConstraints(): DisplayMediaStreamConstraints {\n  return {\n   video: {\n      // @ts-ignore\n      // cursor: 'always',\n      width: {max: 1920},\n      height: {max: 1080},\n      frameRate: {max: 30}\n    },\n    audio: true\n  };\n}\n","'use strict'\n//@flow\n\n/** * * * * * * * * * *\n * Big Integer Library *\n * Created 2000        *\n * Leemon Baird        *\n * www.leemon.com      *\n * * * * * * * * * * * */\n\n////////////////////////////////////////////////////////////////////////////////////////\n// These functions are designed to avoid frequent dynamic memory allocation in the inner loop.\n// For most functions, if it needs a BigInt as a local variable it will actually use\n// a global, and will only allocate to it only when it's not the right size.  This ensures\n// that when a function is called repeatedly with same-sized parameters, it only allocates\n// memory on the first call.\n//\n// Note that for cryptographic purposes, the calls to Math.random() must\n// be replaced with calls to a better pseudorandom number generator.\n//\n// In the following, \"bigInt\" means a bigInt with at least one leading zero element,\n// and \"integer\" means a nonnegative integer less than radix.  In some cases, integer\n// can be negative.  Negative bigInts are 2s complement.\n//\n// The following functions do not modify their inputs.\n// Those returning a bigInt, string, or Array will dynamically allocate memory for that value.\n// Those returning a boolean will return the integer 0 (false) or 1 (true).\n// Those returning boolean or int will not allocate memory except possibly on the first\n// time they're called with a given parameter size.\n//\n// bigInt  add(x,y)               //return (x+y) for bigInts x and y.\n// bigInt  addInt(x,n)            //return (x+n) where x is a bigInt and n is an integer.\n// string  bigInt2str(x,base)     //return a string form of bigInt x in a given base, with 2 <= base <= 95\n// int     bitSize(x)             //return how many bits long the bigInt x is, not counting leading zeros\n// bigInt  dup(x)                 //return a copy of bigInt x\n// boolean equals(x,y)            //is the bigInt x equal to the bigint y?\n// boolean equalsInt(x,y)         //is bigint x equal to integer y?\n// bigInt  expand(x,n)            //return a copy of x with at least n elements, adding leading zeros if needed\n// Array   findPrimes(n)          //return array of all primes less than integer n\n// bigInt  GCD(x,y)               //return greatest common divisor of bigInts x and y (each with same number of elements).\n// boolean greater(x,y)           //is x>y?  (x and y are nonnegative bigInts)\n// boolean greaterShift(x,y,shift)//is (x <<(shift*bpe)) > y?\n// bigInt  int2bigInt(t,n,m)      //return a bigInt equal to integer t, with at least n bits and m array elements\n// bigInt  inverseMod(x,n)        //return (x**(-1) mod n) for bigInts x and n.  If no inverse exists, it returns null\n// int     inverseModInt(x,n)     //return x**(-1) mod n, for integers x and n.  Return 0 if there is no inverse\n// boolean isZero(x)              //is the bigInt x equal to zero?\n// boolean millerRabin(x,b)       //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is bigInt, 1<b<x)\n// boolean millerRabinInt(x,b)    //does one round of Miller-Rabin base integer b say that bigInt x is possibly prime? (b is int,    1<b<x)\n// bigInt  mod(x,n)               //return a new bigInt equal to (x mod n) for bigInts x and n.\n// int     modInt(x,n)            //return x mod n for bigInt x and integer n.\n// bigInt  mult(x,y)              //return x*y for bigInts x and y. This is faster when y<x.\n// bigInt  multMod(x,y,n)         //return (x*y mod n) for bigInts x,y,n.  For greater speed, let y<x.\n// boolean negative(x)            //is bigInt x negative?\n// bigInt  powMod(x,y,n)          //return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.  0**0=1. Faster for odd n.\n// bigInt  randBigInt(n,s)        //return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n// bigInt  randTruePrime(k)       //return a new, random, k-bit, true prime bigInt using Maurer's algorithm.\n// bigInt  randProbPrime(k)       //return a new, random, k-bit, probable prime bigInt (probability it's composite less than 2^-80).\n// bigInt  str2bigInt(s,b,n,m)    //return a bigInt for number represented in string s in base b with at least n bits and m array elements\n// bigInt  sub(x,y)               //return (x-y) for bigInts x and y.  Negative answers will be 2s complement\n// bigInt  trim(x,k)              //return a copy of x with exactly k leading zero elements\n//\n//\n// The following functions each have a non-underscored version, which most users should call instead.\n// These functions each write to a single parameter, and the caller is responsible for ensuring the array\n// passed in is large enough to hold the result.\n//\n// void    addInt_(x,n)          //do x=x+n where x is a bigInt and n is an integer\n// void    add_(x,y)             //do x=x+y for bigInts x and y\n// void    copy_(x,y)            //do x=y on bigInts x and y\n// void    copyInt_(x,n)         //do x=n on bigInt x and integer n\n// void    GCD_(x,y)             //set x to the greatest common divisor of bigInts x and y, (y is destroyed).  (This never overflows its array).\n// boolean inverseMod_(x,n)      //do x=x**(-1) mod n, for bigInts x and n. Returns 1 (0) if inverse does (doesn't) exist\n// void    mod_(x,n)             //do x=x mod n for bigInts x and n. (This never overflows its array).\n// void    mult_(x,y)            //do x=x*y for bigInts x and y.\n// void    multMod_(x,y,n)       //do x=x*y  mod n for bigInts x,y,n.\n// void    powMod_(x,y,n)        //do x=x**y mod n, where x,y,n are bigInts (n is odd) and ** is exponentiation.  0**0=1.\n// void    randBigInt_(b,n,s)    //do b = an n-bit random BigInt. if s=1, then nth bit (most significant bit) is set to 1. n>=1.\n// void    randTruePrime_(ans,k) //do ans = a random k-bit true random prime (not just probable prime) with 1 in the msb.\n// void    sub_(x,y)             //do x=x-y for bigInts x and y. Negative answers will be 2s complement.\n//\n// The following functions do NOT have a non-underscored version.\n// They each write a bigInt result to one or more parameters.  The caller is responsible for\n// ensuring the arrays passed in are large enough to hold the results.\n//\n// void addShift_(x,y,ys)       //do x=x+(y<<(ys*bpe))\n// void carry_(x)               //do carries and borrows so each element of the bigInt x fits in bpe bits.\n// void divide_(x,y,q,r)        //divide x by y giving quotient q and remainder r\n// int  divInt_(x,n)            //do x=floor(x/n) for bigInt x and integer n, and return the remainder. (This never overflows its array).\n// void eGCD_(x,y,d,a,b)        //sets a,b,d to positive bigInts such that d = GCD_(x,y) = a*x-b*y\n// void halve_(x)               //do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement.  (This never overflows its array).\n// void leftShift_(x,n)         //left shift bigInt x by n bits.  n<bpe.\n// void linComb_(x,y,a,b)       //do x=a*x+b*y for bigInts x and y and integers a and b\n// void linCombShift_(x,y,b,ys) //do x=x+b*(y<<(ys*bpe)) for bigInts x and y, and integers b and ys\n// void mont_(x,y,n,np)         //Montgomery multiplication (see comments where the function is defined)\n// void multInt_(x,n)           //do x=x*n where x is a bigInt and n is an integer.\n// void rightShift_(x,n)        //right shift bigInt x by n bits.  0 <= n < bpe. (This never overflows its array).\n// void squareMod_(x,n)         //do x=x*x  mod n for bigInts x,n\n// void subShift_(x,y,ys)       //do x=x-(y<<(ys*bpe)). Negative answers will be 2s complement.\n//\n// The following functions are based on algorithms from the _Handbook of Applied Cryptography_\n//    powMod_()           = algorithm 14.94, Montgomery exponentiation\n//    eGCD_,inverseMod_() = algorithm 14.61, Binary extended GCD_\n//    GCD_()              = algorothm 14.57, Lehmer's algorithm\n//    mont_()             = algorithm 14.36, Montgomery multiplication\n//    divide_()           = algorithm 14.20  Multiple-precision division\n//    squareMod_()        = algorithm 14.16  Multiple-precision squaring\n//    randTruePrime_()    = algorithm  4.62, Maurer's algorithm\n//    millerRabin()       = algorithm  4.24, Miller-Rabin algorithm\n//\n// Profiling shows:\n//     randTruePrime_() spends:\n//         10% of its time in calls to powMod_()\n//         85% of its time in calls to millerRabin()\n//     millerRabin() spends:\n//         99% of its time in calls to powMod_()   (always with a base of 2)\n//     powMod_() spends:\n//         94% of its time in calls to mont_()  (almost always with x==y)\n//\n// This suggests there are several ways to speed up this library slightly:\n//     - convert powMod_ to use a Montgomery form of k-ary window (or maybe a Montgomery form of sliding window)\n//         -- this should especially focus on being fast when raising 2 to a power mod n\n//     - convert randTruePrime_() to use a minimum r of 1/3 instead of 1/2 with the appropriate change to the test\n//     - tune the parameters in randTruePrime_(), including c, m, and recLimit\n//     - speed up the single loop in mont_() that takes 95% of the runtime, perhaps by reducing checking\n//       within the loop when all the parameters are the same length.\n//\n// There are several ideas that look like they wouldn't help much at all:\n//     - replacing trial division in randTruePrime_() with a sieve (that speeds up something taking almost no time anyway)\n//     - increase bpe from 15 to 30 (that would help if we had a 32*32->64 multiplier, but not with JavaScript's 32*32->32)\n//     - speeding up mont_(x,y,n,np) when x==y by doing a non-modular, non-Montgomery square\n//       followed by a Montgomery reduction.  The intermediate answer will be twice as long as x, so that\n//       method would be slower.  This is unfortunate because the code currently spends almost all of its time\n//       doing mont_(x,x,...), both for randTruePrime_() and powMod_().  A faster method for Montgomery squaring\n//       would have a large impact on the speed of randTruePrime_() and powMod_().  HAC has a couple of poorly-worded\n//       sentences that seem to imply it's faster to do a non-modular square followed by a single\n//       Montgomery reduction, but that's obviously wrong.\n////////////////////////////////////////////////////////////////////////////////////////\n\nexport type Bool = 1 | 0\n\n//globals\nexport var bpe = 0 //bits stored per array element\nvar mask = 0 //AND this with an array element to chop it down to bpe bits\nvar radix = mask + 1 //equals 2^bpe.  A single 1 bit to the left of the last bit of mask.\n\n//the digits for converting to different bases\nvar digitsStr =\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_=!@#$%^&*()[]{}|;:,.<>/?`~ \\\\\\'\"+-'\n\n//initialize the global variables\n\n//bpe=number of bits in the mantissa on this platform\nfor (bpe = 0; 1 << (bpe + 1) > 1 << bpe; bpe++);\nbpe >>= 1 //bpe=number of bits in one element of the array representing the bigInt\nmask = (1 << bpe) - 1 //AND the mask with an integer to get its bpe least significant bits\nradix = mask + 1 //2^bpe.  a single 1 bit to the left of the first bit of mask\nexport var one = int2bigInt(1, 1, 1) //constant used in powMod_()\nexport var zero = int2bigInt(0, 1, 1)\n\n//the following global variables are scratchpad memory to\n//reduce dynamic memory allocation in the inner loop\nvar t: number[] | number = new Array(0)\nvar ss = t //used in mult_()\nvar s0 = t //used in multMod_(), squareMod_()\n// var s1=t;    //used in powMod_(), multMod_(), squareMod_()\n// var s2=t;    //used in powMod_(), multMod_()\nvar s3 = t //used in powMod_()\nvar s4 = t,\n    s5 = t //used in mod_()\nvar s6 = t //used in bigInt2str()\nvar s7 = t //used in powMod_()\nvar T = t //used in GCD_()\nvar sa = t //used in mont_()\nvar mr_x1 = t,\n    mr_r = t,\n    mr_a = t, //used in millerRabin()\n    eg_v = t,\n    eg_u = t,\n    eg_A = t,\n    eg_B = t,\n    eg_C = t,\n    eg_D = t, //used in eGCD_(), inverseMod_()\n    //, md_q1=t, md_q2=t, md_q3=t, md_r=t, md_r1=t, md_r2=t, md_tt=t, //used in mod_()\n\n    primes = t,\n    pows = t,\n    s_i = t,\n    s_i2 = t,\n    s_R = t,\n    s_rm = t,\n    s_q = t,\n    s_n1 = t,\n    s_a = t,\n    s_r2 = t,\n    s_n = t,\n    s_b = t,\n    s_d = t,\n    s_x1 = t,\n    s_x2 = t,\n    s_aa = t, //used in randTruePrime_()\n    rpprb = t //used in randProbPrimeRounds() (which also uses \"primes\")\n\n////////////////////////////////////////////////////////////////////////////////////////\n\nvar k, buff\n\n/**\n * return array of all primes less than integer n\n *\n * @param {number} n\n * @returns {number[]}\n */\nexport function findPrimes(n: number): number[] {\n  var i, s, p, ans\n  s = new Array(n)\n  for (i = 0; i < n; i++) s[i] = 0\n  s[0] = 2\n  p = 0 //first p elements of s are primes, the rest are a sieve\n  for (; s[p] < n; ) {\n    //s[p] is the pth prime\n    for (\n      i = s[p] * s[p];\n      i < n;\n      i += s[p] //mark multiples of s[p]\n    )\n      s[i] = 1\n    p++\n    s[p] = s[p - 1] + 1\n    for (; s[p] < n && s[s[p]]; s[p]++); //find next prime (where s[p]==0)\n  }\n  ans = new Array(p)\n  for (i = 0; i < p; i++) ans[i] = s[i]\n  return ans\n}\n\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x is a bigInt, and b is an integer, with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number} b\n * @returns {(0 | 1)}\n */\nexport function millerRabinInt(x: number[], b: number): Bool {\n  if (mr_x1.length !== x.length) {\n    mr_x1 = dup(x)\n    mr_r = dup(x)\n    mr_a = dup(x)\n  }\n\n  copyInt_(mr_a, b)\n  return millerRabin(x, mr_a)\n}\n\n/**\n * does a single round of Miller-Rabin base b consider x to be a possible prime?\n *\n * x and b are bigInts with b<x\n *\n * @export\n * @param {number[]} x\n * @param {number[]} b\n * @returns {(0 | 1)}\n */\nexport function millerRabin(x: number[], b: number[]): Bool {\n  var i, j, k, s\n\n  if (mr_x1.length !== x.length) {\n    mr_x1 = dup(x)\n    mr_r = dup(x)\n    mr_a = dup(x)\n  }\n\n  copy_(mr_a, b)\n  copy_(mr_r, x)\n  copy_(mr_x1, x)\n\n  addInt_(mr_r, -1)\n  addInt_(mr_x1, -1)\n\n  //s=the highest power of two that divides mr_r\n  k = 0\n  for (i = 0; i < mr_r.length; i++)\n    for (j = 1; j < mask; j <<= 1)\n      if (x[i] & j) {\n        s = k < mr_r.length + bpe ? k : 0\n        i = mr_r.length\n        j = mask\n      } else k++\n\n  if (s) rightShift_(mr_r, s)\n\n  powMod_(mr_a, mr_r, x)\n\n  if (!equalsInt(mr_a, 1) && !equals(mr_a, mr_x1)) {\n    j = 1\n    //$off\n    while (j <= s - 1 && !equals(mr_a, mr_x1)) {\n      squareMod_(mr_a, x)\n      if (equalsInt(mr_a, 1)) {\n        return 0\n      }\n      j++\n    }\n    if (!equals(mr_a, mr_x1)) {\n      return 0\n    }\n  }\n  return 1\n}\n\n/**\n * returns how many bits long the bigInt is, not counting leading zeros.\n *\n * @param {number[]} x\n * @returns {number}\n */\nexport function bitSize(x: number[]): number {\n  var j, z, w\n  for (j = x.length - 1; x[j] == 0 && j > 0; j--);\n  for (z = 0, w = x[j]; w; w >>= 1, z++);\n  z += bpe * j\n  return z\n}\n\n/**\n * return a copy of x with at least n elements, adding leading zeros if needed\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\nexport function expand(x: number[], n: number): number[] {\n  var ans = int2bigInt(0, (x.length > n ? x.length : n) * bpe, 0)\n  copy_(ans, x)\n  return ans\n}\n\n/**\n * return a k-bit true random prime using Maurer's algorithm.\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\n/* export function randTruePrime(k: number): number[] {\n  var ans = int2bigInt(0, k, 0)\n  randTruePrime_(ans, k)\n  return trim(ans, 1)\n} */\n\n/**\n * return a k-bit random probable prime with probability of error < 2^-80\n *\n * @export\n * @param {number} k\n * @returns {number[]}\n */\n/* export function randProbPrime(k: number): number[] {\n  if (k >= 600) return randProbPrimeRounds(k, 2) //numbers from HAC table 4.3\n  if (k >= 550) return randProbPrimeRounds(k, 4)\n  if (k >= 500) return randProbPrimeRounds(k, 5)\n  if (k >= 400) return randProbPrimeRounds(k, 6)\n  if (k >= 350) return randProbPrimeRounds(k, 7)\n  if (k >= 300) return randProbPrimeRounds(k, 9)\n  if (k >= 250) return randProbPrimeRounds(k, 12) //numbers from HAC table 4.4\n  if (k >= 200) return randProbPrimeRounds(k, 15)\n  if (k >= 150) return randProbPrimeRounds(k, 18)\n  if (k >= 100) return randProbPrimeRounds(k, 27)\n  return randProbPrimeRounds(k, 40) //number from HAC remark 4.26 (only an estimate)\n} */\n\n/**\n * return a k-bit probable random prime using n rounds of Miller Rabin\n * (after trial division with small primes)\n *\n * @export\n * @param {number} k\n * @param {number} n\n * @returns {number[]}\n */\n/* export function randProbPrimeRounds(k: number, n: number): number[] {\n  var ans, i, divisible, B\n  B = 30000 //B is largest prime to use in trial division\n  ans = int2bigInt(0, k, 0)\n\n  //optimization: try larger and smaller B to find the best limit.\n\n  if (primes.length === 0) primes = findPrimes(30000) //check for divisibility by primes <=30000\n\n  if (rpprb.length !== ans.length) rpprb = dup(ans)\n\n  for (;;) {\n    //keep trying random values for ans until one appears to be prime\n    //optimization: pick a random number times L=2*3*5*...*p, plus a\n    //   random element of the list of all numbers in [0,L) not divisible by any prime up to p.\n    //   This can reduce the amount of random number generation.\n\n    randBigInt_(ans, k, 0) //ans = a random odd number to check\n    ans[0] |= 1\n    divisible = 0\n\n    //check ans for divisibility by small primes up to B\n    for (i = 0; i < primes.length && primes[i] <= B; i++)\n      if (modInt(ans, primes[i]) === 0 && !equalsInt(ans, primes[i])) {\n        divisible = 1\n        break\n      }\n\n    //optimization: change millerRabin so the base can be bigger than the number being checked, then eliminate the while here.\n\n    //do n rounds of Miller Rabin, with random bases less than ans\n    for (i = 0; i < n && !divisible; i++) {\n      randBigInt_(rpprb, k, 0)\n      while (\n        !greater(ans, rpprb) //pick a random rpprb that's < ans\n      )\n        randBigInt_(rpprb, k, 0)\n      if (!millerRabin(ans, rpprb)) divisible = 1\n    }\n\n    if (!divisible) return ans\n  }\n} */\n\n/**\n * return a new bigInt equal to (x mod n) for bigInts x and n.\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function mod(x: number[], n: number[]): number[] {\n  var ans = dup(x)\n  mod_(ans, n)\n  return trim(ans, 1)\n}\n\n/**\n * return (x+n) where x is a bigInt and n is an integer.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number[]}\n */\n/* export function addInt(x: number[], n: number): number[] {\n  var ans = expand(x, x.length + 1)\n  addInt_(ans, n)\n  return trim(ans, 1)\n} */\n\n/**\n * return x*y for bigInts x and y. This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function mult(x: number[], y: number[]): number[] {\n  var ans = expand(x, x.length + y.length)\n  mult_(ans, y)\n  return trim(ans, 1)\n}\n\n/**\n * return (x**y mod n) where x,y,n are bigInts and ** is exponentiation.\n *\n * 0**0=1.\n *\n * Faster for odd n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function powMod(x: number[], y: number[], n: number[]): number[] {\n  var ans = expand(x, n.length)\n  powMod_(\n    //this should work without the trim, but doesn't\n    ans,\n    trim(y, 2),\n    trim(n, 2),\n  )\n  return trim(ans, 1)\n}\n\n/**\n * Simple pow with no optimizations (in 40x times slower than jsbn's pow)\n * @param x bigInt\n * @param e\n */\nexport function pow(x: number[], e: number) {\n  let ans = dup(x);\n  e -= 1;\n  for(let i = 0; i < e; ++i) {\n    ans = mult(ans, x);\n  }\n  return trim(ans, 1);\n}\n\n/**\n * return (x-y) for bigInts x and y\n *\n * Negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function sub(x: number[], y: number[]): number[] {\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1)\n  sub_(ans, y)\n  return trim(ans, 1)\n}\n\n/**\n * return (x+y) for bigInts x and y\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function add(x: number[], y: number[]): number[] {\n  var ans = expand(x, x.length > y.length ? x.length + 1 : y.length + 1)\n  add_(ans, y)\n  return trim(ans, 1)\n}\n\n/**\n * return (x**(-1) mod n) for bigInts x and n.\n *\n * If no inverse exists, it returns null\n *\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(number[] | null)}\n */\n/* export function inverseMod(x: number[], n: number[]): number[] | null {\n  var ans = expand(x, n.length)\n  var s = inverseMod_(ans, n)\n  return s ? trim(ans, 1) : null\n} */\n\n/**\n * return (x*y mod n) for bigInts x,y,n.\n *\n * For greater speed, let y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @returns {number[]}\n */\nexport function multMod(x: number[], y: number[], n: number[]): number[] {\n  var ans = expand(x, n.length)\n  multMod_(ans, y, n)\n  return trim(ans, 1)\n}\n\n/**\n * generate a k-bit true random prime using Maurer's algorithm, and put it into ans.\n *\n * The bigInt ans must be large enough to hold it.\n *\n * @export\n * @param {number[]} ans\n * @param {number} k\n * @return {void}\n */\n/* export function randTruePrime_(ans: number[], k: number): void {\n  var c, m, pm, dd, j, r, B, divisible, z, zz, recSize\n  var w\n  if (primes.length == 0) primes = findPrimes(30000) //check for divisibility by primes <=30000\n\n  if (pows.length == 0) {\n    pows = new Array(512)\n    for (j = 0; j < 512; j++) {\n      pows[j] = Math.pow(2, j / 511 - 1)\n    }\n  }\n\n  //c and m should be tuned for a particular machine and value of k, to maximize speed\n  c = 0.1 //c=0.1 in HAC\n  m = 20 //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n  var recLimit = 20 //stop recursion when k <=recLimit.  Must have recLimit >= 2\n\n  if (s_i2.length != ans.length) {\n    s_i2 = dup(ans)\n    s_R = dup(ans)\n    s_n1 = dup(ans)\n    s_r2 = dup(ans)\n    s_d = dup(ans)\n    s_x1 = dup(ans) //TODO Seems like a bug in eslint, reports as unused\n    s_x2 = dup(ans)\n    s_b = dup(ans)\n    s_n = dup(ans)\n    s_i = dup(ans)\n    s_rm = dup(ans)\n    s_q = dup(ans)\n    s_a = dup(ans)\n    s_aa = dup(ans)\n  }\n\n  if (k <= recLimit) {\n    //generate small random primes by trial division up to its square root\n    pm = (1 << ((k + 2) >> 1)) - 1 //pm is binary number with all ones, just over sqrt(2^k)\n    copyInt_(ans, 0)\n    for (dd = 1; dd; ) {\n      dd = 0\n      ans[0] = 1 | (1 << (k - 1)) | Math.floor(Math.random() * (1 << k)) //random, k-bit, odd integer, with msb 1\n      for (j = 1; j < primes.length && (primes[j] & pm) == primes[j]; j++) {\n        //trial division by all primes 3...sqrt(2^k)\n        if (0 == ans[0] % primes[j]) {\n          dd = 1\n          break\n        }\n      }\n    }\n    carry_(ans)\n    return\n  }\n\n  B = c * k * k //try small primes up to B (or all the primes[] array if the largest is less than B).\n  if (k > 2 * m)\n    //generate this k-bit number by first recursively generating a number that has between k/2 and k-m bits\n    for (r = 1; k - k * r <= m; ) r = pows[Math.floor(Math.random() * 512)] //r=Math.pow(2,Math.random()-1);\n  else r = 0.5\n\n  //simulation suggests the more complex algorithm using r=.333 is only slightly faster.\n\n  recSize = Math.floor(r * k) + 1\n\n  randTruePrime_(s_q, recSize)\n  copyInt_(s_i2, 0)\n  s_i2[Math.floor((k - 2) / bpe)] |= 1 << ((k - 2) % bpe) //s_i2=2^(k-2)\n  divide_(s_i2, s_q, s_i, s_rm) //s_i=floor((2^(k-1))/(2q))\n\n  z = bitSize(s_i)\n\n  for (;;) {\n    for (;;) {\n      //generate z-bit numbers until one falls in the range [0,s_i-1]\n      randBigInt_(s_R, z, 0)\n      if (greater(s_i, s_R)) break\n    } //now s_R is in the range [0,s_i-1]\n    addInt_(s_R, 1) //now s_R is in the range [1,s_i]\n    add_(s_R, s_i) //now s_R is in the range [s_i+1,2*s_i]\n\n    copy_(s_n, s_q)\n    mult_(s_n, s_R)\n    multInt_(s_n, 2)\n    addInt_(s_n, 1) //s_n=2*s_R*s_q+1\n\n    copy_(s_r2, s_R)\n    multInt_(s_r2, 2) //s_r2=2*s_R\n\n    //check s_n for divisibility by small primes up to B\n    for (divisible = 0, j = 0; j < primes.length && primes[j] < B; j++)\n      if (modInt(s_n, primes[j]) == 0 && !equalsInt(s_n, primes[j])) {\n        divisible = 1\n        break\n      }\n\n    if (!divisible)\n      if (!millerRabinInt(s_n, 2))\n        //if it passes small primes check, then try a single Miller-Rabin base 2\n        //this line represents 75% of the total runtime for randTruePrime_\n        divisible = 1\n\n    if (!divisible) {\n      //if it passes that test, continue checking s_n\n      addInt_(s_n, -3)\n      for (j = s_n.length - 1; s_n[j] == 0 && j > 0; j--); //strip leading zeros\n      for (zz = 0, w = s_n[j]; w; w >>= 1, zz++);\n      zz += bpe * j //zz=number of bits in s_n, ignoring leading zeros\n      for (;;) {\n        //generate z-bit numbers until one falls in the range [0,s_n-1]\n        randBigInt_(s_a, zz, 0)\n        if (greater(s_n, s_a)) break\n      } //now s_a is in the range [0,s_n-1]\n      addInt_(s_n, 3) //now s_a is in the range [0,s_n-4]\n      addInt_(s_a, 2) //now s_a is in the range [2,s_n-2]\n      copy_(s_b, s_a)\n      copy_(s_n1, s_n)\n      addInt_(s_n1, -1)\n      powMod_(s_b, s_n1, s_n) //s_b=s_a^(s_n-1) modulo s_n\n      addInt_(s_b, -1)\n      if (isZero(s_b)) {\n        copy_(s_b, s_a)\n        powMod_(s_b, s_r2, s_n)\n        addInt_(s_b, -1)\n        copy_(s_aa, s_n)\n        copy_(s_d, s_b)\n        GCD_(s_d, s_n) //if s_b and s_n are relatively prime, then s_n is a prime\n        if (equalsInt(s_d, 1)) {\n          copy_(ans, s_aa)\n          return //if we've made it this far, then s_n is absolutely guaranteed to be prime\n        }\n      }\n    }\n  }\n} */\n\n/**\n * Return an n-bit random BigInt (n>=1).  If s=1, then the most significant of those n bits is set to 1.\n *\n * @export\n * @param {number} n\n * @param {number} s\n * @returns {number[]}\n */\n/* export function randBigInt(n: number, s: number): number[] {\n  var a, b\n  a = Math.floor((n - 1) / bpe) + 2 //# array elements to hold the BigInt with a leading 0 element\n  b = int2bigInt(0, 0, a)\n  randBigInt_(b, n, s)\n  return b\n} */\n\n/**\n * Set b to an n-bit random BigInt.  If s=1, then the most significant of those n bits is set to 1.\n *\n * Array b must be big enough to hold the result. Must have n>=1\n *\n * @export\n * @param {number[]} b\n * @param {number} n\n * @param {number} s\n * @return {void}\n */\n/* export function randBigInt_(b: number[], n: number, s: number): void {\n  var i, a\n  for (i = 0; i < b.length; i++) b[i] = 0\n  a = Math.floor((n - 1) / bpe) + 1 //# array elements to hold the BigInt\n  for (i = 0; i < a; i++) {\n    b[i] = Math.floor(Math.random() * (1 << (bpe - 1)))\n  }\n  b[a - 1] &= (2 << ((n - 1) % bpe)) - 1\n  if (s == 1) b[a - 1] |= 1 << ((n - 1) % bpe)\n} */\n\n/**\n * Return the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {number[]}\n */\nexport function GCD(x: number[], y: number[]): number[] {\n  var xc, yc\n  xc = dup(x)\n  yc = dup(y)\n  GCD_(xc, yc)\n  return xc\n}\n\n/**\n * set x to the greatest common divisor of bigInts x and y (each with same number of elements).\n *\n * y is destroyed.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n */\nexport function GCD_(x: number[], y: number[]): void {\n  var i: number, xp: number, yp: number, A: number, B, C: number, D: number, q, sing\n  var qp\n  if (T.length !== x.length) T = dup(x)\n\n  sing = 1\n  while (sing) {\n    //while y has nonzero elements other than y[0]\n    sing = 0\n    for (\n      i = 1;\n      i < y.length;\n      i++ //check if y has nonzero elements other than 0\n    )\n      if (y[i]) {\n        sing = 1\n        break\n      }\n    if (!sing) break //quit when y all zero elements except possibly y[0]\n\n    for (i = x.length; !x[i] && i >= 0; i--); //find most significant element of x\n    xp = x[i]\n    yp = y[i]\n    A = 1\n    B = 0\n    C = 0\n    D = 1\n    while (yp + C && yp + D) {\n      q = Math.floor((xp + A) / (yp + C))\n      qp = Math.floor((xp + B) / (yp + D))\n      if (q != qp) break\n      t = A - q * C\n      A = C\n      C = t //  do (A,B,xp, C,D,yp) = (C,D,yp, A,B,xp) - q*(0,0,0, C,D,yp)\n      t = B - q * D\n      B = D\n      D = t\n      t = xp - q * yp\n      xp = yp\n      yp = t\n    }\n    if (B) {\n      copy_(T, x)\n      linComb_(x, y, A, B) //x=A*x+B*y\n      linComb_(y, T, D, C) //y=D*y+C*T\n    } else {\n      mod_(x, y)\n      copy_(T, x)\n      copy_(x, y)\n      copy_(y, T)\n    }\n  }\n  if (y[0] === 0) return\n  t = modInt(x, y[0])\n  copyInt_(x, y[0])\n  y[0] = t\n  while (y[0]) {\n    x[0] %= y[0]\n    t = x[0]\n    x[0] = y[0]\n    y[0] = t\n  }\n}\n\n/**\n * do x=x**(-1) mod n, for bigInts x and n.\n *\n * If no inverse exists, it sets x to zero and returns 0, else it returns 1.\n * The x array must be at least as large as the n array.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @returns {(0 | 1)}\n */\n/* export function inverseMod_(x: number[], n: number[]): Bool {\n  var k = 1 + 2 * Math.max(x.length, n.length)\n\n  if (!(x[0] & 1) && !(n[0] & 1)) {\n    //if both inputs are even, then inverse doesn't exist\n    copyInt_(x, 0)\n    return 0\n  }\n\n  if (eg_u.length != k) {\n    eg_u = new Array(k)\n    eg_v = new Array(k)\n    eg_A = new Array(k)\n    eg_B = new Array(k)\n    eg_C = new Array(k)\n    eg_D = new Array(k)\n  }\n\n  copy_(eg_u, x)\n  copy_(eg_v, n)\n  copyInt_(eg_A, 1)\n  copyInt_(eg_B, 0)\n  copyInt_(eg_C, 0)\n  copyInt_(eg_D, 1)\n  for (;;) {\n    while (!(eg_u[0] & 1)) {\n      //while eg_u is even\n      halve_(eg_u)\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n        //if eg_A==eg_B==0 mod 2\n        halve_(eg_A)\n        halve_(eg_B)\n      } else {\n        add_(eg_A, n)\n        halve_(eg_A)\n        sub_(eg_B, x)\n        halve_(eg_B)\n      }\n    }\n\n    while (!(eg_v[0] & 1)) {\n      //while eg_v is even\n      halve_(eg_v)\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n        //if eg_C==eg_D==0 mod 2\n        halve_(eg_C)\n        halve_(eg_D)\n      } else {\n        add_(eg_C, n)\n        halve_(eg_C)\n        sub_(eg_D, x)\n        halve_(eg_D)\n      }\n    }\n\n    if (!greater(eg_v, eg_u)) {\n      //eg_v <= eg_u\n      sub_(eg_u, eg_v)\n      sub_(eg_A, eg_C)\n      sub_(eg_B, eg_D)\n    } else {\n      //eg_v > eg_u\n      sub_(eg_v, eg_u)\n      sub_(eg_C, eg_A)\n      sub_(eg_D, eg_B)\n    }\n\n    if (equalsInt(eg_u, 0)) {\n      while (\n        negative(eg_C) //make sure answer is nonnegative\n      )\n        add_(eg_C, n)\n      copy_(x, eg_C)\n\n      if (!equalsInt(eg_v, 1)) {\n        //if GCD_(x,n)!=1, then there is no inverse\n        copyInt_(x, 0)\n        return 0\n      }\n      return 1\n    }\n  }\n} */\n\n/**\n * return x**(-1) mod n, for integers x and n.\n *\n * Return 0 if there is no inverse\n *\n * @param {number} x\n * @param {number} n\n * @returns {number}\n */\nexport function inverseModInt(x: number, n: number): number {\n  var a = 1,\n      b = 0,\n      t\n  for (;;) {\n    if (x === 1) return a\n    if (x === 0) return 0\n    b -= a * Math.floor(n / x)\n    //$off\n    n %= x\n\n    if (n === 1) return b //to avoid negatives, change this b to n-b, and each -= to +=\n    if (n === 0) return 0\n    a -= b * Math.floor(x / n)\n    //$off\n    x %= n\n  }\n  /*::\n  declare var never: empty\n  return never\n  */\n}\n\n//this deprecated function is for backward compatibility only.\n/* function inverseModInt_(x: number, n: number) {\n  return inverseModInt(x, n)\n} */\n\n/**\n * Given positive bigInts x and y, change the bigints v, a, and b to positive bigInts such that:\n *\n *      v = GCD_(x,y) = a*x-b*y\n *\n * The bigInts v, a, b, must have exactly as many elements as the larger of x and y.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} v\n * @param {number[]} a\n * @param {number[]} b\n * @return {void}\n */\nexport function eGCD_(\n  x: number[],\n  y: number[],\n  v: number[],\n  a: number[],\n  b: number[],\n): void {\n  var g = 0\n  var k = Math.max(x.length, y.length)\n  if (eg_u.length != k) {\n    eg_u = new Array(k)\n    eg_A = new Array(k)\n    eg_B = new Array(k)\n    eg_C = new Array(k)\n    eg_D = new Array(k)\n  }\n  while (!(x[0] & 1) && !(y[0] & 1)) {\n    //while x and y both even\n    halve_(x)\n    halve_(y)\n    g++\n  }\n  copy_(eg_u, x)\n  copy_(v, y)\n  copyInt_(eg_A, 1)\n  copyInt_(eg_B, 0)\n  copyInt_(eg_C, 0)\n  copyInt_(eg_D, 1)\n  for (;;) {\n    while (!(eg_u[0] & 1)) {\n      //while u is even\n      halve_(eg_u)\n      if (!(eg_A[0] & 1) && !(eg_B[0] & 1)) {\n        //if A==B==0 mod 2\n        halve_(eg_A)\n        halve_(eg_B)\n      } else {\n        add_(eg_A, y)\n        halve_(eg_A)\n        sub_(eg_B, x)\n        halve_(eg_B)\n      }\n    }\n\n    while (!(v[0] & 1)) {\n      //while v is even\n      halve_(v)\n      if (!(eg_C[0] & 1) && !(eg_D[0] & 1)) {\n        //if C==D==0 mod 2\n        halve_(eg_C)\n        halve_(eg_D)\n      } else {\n        add_(eg_C, y)\n        halve_(eg_C)\n        sub_(eg_D, x)\n        halve_(eg_D)\n      }\n    }\n\n    if (!greater(v, eg_u)) {\n      //v<=u\n      sub_(eg_u, v)\n      sub_(eg_A, eg_C)\n      sub_(eg_B, eg_D)\n    } else {\n      //v>u\n      sub_(v, eg_u)\n      sub_(eg_C, eg_A)\n      sub_(eg_D, eg_B)\n    }\n    if (equalsInt(eg_u, 0)) {\n      while (negative(eg_C)) {\n        //make sure a (C) is nonnegative\n        add_(eg_C, y)\n        sub_(eg_D, x)\n      }\n      multInt_(eg_D, -1) ///make sure b (D) is nonnegative\n      copy_(a, eg_C)\n      copy_(b, eg_D)\n      leftShift_(v, g)\n      return\n    }\n  }\n}\n\n/**\n * is bigInt x negative?\n *\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\nexport function negative(x: number[]) {\n  //TODO Flow Bool type inference\n  return (x[x.length - 1] >> (bpe - 1)) & 1\n}\n\n/**\n * is (x << (shift*bpe)) > y?\n *\n * x and y are nonnegative bigInts\n * shift is a nonnegative integer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} shift\n * @returns {(1 | 0)}\n */\nexport function greaterShift(x: number[], y: number[], shift: number): Bool {\n  var i,\n      kx = x.length,\n      ky = y.length\n  k = kx + shift < ky ? kx + shift : ky\n  for (i = ky - 1 - shift; i < kx && i >= 0; i++) if (x[i] > 0) return 1 //if there are nonzeros in x to the left of the first column of y, then x is bigger\n  for (i = kx - 1 + shift; i < ky; i++) if (y[i] > 0) return 0 //if there are nonzeros in y to the left of the first column of x, then x is not bigger\n  for (i = k - 1; i >= shift; i--)\n    if (x[i - shift] > y[i]) return 1\n    else if (x[i - shift] < y[i]) return 0\n  return 0\n}\n\n/**\n * is x > y?\n *\n * x and y both nonnegative\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\nexport function greater(x: number[], y: number[]): Bool {\n  var i\n  var k = x.length < y.length ? x.length : y.length\n\n  for (i = x.length; i < y.length; i++) if (y[i]) return 0 //y has more digits\n\n  for (i = y.length; i < x.length; i++) if (x[i]) return 1 //x has more digits\n\n  for (i = k - 1; i >= 0; i--)\n    if (x[i] > y[i]) return 1\n    else if (x[i] < y[i]) return 0\n  return 0\n}\n\n/**\n * divide x by y giving quotient q and remainder r.\n *\n *     q = floor(x/y)\n *     r = x mod y\n *\n * All 4 are bigints.\n *\n * * x must have at least one leading zero element.\n * * y must be nonzero.\n * * q and r must be arrays that are exactly the same length as x. (Or q can have more).\n * * Must have x.length >= y.length >= 2.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} q\n * @param {number[]} r\n * @return {void}\n */\nexport function divide_(\n  x: number[],\n  y: number[],\n  q: number[],\n  r: number[],\n): void {\n  var kx, ky\n  var i, j, y1, y2, c, a, b\n  copy_(r, x)\n  for (ky = y.length; y[ky - 1] === 0; ky--); //ky is number of elements in y, not including leading zeros\n\n  //normalize: ensure the most significant element of y has its highest bit set\n  b = y[ky - 1]\n  for (a = 0; b; a++) b >>= 1\n  a = bpe - a //a is how many bits to shift so that the high order bit of y is leftmost in its array element\n  leftShift_(y, a) //multiply both by 1<<a now, then divide both by that at the end\n  leftShift_(r, a)\n\n  //Rob Visser discovered a bug: the following line was originally just before the normalization.\n  for (kx = r.length; r[kx - 1] === 0 && kx > ky; kx--); //kx is number of elements in normalized x, not including leading zeros\n\n  copyInt_(q, 0) // q=0\n  while (!greaterShift(y, r, kx - ky)) {\n    // while (leftShift_(y,kx-ky) <= r) {\n    subShift_(r, y, kx - ky) //   r=r-leftShift_(y,kx-ky)\n    q[kx - ky]++ //   q[kx-ky]++;\n  } // }\n\n  for (i = kx - 1; i >= ky; i--) {\n    if (r[i] == y[ky - 1]) q[i - ky] = mask\n    else q[i - ky] = Math.floor((r[i] * radix + r[i - 1]) / y[ky - 1])\n\n    //The following for(;;) loop is equivalent to the commented while loop,\n    //except that the uncommented version avoids overflow.\n    //The commented loop comes from HAC, which assumes r[-1]==y[-1]==0\n    //  while (q[i-ky]*(y[ky-1]*radix+y[ky-2]) > r[i]*radix*radix+r[i-1]*radix+r[i-2])\n    //    q[i-ky]--;\n    for (;;) {\n      y2 = (ky > 1 ? y[ky - 2] : 0) * q[i - ky]\n      c = y2 >> bpe\n      y2 = y2 & mask\n      y1 = c + q[i - ky] * y[ky - 1]\n      c = y1 >> bpe\n      y1 = y1 & mask\n\n      if (\n        c == r[i]\n          ? y1 == r[i - 1] ? y2 > (i > 1 ? r[i - 2] : 0) : y1 > r[i - 1]\n          : c > r[i]\n      )\n        q[i - ky]--\n      else break\n    }\n\n    linCombShift_(r, y, -q[i - ky], i - ky) //r=r-q[i-ky]*leftShift_(y,i-ky)\n    if (negative(r)) {\n      addShift_(r, y, i - ky) //r=r+leftShift_(y,i-ky)\n      q[i - ky]--\n    }\n  }\n\n  rightShift_(y, a) //undo the normalization step\n  rightShift_(r, a) //undo the normalization step\n}\n\n/**\n * do carries and borrows so each element of the bigInt x fits in bpe bits.\n *\n * @param {number[]} x\n */\nexport function carry_(x: number[]): void {\n  var i, k, c, b\n  k = x.length\n  c = 0\n  for (i = 0; i < k; i++) {\n    c += x[i]\n    b = 0\n    if (c < 0) {\n      b = -(c >> bpe)\n      c += b * radix\n    }\n    x[i] = c & mask\n    c = (c >> bpe) - b\n  }\n}\n\n/**\n * return x mod n for bigInt x and integer n.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {number}\n */\nexport function modInt(x: number[], n: number): number {\n  var i,\n      c = 0\n  for (i = x.length - 1; i >= 0; i--) c = (c * radix + x[i]) % n\n  return c\n}\n\n/**\n * convert the integer t into a bigInt with at least the given number of bits.\n * the returned array stores the bigInt in bpe-bit chunks, little endian (buff[0] is least significant word)\n * Pad the array with leading zeros so that it has at least minSize elements.\n *\n * There will always be at least one leading 0 element.\n *\n * @export\n * @param {number} t\n * @param {number} bits\n * @param {number} minSize\n * @returns {number[]}\n */\nexport function int2bigInt(t: number, bits: number, minSize: number): number[] {\n  var i, k\n  k = Math.ceil(bits / bpe) + 1\n  k = minSize > k ? minSize : k\n  var buff = new Array(k)\n  copyInt_(buff, t)\n  return buff\n}\n\n/**\n * return the bigInt given a string representation in a given base.\n * Pad the array with leading zeros so that it has at least minSize elements.\n * If base=-1, then it reads in a space-separated list of array elements in decimal.\n *\n * The array will always have at least one leading zero, unless base=-1.\n *\n * @export\n * @param {string} s\n * @param {number} base\n * @param {number} [minSize]\n * @returns {number[]}\n */\nexport function str2bigInt(\n  s: string,\n  base: number,\n  minSize?: number,\n): number[] {\n  var d, i, x, y, kk\n  var k = s.length\n  if (base === -1) {\n    //comma-separated list of array elements in decimal\n    x = new Array(0)\n    for (;;) {\n      y = new Array(x.length + 1)\n      for (i = 0; i < x.length; i++) y[i + 1] = x[i]\n      y[0] = parseInt(s, 10) //TODO PERF Should we replace that with ~~ (not not)? https://jsperf.com/number-vs-parseint-vs-plus/7\n      x = y\n      d = s.indexOf(',', 0)\n      if (d < 1) break\n      //$off\n      s = s.substring(d + 1)\n      if (s.length == 0) break\n    }\n    //$off\n    if (x.length < minSize) {\n      //$off\n      y = new Array(minSize)\n      copy_(y, x)\n      return y\n    }\n    return x\n  }\n\n  x = int2bigInt(0, base * k, 0)\n  for (i = 0; i < k; i++) {\n    d = digitsStr.indexOf(s.substring(i, i + 1), 0)\n    if (base <= 36 && d >= 36)\n      //convert lowercase to uppercase if base<=36\n      d -= 26\n    if (d >= base || d < 0) {\n      //stop at first illegal character\n      break\n    }\n    multInt_(x, base)\n    addInt_(x, d)\n  }\n\n  for (k = x.length; k > 0 && !x[k - 1]; k--); //strip off leading zeros\n  //$off\n  k = minSize > k + 1 ? minSize : k + 1\n  //$off\n  y = new Array(k)\n  //$off\n  kk = k < x.length ? k : x.length\n  //$off\n  for (i = 0; i < kk; i++) y[i] = x[i]\n  //$off\n  for (; i < k; i++) y[i] = 0\n  return y\n}\n\n//return the bigInt given a string representation in a given base.\n//Pad the array with leading zeros so that it has at least minSize elements.\n//If base=-1, then it reads in a space-separated list of array elements in decimal.\n//The array will always have at least one leading zero, unless base=-1.\n// function str2bigInt(s,b,minSize) {\n//   var d, i, j, base, str, x, y, kk;\n//   if (typeof b === 'string') {\n//           base = b.length;\n//           str = b;\n//   } else {\n//           base = b;\n//           str = digitsStr;\n//   }\n//   var k=s.length;\n//   if (base==-1) { //comma-separated list of array elements in decimal\n//       x=new Array(0);\n//       for (;;) {\n//           y=new Array(x.length+1);\n//           for (i=0;i<x.length;i++)\n//               y[i+1]=x[i];\n//           y[0]=parseInt(s,10);\n//           x=y;\n//           d=s.indexOf(',',0);\n//           if (d<1)\n//               break;\n//           s=s.substring(d+1);\n//           if (s.length==0)\n//               break;\n//       }\n//       if (x.length<minSize) {\n//           y=new Array(minSize);\n//           copy_(y,x);\n//           return y;\n//       }\n//       return x;\n//   }\n\n//   x=int2bigInt(0,base*k,0);\n// for (i=0;i<k;i++) {\n//   d=str.indexOf(s.substring(i,i+1),0);\n//   if (base<=36 && d>=36) { //convert lowercase to uppercase if base<=36\n//       d-=26;\n//   }\n//   if (d>=base || d<0) {   //ignore illegal characters\n//   continue;\n//       }\n//       multInt_(x,base);\n//       addInt_(x,d);\n//   }\n\n//   for (k=x.length;k>0 && !x[k-1];k--); //strip off leading zeros\n//   k=minSize>k+1 ? minSize : k+1;\n//   y=new Array(k);\n//   kk=k<x.length ? k : x.length;\n//   for (i=0;i<kk;i++)\n//       y[i]=x[i];\n//   for (;i<k;i++)\n//       y[i]=0;\n//   return y;\n// }\n\n/**\n * is bigint x equal to integer y?\n *\n * y must have less than bpe bits\n *\n * @export\n * @param {number[]} x\n * @param {number} y\n * @returns {(1 | 0)}\n */\nexport function equalsInt(x: number[], y: number): Bool {\n  var i\n  if (x[0] != y) return 0\n  for (i = 1; i < x.length; i++) if (x[i]) return 0\n  return 1\n}\n\n/**\n * are bigints x and y equal?\n *\n * this works even if x and y are different lengths and have arbitrarily many leading zeros\n *\n * @param {number[]} x\n * @param {number[]} y\n * @returns {(1 | 0)}\n */\nexport function equals(x: number[], y: number[]): Bool {\n  var i\n  var k = x.length < y.length ? x.length : y.length\n  for (i = 0; i < k; i++) if (x[i] !== y[i]) return 0\n  if (x.length > y.length) {\n    for (; i < x.length; i++) if (x[i]) return 0\n  } else {\n    for (; i < y.length; i++) if (y[i]) return 0\n  }\n  return 1\n}\n\n/**\n * is the bigInt x equal to zero?\n *\n * @export\n * @param {number[]} x\n * @returns {(1 | 0)}\n */\nexport function isZero(x: number[]): Bool {\n  var i\n  for (i = 0; i < x.length; i++) if (x[i]) return 0\n  return 1\n}\n\n/**\n * Convert a bigInt into a string in a given base, from base 2 up to base 95.\n *\n * Base -1 prints the contents of the array representing the number.\n *\n * @export\n * @param {number[]} x\n * @param {number} base\n * @returns {string}\n */\nexport function bigInt2str(x: number[], base: number): string {\n  var i,\n      t,\n      s = ''\n\n  if (s6.length !== x.length) s6 = dup(x)\n  else copy_(s6, x)\n\n  if (base === -1) {\n    //return the list of array contents\n    for (i = x.length - 1; i > 0; i--) s += x[i] + ','\n    s += x[0]\n  } else {\n    //return it in the given base\n    while (!isZero(s6)) {\n      t = divInt_(s6, base) //t=s6 % base; s6=floor(s6/base);\n      s = digitsStr.substring(t, t + 1) + s\n    }\n  }\n  if (s.length === 0) s = '0'\n  return s\n}\n\n/**\n * Convert a bigInt into bytes\n * @param x bigInt\n * @param littleEndian byte order by default\n */\nexport function bigInt2bytes(x: number[], littleEndian = true) {\n  if(s6.length !== x.length) s6 = dup(x);\n  else copy_(s6, x);\n\n  const out: number[] = [];\n\n  //console.log('bigInt2bytes');\n  while(!isZero(s6)) {\n    t = divInt_(s6, 256); //t=s6 % base; s6=floor(s6/base);\n    out.push(t);\n    //console.log('bigInt2bytes', t);\n  }\n\n  if(littleEndian) {\n    out.reverse();\n  }\n\n  //console.log('bigInt2bytes', out);\n\n  return out;\n}\n\n/**\n * Compare two bigInts and return -1 if x is less, 0 if equals, 1 if greater\n * @param x bigInt\n * @param y bigInt\n */\nexport function cmp(x: number[], y: number[]) {\n  return greater(x, y) ? 1 : (equals(x, y) ? 0 : -1);\n}\n\n/* Object.assign(self, {\n  cmp,\n  str2bigInt,\n  int2bigInt,\n  bigInt2str,\n  one,\n  divide_,\n  divInt_,\n  dup,\n  negative\n}); */\n\n/**\n * Returns a duplicate of bigInt x\n *\n * @export\n * @param {number[]} x\n * @returns {number[]}\n */\nexport function dup(x: number[]): number[] {\n  var i\n  buff = Array(x.length)\n  copy_(buff, x)\n  return buff\n}\n\n/**\n * do x=y on bigInts x and y.\n *\n * x must be an array at least as big as y (not counting the leading zeros in y).\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @returns {void}\n */\nexport function copy_(x: number[], y: number[]): void {\n  var i\n  var k = x.length < y.length ? x.length : y.length\n  for (i = 0; i < k; i++) x[i] = y[i]\n  for (i = k; i < x.length; i++) x[i] = 0\n}\n\n/**\n * do x=y on bigInt x and integer y.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function copyInt_(x: number[], n: number): void {\n  var i, c\n  var len = x.length //TODO .length in for loop have perfomance costs. Bench this\n  for (c = n, i = 0; i < len; i++) {\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x+n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function addInt_(x: number[], n: number): void {\n  var i, k, c, b\n  x[0] += n\n  k = x.length\n  c = 0\n  for (i = 0; i < k; i++) {\n    c += x[i]\n    b = 0\n    if (c < 0) {\n      b = -(c >> bpe)\n      c += b * radix\n    }\n    x[i] = c & mask\n    c = (c >> bpe) - b\n    if (!c) return //stop carrying as soon as the carry is zero\n  }\n}\n\n/**\n * right shift bigInt x by n bits.\n *\n *     0 <= n < bpe.\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n */\nexport function rightShift_(x: number[], n: number): void {\n  var i\n  var k = Math.floor(n / bpe)\n  if (k) {\n    for (\n      i = 0;\n      i < x.length - k;\n      i++ //right shift x by k elements\n    )\n      x[i] = x[i + k]\n    for (; i < x.length; i++) x[i] = 0\n    //$off\n    n %= bpe\n  }\n  for (i = 0; i < x.length - 1; i++) {\n    x[i] = mask & ((x[i + 1] << (bpe - n)) | (x[i] >> n))\n  }\n  x[i] >>= n\n}\n\n/**\n * do x=floor(|x|/2)*sgn(x) for bigInt x in 2's complement\n *\n * @param {number[]} x\n * @returns {void}\n */\nexport function halve_(x: number[]): void {\n  var i\n  for (i = 0; i < x.length - 1; i++) {\n    x[i] = mask & ((x[i + 1] << (bpe - 1)) | (x[i] >> 1))\n  }\n  x[i] = (x[i] >> 1) | (x[i] & (radix >> 1)) //most significant bit stays the same\n}\n\n/**\n * left shift bigInt x by n bits\n *\n * @export\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function leftShift_(x: number[], n: number): void {\n  var i\n  var k = Math.floor(n / bpe)\n  if (k) {\n    for (\n      i = x.length;\n      i >= k;\n      i-- //left shift x by k elements\n    )\n      x[i] = x[i - k]\n    for (; i >= 0; i--) x[i] = 0\n    //$off\n    n %= bpe\n  }\n  if (!n) return\n  for (i = x.length - 1; i > 0; i--) {\n    x[i] = mask & ((x[i] << n) | (x[i - 1] >> (bpe - n)))\n  }\n  x[i] = mask & (x[i] << n)\n}\n\n/**\n * do x=x*n where x is a bigInt and n is an integer.\n *\n * x must be large enough to hold the result.\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {void}\n */\nexport function multInt_(x: number[], n: number): void {\n  var i, k, c, b\n  if (!n) return\n  k = x.length\n  c = 0\n  for (i = 0; i < k; i++) {\n    c += x[i] * n\n    b = 0\n    if (c < 0) {\n      b = -(c >> bpe)\n      c += b * radix\n    }\n    x[i] = c & mask\n    c = (c >> bpe) - b\n  }\n}\n\n/**\n * do x=floor(x/n) for bigInt x and integer n, and return the remainder\n *\n * @param {number[]} x\n * @param {number} n\n * @returns {number} remainder\n */\nexport function divInt_(x: number[], n: number): number {\n  var i,\n      r = 0,\n      s\n  for (i = x.length - 1; i >= 0; i--) {\n    s = r * radix + x[i]\n    x[i] = Math.floor(s / n)\n    r = s % n\n  }\n  return r\n}\n\n/**\n * do the linear combination x=a*x+b*y for bigInts x and y, and integers a and b.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} a\n * @param {number} b\n * @returns {void}\n */\nexport function linComb_(x: number[], y: number[], a: number, b: number): void {\n  var i, c, k, kk\n  k = x.length < y.length ? x.length : y.length\n  kk = x.length\n  for (c = 0, i = 0; i < k; i++) {\n    c += a * x[i] + b * y[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; i < kk; i++) {\n    c += a * x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do the linear combination x=a*x+b*(y<<(ys*bpe)) for bigInts x and y, and integers a, b and ys.\n *\n * x must be large enough to hold the answer.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} b\n * @param {number} ys\n * @returns {void}\n */\nexport function linCombShift_(\n  x: number[],\n  y: number[],\n  b: number,\n  ys: number,\n): void {\n  var i, c, k, kk\n  k = x.length < ys + y.length ? x.length : ys + y.length\n  kk = x.length\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] + b * y[i - ys]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < kk; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x+(y<<(ys*bpe)) for bigInts x and y, and integer ys.\n *\n * x must be large enough to hold the answer.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\nexport function addShift_(x: number[], y: number[], ys: number): void {\n  var i, c, k, kk\n  k = x.length < ys + y.length ? x.length : ys + y.length\n  kk = x.length\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] + y[i - ys]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < kk; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x-(y<<(ys*bpe)) for bigInts x and y, and integer ys\n *\n * x must be large enough to hold the answer\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number} ys\n * @return {void}\n */\nexport function subShift_(x: number[], y: number[], ys: number): void {\n  var i, c, k, kk\n  k = x.length < ys + y.length ? x.length : ys + y.length\n  kk = x.length\n  for (c = 0, i = ys; i < k; i++) {\n    c += x[i] - y[i - ys]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < kk; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x-y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * negative answers will be 2s complement\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function sub_(x: number[], y: number[]): void {\n  var i, c, k, kk\n  k = x.length < y.length ? x.length : y.length\n  for (c = 0, i = 0; i < k; i++) {\n    c += x[i] - y[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < x.length; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x+y for bigInts x and y\n *\n * x must be large enough to hold the answer\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function add_(x: number[], y: number[]): void {\n  var i, c, k, kk\n  k = x.length < y.length ? x.length : y.length\n  for (c = 0, i = 0; i < k; i++) {\n    c += x[i] + y[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n  for (i = k; c && i < x.length; i++) {\n    c += x[i]\n    x[i] = c & mask\n    c >>= bpe\n  }\n}\n\n/**\n * do x=x*y for bigInts x and y.\n *\n * This is faster when y<x.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @return {void}\n */\nexport function mult_(x: number[], y: number[]): void {\n  var i\n  if (ss.length != 2 * x.length) ss = new Array(2 * x.length)\n  copyInt_(ss, 0)\n  for (i = 0; i < y.length; i++) if (y[i]) linCombShift_(ss, x, y[i], i) //ss=1*ss+y[i]*(x<<(i*bpe))\n  copy_(x, ss)\n}\n\n/**\n * do x=x mod n for bigInts x and n\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\nexport function mod_(x: number[], n: number[]): void {\n  if (s4.length !== x.length) s4 = dup(x)\n  else copy_(s4, x)\n  if (s5.length !== x.length) s5 = dup(x)\n  divide_(s4, n, s5, x) //x = remainder of s4 / n\n}\n\n/**\n * do x=x*y mod n for bigInts x,y,n.\n *\n * for greater speed, let y<x.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\nexport function multMod_(x: number[], y: number[], n: number[]): void {\n  var i\n  if (s0.length != 2 * x.length) s0 = new Array(2 * x.length)\n  copyInt_(s0, 0)\n  for (i = 0; i < y.length; i++) if (y[i]) linCombShift_(s0, x, y[i], i) //s0=1*s0+y[i]*(x<<(i*bpe))\n  mod_(s0, n)\n  copy_(x, s0)\n}\n\n/**\n * do x=x*x mod n for bigInts x,n.\n *\n * @export\n * @param {number[]} x\n * @param {number[]} n\n * @return {void}\n */\nexport function squareMod_(x: number[], n: number[]): void {\n  var i, j, d, c, kx, kn, k\n  for (kx = x.length; kx > 0 && !x[kx - 1]; kx--); //ignore leading zeros in x\n  k = kx > n.length ? 2 * kx : 2 * n.length //k=# elements in the product, which is twice the elements in the larger of x and n\n  if (s0.length != k) s0 = new Array(k)\n  copyInt_(s0, 0)\n  for (i = 0; i < kx; i++) {\n    c = s0[2 * i] + x[i] * x[i]\n    s0[2 * i] = c & mask\n    c >>= bpe\n    for (j = i + 1; j < kx; j++) {\n      c = s0[i + j] + 2 * x[i] * x[j] + c\n      s0[i + j] = c & mask\n      c >>= bpe\n    }\n    s0[i + kx] = c\n  }\n  mod_(s0, n)\n  copy_(x, s0)\n}\n\n/**\n * return x with exactly k leading zero elements\n *\n * @export\n * @param {number[]} x\n * @param {number} k\n * @returns {number[]}\n */\nexport function trim(x: number[], k: number): number[] {\n  var i, y\n  for (i = x.length; i > 0 && !x[i - 1]; i--);\n  y = new Array(i + k)\n  copy_(y, x)\n  return y\n}\n\n/**\n * do `x=x**y mod n`, where x,y,n are bigInts and `**` is exponentiation.  `0**0=1`.\n *\n * this is faster when n is odd.\n *\n * x usually needs to have as many elements as n.\n *\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @return {void}\n */\nexport function powMod_(x: number[], y: number[], n: number[]): void {\n  var k1, k2, kn, np\n  if (s7.length != n.length) s7 = dup(n)\n\n  //for even modulus, use a simple square-and-multiply algorithm,\n  //rather than using the more complex Montgomery algorithm.\n  if ((n[0] & 1) == 0) {\n    copy_(s7, x)\n    copyInt_(x, 1)\n    while (!equalsInt(y, 0)) {\n      if (y[0] & 1) multMod_(x, s7, n)\n      divInt_(y, 2)\n      squareMod_(s7, n)\n    }\n    return\n  }\n\n  //calculate np from n for the Montgomery multiplications\n  copyInt_(s7, 0)\n  for (kn = n.length; kn > 0 && !n[kn - 1]; kn--);\n  np = radix - inverseModInt(modInt(n, radix), radix)\n  s7[kn] = 1\n  multMod_(x, s7, n) // x = x * 2**(kn*bp) mod n\n\n  if (s3.length != x.length) s3 = dup(x)\n  else copy_(s3, x)\n  //$off\n  // @ts-ignore\n  for (k1 = y.length - 1; (k1 > 0) & !y[k1]; k1--); //k1=first nonzero element of y\n  if (y[k1] == 0) {\n    //anything to the 0th power is 1\n    copyInt_(x, 1)\n    return\n  }\n  for (k2 = 1 << (bpe - 1); k2 && !(y[k1] & k2); k2 >>= 1); //k2=position of first 1 bit in y[k1]\n  for (;;) {\n    if (!(k2 >>= 1)) {\n      //look at next bit of y\n      k1--\n      if (k1 < 0) {\n        mont_(x, one, n, np)\n        return\n      }\n      k2 = 1 << (bpe - 1)\n    }\n    mont_(x, x, n, np)\n\n    if (k2 & y[k1])\n      //if next bit is a 1\n      mont_(x, s3, n, np)\n  }\n}\n\n/**\n * do x=x*y*Ri mod n for bigInts x,y,n,\n * where Ri = 2**(-kn*bpe) mod n, and kn is the\n * number of elements in the n array, not\n * counting leading zeros.\n *\n * x array must have at least as many elemnts as the n array\n * It's OK if x and y are the same variable.\n *\n * must have:\n *  * x,y < n\n *  * n is odd\n *  * np = -(n^(-1)) mod radix\n *\n * @export\n * @param {number[]} x\n * @param {number[]} y\n * @param {number[]} n\n * @param {number} np\n * @return {void}\n */\nexport function mont_(x: number[], y: number[], n: number[], np: number): void {\n  var i, j, c, ui, t, ks\n  var kn = n.length\n  var ky = y.length\n\n  if (sa.length != kn) sa = new Array(kn)\n\n  copyInt_(sa, 0)\n\n  for (; kn > 0 && n[kn - 1] == 0; kn--); //ignore leading zeros of n\n  for (; ky > 0 && y[ky - 1] == 0; ky--); //ignore leading zeros of y\n  ks = sa.length - 1 //sa will never have more than this many nonzero elements.\n\n  //the following loop consumes 95% of the runtime for randTruePrime_() and powMod_() for large numbers\n  for (i = 0; i < kn; i++) {\n    t = sa[0] + x[i] * y[0]\n    ui = ((t & mask) * np) & mask //the inner \"& mask\" was needed on Safari (but not MSIE) at one time\n    c = (t + ui * n[0]) >> bpe\n    t = x[i]\n\n    //do sa=(sa+x[i]*y+ui*n)/b   where b=2**bpe.  Loop is unrolled 5-fold for speed\n    j = 1\n    for (; j < ky - 4; ) {\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < ky; ) {\n      c += sa[j] + ui * n[j] + t * y[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < kn - 4; ) {\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < kn; ) {\n      c += sa[j] + ui * n[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    for (; j < ks; ) {\n      c += sa[j]\n      sa[j - 1] = c & mask\n      c >>= bpe\n      j++\n    }\n    sa[j - 1] = c & mask\n  }\n\n  if (!greater(n, sa)) sub_(sa, n)\n  copy_(x, sa)\n}","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport { bufferConcats } from '../../helpers/bytes';\nimport { add_, bigInt2str, cmp, leftShift_, str2bigInt } from '../../vendor/leemon';\n\n                       \n             \n                                                 \n\n                                                                           \n                                                                                 \n                                                                                             \n                                               \n                                                                          \n                                                              \n                \n \n          \n\nexport function isObject(object: any) {\n  return typeof(object) === 'object' && object !== null;\n}\n\n/* export function bigint(num: number) {\n  return new BigInteger(num.toString(16), 16);\n} */\n\n/* export function bigStringInt(strNum: string) {\n  return new BigInteger(strNum, 10);\n} */\n\n/* export function base64ToBlob(base64str: string, mimeType: string) {\n  var sliceSize = 1024;\n  var byteCharacters = atob(base64str);\n  var bytesLength = byteCharacters.length;\n  var slicesCount = Math.ceil(bytesLength / sliceSize);\n  var byteArrays = new Array(slicesCount);\n\n  for(var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    var begin = sliceIndex * sliceSize;\n    var end = Math.min(begin + sliceSize, bytesLength);\n\n    var bytes = new Array(end - begin);\n    for(var offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  return blobConstruct(byteArrays, mimeType);\n}\n\nexport function dataUrlToBlob(url: string) {\n  // var name = 'b64blob ' + url.length\n  // console.time(name)\n  var urlParts = url.split(',');\n  var base64str = urlParts[1];\n  var mimeType = urlParts[0].split(':')[1].split(';')[0];\n  var blob = base64ToBlob(base64str, mimeType);\n  // console.timeEnd(name)\n  return blob;\n} */\n\nexport function intToUint(val: number) {\n  // return val < 0 ? val + 4294967296 : val; // 0 <= val <= Infinity\n  return val >>> 0; // (4294967296 >>> 0) === 0; 0 <= val <= 4294967295\n}\n\n/* export function bytesFromBigInt(bigInt: BigInteger, len?: number) {\n  var bytes = bigInt.toByteArray();\n\n  if(len && bytes.length < len) {\n    var padding = [];\n    for(var i = 0, needPadding = len - bytes.length; i < needPadding; i++) {\n      padding[i] = 0;\n    }\n    if(bytes instanceof ArrayBuffer) {\n      bytes = bufferConcat(padding, bytes);\n    } else {\n      bytes = padding.concat(bytes);\n    }\n  } else {\n    while (!bytes[0] && (!len || bytes.length > len)) {\n      bytes = bytes.slice(1);\n    }\n  }\n\n  return bytes;\n} */\n\nexport function longFromInts(high: number, low: number): string {\n  //let perf = performance.now();\n  //let str = bigint(high).shiftLeft(32).add(bigint(low)).toString(10);\n  //console.log('longFromInts jsbn', performance.now() - perf);\n  high = intToUint(high);\n  low = intToUint(low);\n  \n  //perf = performance.now();\n  const bigInt = str2bigInt(high.toString(16), 16, 32);//int2bigInt(high, 64, 64);\n  //console.log('longFromInts construct high', bigint(high).toString(10), bigInt2str(bigInt, 10));\n  leftShift_(bigInt, 32);\n  //console.log('longFromInts shiftLeft', bigint(high).shiftLeft(32).toString(10), bigInt2str(bigInt, 10));\n  add_(bigInt, str2bigInt(low.toString(16), 16, 32));\n  const _str = bigInt2str(bigInt, 10);\n\n  //console.log('longFromInts leemon', performance.now() - perf);\n\n  //console.log('longFromInts', high, low, str, _str, str === _str);\n\n  return _str;\n}\n\nexport function sortLongsArray(arr: string[]) {\n  return arr.map(long => {\n    return str2bigInt(long, 10);\n  }).sort((a, b) => {\n    return cmp(a, b);\n  }).map(bigInt => {\n    return bigInt2str(bigInt, 10);\n  });\n}\n\nexport function addPadding<T extends number[] | ArrayBuffer | Uint8Array>(\n  bytes: T, \n  blockSize: number = 16, \n  zeroes?: boolean, \n  blockSizeAsTotalLength = false, \n  prepend = false\n): T {\n  const len = (bytes as ArrayBuffer).byteLength || (bytes as Uint8Array).length;\n  const needPadding = blockSizeAsTotalLength ? blockSize - len : blockSize - (len % blockSize);\n  if(needPadding > 0 && needPadding < blockSize) {\n    ////console.log('addPadding()', len, blockSize, needPadding);\n    const padding = new Uint8Array(needPadding);\n    if(zeroes) {\n      for(let i = 0; i < needPadding; ++i) {\n        padding[i] = 0;\n      }\n    } else {\n      padding.randomize();\n    }\n\n    if(bytes instanceof ArrayBuffer) {\n      return (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)).buffer as T;\n    } else if(bytes instanceof Uint8Array) {\n      return (prepend ? bufferConcats(padding, bytes) : bufferConcats(bytes, padding)) as T;\n    } else {\n      // @ts-ignore\n      return (prepend ? [...padding].concat(bytes) : bytes.concat([...padding])) as T;\n    }\n  }\n\n  return bytes;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport I18n, { i18n, join, LangPackKey } from \"../lib/langPack\";\r\nimport formatDuration, { DurationType } from \"./formatDuration\";\r\n\r\nconst CALL_DURATION_LANG_KEYS: {[type in DurationType]: LangPackKey} = {\r\n  s: 'Seconds',\r\n  m: 'Minutes',\r\n  h: 'Hours',\r\n  d: 'Days',\r\n  w: 'Weeks'\r\n};\r\nexport default function formatCallDuration(duration: number, plain?: boolean) {\r\n  const a = formatDuration(duration, 2);\r\n  if(plain) {\r\n    const strings = a.map(d => I18n.format(CALL_DURATION_LANG_KEYS[d.type], true, [d.duration]));\r\n    return join(strings, false, plain);\r\n  }\r\n\r\n  const elements = a.map(d => i18n(CALL_DURATION_LANG_KEYS[d.type], [d.duration]));\r\n\r\n  const fragment = document.createElement('span');\r\n  fragment.append(...join(elements, false));\r\n\r\n  return fragment;\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nexport type DurationType = 's' | 'm' | 'h' | 'd' | 'w';\r\nexport default function formatDuration(duration: number, showLast = 2) {\r\n  if(!duration) {\r\n    duration = 1;\r\n  }\r\n\r\n  let d: {duration: number, type: DurationType}[] = [];\r\n  const p = [\r\n    {m: 1, t: 's'},\r\n    {m: 60, t: 'm'}, \r\n    {m: 60, t: 'h'}, \r\n    {m: 24, t: 'd'}, \r\n    {m: 7, t: 'w'}\r\n  ] as Array<{m?: number, t: DurationType}>\r\n  const s = 1;\r\n  let t = s;\r\n  p.forEach((o, idx) => {\r\n    t *= o.m;\r\n\r\n    if(duration < t) {\r\n      return;\r\n    }\r\n\r\n    const modulus = p[idx === (p.length - 1) ? idx : idx + 1].m;\r\n    d.push({\r\n      duration: (duration / t % modulus | 0),\r\n      type: o.t\r\n    });\r\n  });\r\n\r\n  const out = d.slice(-showLast).reverse();\r\n  for(let i = out.length - 1; i >= 0; --i) {\r\n    if(out[i].duration === 0) {\r\n      out.splice(i, 1);\r\n    }\r\n  }\r\n  \r\n  return out;\r\n}\r\n","import { IS_APPLE_MOBILE, IS_SAFARI } from \"./userAgent\";\n\n// mov is not supported in Chrome on macOS\nconst IS_MOV_SUPPORTED = !!document.createElement('video').canPlayType('video/quicktime') || IS_SAFARI || IS_APPLE_MOBILE;\n\nexport default IS_MOV_SUPPORTED;\n","import IS_MOV_SUPPORTED from \"./movSupport\";\n\nconst VIDEO_MIME_TYPES_SUPPORTED = new Set([\n  'image/gif', // have to display it as video\n  'video/mp4',\n  'video/webm'\n]);\n\nif(IS_MOV_SUPPORTED) {\n  VIDEO_MIME_TYPES_SUPPORTED.add('video/quicktime');\n}\n\nexport default VIDEO_MIME_TYPES_SUPPORTED;\n","import constraintSupported, { MyMediaTrackSupportedConstraints } from \"../../../environment/constraintSupport\";\n\nexport default function getAudioConstraints(): MediaTrackConstraints {\n  const constraints: MediaTrackConstraints = {\n    channelCount: 2\n  };\n\n  const desirable: (keyof MyMediaTrackSupportedConstraints)[] = [\n    'noiseSuppression',\n    'echoCancellation',\n    'autoGainControl'\n  ];\n\n  desirable.forEach(constraint => {\n    if(constraintSupported(constraint)) {\n      // @ts-ignore\n      constraints[constraint] = true;\n    }\n  });\n\n  return constraints;\n}\n","export type MyMediaTrackSupportedConstraints = MediaTrackSupportedConstraints & {\n  noiseSuppression?: boolean, \n  autoGainControl?: boolean\n};\n\nexport default function constraintSupported(constraint: keyof MyMediaTrackSupportedConstraints) {\n  return (!!navigator?.mediaDevices?.getSupportedConstraints() as any as MyMediaTrackSupportedConstraints)[constraint];\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/evgeny-nadymov/telegram-react\n * Copyright (C) 2018 Evgeny Nadymov\n * https://github.com/evgeny-nadymov/telegram-react/blob/master/LICENSE\n */\n\nimport { IS_FIREFOX } from '../../environment/userAgent';\nimport LocalConferenceDescription, { ConferenceEntry } from './localConferenceDescription';\nimport StringFromLineBuilder from './stringFromLineBuilder';\nimport { GroupCallConnectionTransport, PayloadType, UpdateGroupCallConnectionData } from './types';\nimport { fromTelegramSource } from './utils';\n\nexport type WebRTCLineType = 'video' | 'audio' | 'application';\n\nexport const WEBRTC_MEDIA_PORT = '9';\n\nexport function performCandidate(c: GroupCallConnectionTransport['candidates'][0]) {\n  const arr: string[] = [];\n  arr.push('a=candidate:');\n  arr.push(`${c.foundation} ${c.component} ${c.protocol.toUpperCase()} ${c.priority} ${c.ip} ${c.port} typ ${c.type}`);\n  if(c['rel-addr'] !== undefined) {\n    arr.push(` raddr ${c['rel-addr']} rport ${c['rel-port']}`);\n  }\n  arr.push(` generation ${c.generation}`);\n  return arr.join('');\n}\n\nexport function getConnectionTypeForMediaType(mediaType: WebRTCLineType) {\n  return mediaType === 'application' ? 'DTLS/SCTP' : 'RTP/SAVPF';\n}\n\nexport function generateMediaFirstLine(mediaType: WebRTCLineType, port = WEBRTC_MEDIA_PORT, payloadIds: (string | number)[]) {\n  const connectionType = getConnectionTypeForMediaType(mediaType);\n  return `m=${mediaType} ${port} ${connectionType} ${payloadIds.join(' ')}`;\n}\n\ntype ConferenceData = UpdateGroupCallConnectionData;\n\n// https://tools.ietf.org/id/draft-ietf-rtcweb-sdp-08.html\n// https://datatracker.ietf.org/doc/html/draft-roach-mmusic-unified-plan-00\nexport class SDPBuilder extends StringFromLineBuilder {\n  public addCandidate(c: GroupCallConnectionTransport['candidates'][0]) {\n    return this.add(performCandidate(c));\n  }\n\n  /* public addDataChannel(mid: string, transport: GroupCallConnectionTransport, isAnswer?: boolean) {\n    this.add(\n      'm=application 9 UDP/DTLS/SCTP webrtc-datachannel',\n      'c=IN IP4 0.0.0.0',\n      'a=ice-options:trickle',\n      `a=mid:${mid}`\n    );\n\n    // if(!isAnswer) {\n      this.add('a=sendrecv');\n    // }\n\n    this.addTransport(transport, isAnswer);\n\n    return this.add(\n      'a=sctp-port:5000',\n      'a=max-message-size:262144'\n    );\n  } */\n  \n  public addHeader(sId: string, bundleMids: string[]) {\n    const bundle = bundleMids.join(' ');\n    return this.add(\n      'v=0',                          // version\n      `o=- ${sId} 2 IN IP4 0.0.0.0`,  // sessionId, 2=sessionVersion\n      's=-',                          // name of the session\n      't=0 0',                        // time when session is valid\n      'a=extmap-allow-mixed',\n      `a=group:BUNDLE ${bundle}`,\n      'a=ice-options:trickle',\n      'a=ice-lite',                   // ice-lite: is a minimal version of the ICE specification, intended for servers running on a public IP address.\n      'a=msid-semantic:WMS *'\n    );\n  }\n  \n  public addTransport(transport: GroupCallConnectionTransport, skipCandidates?: boolean) {\n    this.add(\n      `a=ice-ufrag:${transport.ufrag}`,\n      `a=ice-pwd:${transport.pwd}`,\n      'a=ice-options:trickle'           // ! test\n    );\n\n    for(const fingerprint of transport.fingerprints) {\n      this.add(\n        `a=fingerprint:${fingerprint.hash} ${fingerprint.fingerprint}`,\n        `a=setup:${fingerprint.setup}`\n      );\n    }\n\n    if(!skipCandidates && transport.candidates) {\n      for(const candidate of transport.candidates) {\n        this.addCandidate(candidate);\n      }\n    }\n\n    return this;\n  }\n\n  public addSsrc(entry: ConferenceEntry) {\n    let streamName = 'stream';\n    let {type, sourceGroups} = entry;\n\n    // let source = ssrc.source ?? ssrc.sourceGroups[0].sources[0];\n    // source = fromTelegramSource(source);\n    const source = fromTelegramSource(entry.source);\n\n    streamName += source;\n    type += source as any;\n\n    // streamName += mid;\n    // type += mid as any;\n\n    // streamName = type = entry.transceiver.receiver.track.id as any;\n\n    const addMsid = () => {\n      this.add(`a=msid:${streamName} ${type}`);\n    };\n\n    const addSource = (ssrc: number) => {\n      this.add(\n        `a=ssrc:${ssrc} cname:${streamName}`,\n        `a=ssrc:${ssrc} msid:${streamName} ${type}`,\n        `a=ssrc:${ssrc} mslabel:${streamName}`,\n        `a=ssrc:${ssrc} label:${type}`\n      );\n    };\n\n    addMsid();\n    if(sourceGroups?.length) {\n      sourceGroups.forEach(ssrcGroup => {\n        if(ssrcGroup.sources.length) {\n          const sources = ssrcGroup.sources.map(fromTelegramSource);\n          this.add(`a=ssrc-group:${ssrcGroup.semantics} ${sources.join(' ')}`);\n          sources.forEach(addSource);\n        }\n      });\n    } else {\n      addSource(source);\n    }\n  \n    return this;\n  }\n\n  public addSsrcEntry(entry: ConferenceEntry, data: ConferenceData, isAnswer?: boolean) {\n    const add = (...x: string[]) => this.add(...x);\n    \n    const {type, mid, direction, port} = entry;\n    const transport = data.transport;\n\n    /* if(type === 'application') {\n      return this.addDataChannel(mid, transport, isAnswer);\n    } */\n\n    const isApplication = type === 'application';\n    const codec = isApplication ? undefined : data[type];\n\n    const isInactive = direction === 'inactive';\n    if(entry.shouldBeSkipped(isAnswer)) {\n      return add(\n        `m=${type} 0 ${getConnectionTypeForMediaType(type)} 0`,\n        `c=IN IP4 0.0.0.0`,\n        `a=inactive`,\n        `a=mid:${mid}`\n      );\n    }\n    \n    const payloadTypes = !isApplication ? codec['payload-types'] : [{id: 5000} as PayloadType];\n    const ids = payloadTypes.map(type => type.id);\n    add(\n      generateMediaFirstLine(type, port, ids),\n      'c=IN IP4 0.0.0.0',\n      `a=rtcp:${port} IN IP4 0.0.0.0`,\n    );\n\n    if(transport['rtcp-mux']) {\n      add('a=rtcp-mux');\n    }\n\n    add(`a=mid:${mid}`);\n    /* if(type === 'video') {\n      add('b=AS:2500');\n    } */\n\n    let setDirection = direction;\n    if(direction !== 'sendrecv' && isAnswer && !(isInactive || isApplication)) {\n      setDirection = direction === 'sendonly' ? 'recvonly' : 'sendonly';\n    }\n\n    // a=bundle-only\n    add(`a=${setDirection}`);\n    \n    // this.addTransport(transport, isAnswer);\n    this.addTransport(transport);\n\n    if(!isApplication) {\n      const hdrexts = codec['rtp-hdrexts'];\n      if(hdrexts?.length) {\n        hdrexts.forEach(hdrext => {\n          add(`a=extmap:${hdrext.id} ${hdrext.uri}`);\n        });\n      }\n  \n      payloadTypes.forEach(type => {\n        add(`a=rtpmap:${type.id} ${type.name}/${type.clockrate}${type.channels && type.channels > 1 ? `/${type.channels}` : ''}`);\n  \n        const parameters = type.parameters;\n        if(Array.isArray(parameters)) {\n          if(parameters.length) {\n            console.error('parameters is array???', parameters);\n          }\n        } else if(parameters && Object.keys(parameters).length) {\n          const p: string[] = [];\n          for(const i in parameters) {\n            p.push(`${i}=${parameters[i]}`);\n          }\n          add(`a=fmtp:${type.id} ${p.join(';')}`);\n        }\n  \n        const fbs = type['rtcp-fbs'];\n        if(fbs?.length) {\n          fbs.forEach(fb => {\n            add(`a=rtcp-fb:${type.id} ${fb.type}${fb.subtype ? ' ' + fb.subtype : ''}`);\n          });\n        }\n      });\n    } else {\n      add(`a=sctpmap:${payloadTypes[0].id} webrtc-datachannel 256`);\n    }\n\n    if(entry.source && (setDirection === 'sendonly' || setDirection === 'sendrecv')) {\n      this.addSsrc(entry);\n    }\n\n    return this;\n  }\n  \n  public addConference(options: {\n    conference: LocalConferenceDescription, \n    bundle: string[],\n    entries: ConferenceEntry[],\n    isAnswer?: boolean, \n  }) {\n    const {conference, entries, bundle, isAnswer} = options;\n    this.addHeader(conference.sessionId, bundle);\n\n    if(IS_FIREFOX) {\n      this.addTransport(conference.transport); // support Firefox\n    }\n\n    for(const entry of entries) {\n      // this.addSsrcEntry(entry, conference, isAnswer);\n      this.addSsrcEntry((isAnswer ? entry.recvEntry || entry.sendEntry : entry.sendEntry || entry.recvEntry) || entry, conference, isAnswer);\n    }\n\n    return this;\n  }\n  \n  public static fromConference(options: Parameters<SDPBuilder['addConference']>[0]) {\n    return new SDPBuilder().addConference(options).finalize();\n  }\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/evgeny-nadymov/telegram-react\n * Copyright (C) 2018 Evgeny Nadymov\n * https://github.com/evgeny-nadymov/telegram-react/blob/master/LICENSE\n */\n\nexport default class StringFromLineBuilder {\n  private lines: string[] = [];\n  private newLine: string[] = [];\n\n  constructor(private joiner = '\\r\\n') {\n\n  }\n\n  public add(...strs: string[]) {\n    this.lines.push(...strs);\n    return this;\n  }\n\n  public push(word: string) {\n    this.newLine.push(word);\n    return this;\n  }\n  \n  public addJoined(separator = '') {\n    this.add(this.newLine.join(separator));\n    this.newLine = [];\n    return this;\n  }\n\n  public join() {\n    return this.lines.join(this.joiner);\n  }\n\n  public finalize() {\n    return this.join() + this.joiner;\n  }\n}\n"],"sourceRoot":""}