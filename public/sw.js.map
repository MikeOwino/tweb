{"version":3,"file":"sw.js","mappings":"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","sources":["webpack://tweb/webpack/bootstrap","webpack://tweb/webpack/runtime/define property getters","webpack://tweb/webpack/runtime/hasOwnProperty shorthand","webpack://tweb/webpack/runtime/compat","webpack://tweb/./src/config/modes.ts","webpack://tweb/./src/config/debug.ts","webpack://tweb/./src/environment/ctx.ts","webpack://tweb/./src/environment/userAgent.ts","webpack://tweb/./src/helpers/context.ts","webpack://tweb/./src/lib/logger.ts","webpack://tweb/./src/lib/serviceWorker/cache.ts","webpack://tweb/./src/helpers/schedulers/pause.ts","webpack://tweb/./src/helpers/blob/readBlobAsUint8Array.ts","webpack://tweb/./src/helpers/blob/readBlobAsArrayBuffer.ts","webpack://tweb/./src/helpers/blob/readBlobAs.ts","webpack://tweb/./src/helpers/noop.ts","webpack://tweb/./src/helpers/blob/blobConstruct.ts","webpack://tweb/./src/helpers/blob/blobSafeMimeType.ts","webpack://tweb/./src/lib/fileManager.ts","webpack://tweb/./src/lib/cacheStorage.ts","webpack://tweb/./src/lib/serviceWorker/stream.ts","webpack://tweb/./src/helpers/schedulers/debounce.ts","webpack://tweb/./src/helpers/cancellablePromise.ts","webpack://tweb/./src/lib/idb.ts","webpack://tweb/./src/helpers/object/safeAssign.ts","webpack://tweb/./src/lib/serviceWorker/push.ts","webpack://tweb/./src/config/databases/state.ts","webpack://tweb/./src/lib/serviceWorker/index.service.ts","webpack://tweb/./src/lib/serviceWorker/timeout.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","(() => {\n  if (typeof __webpack_require__ !== 'undefined') {\n    var oldGetScript = __webpack_require__.u;\n    var oldLoadScript = __webpack_require__.e;\n    var queryMap = new Map();\n    var countMap = new Map();\n    __webpack_require__.u = function (chunkId) {\n      var result = oldGetScript(chunkId);\n      return (\n        result + (queryMap.has(chunkId) ? '?' + queryMap.get(chunkId) : '')\n      );\n    };\n    __webpack_require__.e = function (chunkId) {\n      var result = oldLoadScript(chunkId);\n      return result.catch(function (error) {\n        var retries = countMap.has(chunkId) ? countMap.get(chunkId) : 999999;\n        if (retries < 1) {\n          var realSrc = oldGetScript(chunkId);\n          error.message =\n            'Loading chunk ' +\n            chunkId +\n            ' failed after 999999 retries.\\n(' +\n            realSrc +\n            ')';\n          error.request = realSrc;\n          throw error;\n        }\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            var retryAttempt = 999999 - retries + 1;\n            var retryAttemptString = '&retry-attempt=' + retryAttempt;\n            var cacheBust = (function () {\n              return Date.now();\n            })();\n            +retryAttemptString;\n            queryMap.set(chunkId, cacheBust);\n            countMap.set(chunkId, retries - 1);\n            resolve(__webpack_require__.e(chunkId));\n          }, 3000);\n        });\n      });\n    };\n  }\n})();\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { TransportType } from \"../lib/mtproto/dcConfigurator\";\n\nconst Modes = {\n  test: location.search.indexOf('test=1') > 0/*  || true */,\n  debug: location.search.indexOf('debug=1') > 0,\n  http: false,\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\n  multipleConnections: true,\n  asServiceWorker: false,\n  transport: 'websocket' as TransportType\n};\n\n                        \nModes.http = location.search.indexOf('http=1') > 0;\n          \n\n                                       \n                  \n          \n\nif(Modes.http) {\n  Modes.transport = 'https';\n}\n\n                  \n                             \n          \n\nexport default Modes;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","const ctx = typeof(window) !== 'undefined' ? window : self;\n\nexport default ctx;\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport ctx from './ctx';\r\n\r\nexport const USER_AGENT = navigator ? navigator.userAgent : null;\r\nexport const IS_APPLE = navigator.userAgent.search(/OS X|iPhone|iPad|iOS/i) !== -1;\r\nexport const IS_ANDROID = navigator.userAgent.toLowerCase().indexOf('android') !== -1;\r\nexport const IS_CHROMIUM = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\r\n\r\n// https://stackoverflow.com/a/58065241\r\nexport const IS_APPLE_MOBILE = (/iPad|iPhone|iPod/.test(navigator.platform) ||\r\n  (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\r\n  !(ctx as any).MSStream;\r\n\r\nexport const IS_SAFARI = !!('safari' in ctx) || !!(USER_AGENT && (/\\b(iPad|iPhone|iPod)\\b/.test(USER_AGENT) || (!!USER_AGENT.match('Safari') && !USER_AGENT.match('Chrome'))))/*  || true */;\r\nexport const IS_FIREFOX = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\r\n\r\nexport const IS_MOBILE_SAFARI = IS_SAFARI && IS_APPLE_MOBILE;\r\n\r\nexport const IS_MOBILE = /* screen.width && screen.width < 480 ||  */navigator.maxTouchPoints > 0 && navigator.userAgent.search(/iOS|iPhone OS|Android|BlackBerry|BB10|Series ?[64]0|J2ME|MIDP|opera mini|opera mobi|mobi.+Gecko|Windows Phone/i) != -1;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// в SW может быть сразу две переменных TRUE\r\nexport const IS_SERVICE_WORKER = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const IS_WEB_WORKER = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && !IS_SERVICE_WORKER;\r\nexport const IS_WORKER = IS_WEB_WORKER || IS_SERVICE_WORKER;\r\n\r\nexport const getWindowClients = () => {\r\n  return (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' });\r\n};\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' })\r\n  .then((listeners) => {\r\n    if(!listeners.length) {\r\n      //console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach(listener => {\r\n      // @ts-ignore\r\n      listener.postMessage(...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  // @ts-ignore\r\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, false) : (IS_WEB_WORKER ? notifyWorker : noop);\r\nexport const notifyAll = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, true) : (IS_WEB_WORKER ? notifyWorker : noop);\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from \"../config/debug\";\nimport { IS_FIREFOX, IS_SAFARI } from \"../environment/userAgent\";\nimport { IS_SERVICE_WORKER, IS_WEB_WORKER } from \"../helpers/context\";\n\nexport enum LogTypes {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Log = 4,\n  Debug = 8\n};\n\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\n\nconst _logTimer = Date.now();\nfunction dT() {\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\n}\n\nlet getCallerFunctionNameFromLine: (line: string) => string;\n\nconst IS_WEBKIT = IS_SAFARI || IS_FIREFOX;\n\nif(IS_WEBKIT) {\n  getCallerFunctionNameFromLine = (line) => {\n    const splitted = line.split('@');\n    return splitted[0];\n  };\n} else {\n  getCallerFunctionNameFromLine = (line: string) => {\n    const splitted = line.trim().split(' ');\n    if(splitted.length === 3) {\n      return splitted[1].slice(splitted[1].lastIndexOf('.') + 1);\n    }\n  };\n}\n\nconst STYLES_SUPPORTED = !IS_WEBKIT;\nconst LINE_INDEX = IS_WEBKIT ? 2 : 3;\n\nfunction getCallerFunctionName() {\n  const stack = new Error().stack;\n  const lines = stack.split('\\n');\n  const line = lines[LINE_INDEX] || lines[lines.length - 1];\n  // const match = line.match(/\\.([^\\.]+?)\\s/);\n  // line = match ? match[1] : line.trim();\n  const caller = getCallerFunctionNameFromLine(line) || '<anonymous>';\n  return '[' + caller + ']';\n}\n\nexport const LOGGER_STYLES = {\n  reset: \"\\x1b[0m\",\n  bright: \"\\x1b[1m\",\n  dim: \"\\x1b[2m\",\n  underscore: \"\\x1b[4m\",\n  blink: \"\\x1b[5m\",\n  reverse: \"\\x1b[7m\",\n  hidden: \"\\x1b[8m\",\n  // Foreground (text) colors\n  fg: {\n    black: \"\\x1b[30m\",\n    red: \"\\x1b[31m\",\n    green: \"\\x1b[32m\",\n    yellow: \"\\x1b[33m\",\n    blue: \"\\x1b[34m\",\n    magenta: \"\\x1b[35m\",\n    cyan: \"\\x1b[36m\",\n    white: \"\\x1b[37m\"\n  },\n  // Background colors\n  bg: {\n    black: \"\\x1b[40m\",\n    red: \"\\x1b[41m\",\n    green: \"\\x1b[42m\",\n    yellow: \"\\x1b[43m\",\n    blue: \"\\x1b[44m\",\n    magenta: \"\\x1b[45m\",\n    cyan: \"\\x1b[46m\",\n    white: \"\\x1b[47m\"\n  }\n};\n\nexport type Logger = {\n  (...args: any[]): void;\n  warn(...args: any[]): void;\n  info(...args: any[]): void;\n  error(...args: any[]): void;\n  trace(...args: any[]): void;\n  debug(...args: any[]): void;\n  assert(...args: any[]): void;\n  // log(...args: any[]): void;\n  setPrefix(newPrefix: string): void;\n  setLevel(level: 0 | 1 | 2 | 3 | 4): void;\n  bindPrefix(prefix: string): Logger;\n};\n\nconst methods: ['debug' | 'info' | 'warn' | 'error' | 'assert' | 'trace'/*  | 'log' */, LogTypes][] = [\n  [\"debug\", LogTypes.Debug], \n  [\"info\", LogTypes.Log], \n  [\"warn\", LogTypes.Warn], \n  [\"error\", LogTypes.Error], \n  [\"assert\", LogTypes.Error],\n  [\"trace\", LogTypes.Log],\n  // [\"log\", LogTypes.Log]\n];\n\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false, style = ''): Logger {\n  let originalPrefix: string;\n  if(!DEBUG && !ignoreDebugReset/*  || true */) {\n    type = LogTypes.Error;\n  }\n\n  if(!STYLES_SUPPORTED) {\n    style = '';\n  } else if(!style) {\n    if(IS_SERVICE_WORKER) style = LOGGER_STYLES.fg.yellow;\n    else if(IS_WEB_WORKER) style = LOGGER_STYLES.fg.cyan;\n  }\n\n  let originalStyle = style;\n  if(style) style = `%s ${style}%s`;\n  else style = '%s';\n\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  const log: Logger = function(...args: any[]) {\n    return type & LogTypes.Log && console.log(style, dT(), prefix, getCallerFunctionName(), ...args);\n  } as any;\n\n  methods.forEach(([method, logType]) => {\n    log[method] = function(...args: any[]) {\n      return type & logType && console[method](style, dT(), prefix, getCallerFunctionName(), ...args);\n    };\n  });\n\n  log.setPrefix = function(newPrefix: string) {\n    originalPrefix = newPrefix;\n    prefix = '[' + newPrefix + ']';\n  };\n\n  log.setPrefix(prefix);\n\n  log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\n  };\n\n  log.bindPrefix = function(prefix: string) {\n    return logger(`${originalPrefix}] [${prefix}`, type, ignoreDebugReset, originalStyle);\n  };\n\n  return log;\n};\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { pause } from \"../../helpers/schedulers/pause\";\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nexport const CACHE_ASSETS_NAME = 'cachedAssets';\r\n\r\nfunction isCorrectResponse(response: Response) {\r\n  return response.ok && response.status === 200;\r\n}\r\n\r\nfunction timeoutRace<T extends Promise<any>>(promise: T) {\r\n  return Promise.race([\r\n    promise,\r\n    pause(10000).then(() => Promise.reject())\r\n  ]);\r\n}\r\n\r\nexport async function requestCache(event: FetchEvent) {\r\n  try {\r\n    // const cache = await ctx.caches.open(CACHE_ASSETS_NAME);\r\n    const cache = await timeoutRace(ctx.caches.open(CACHE_ASSETS_NAME));\r\n    const file = await timeoutRace(cache.match(event.request, {ignoreVary: true}));\r\n  \r\n    if(file && isCorrectResponse(file)) {\r\n      return file;\r\n    }\r\n  \r\n    const headers: HeadersInit = {'Vary': '*'};\r\n    let response = await fetch(event.request, {headers});\r\n    if(isCorrectResponse(response)) {\r\n      cache.put(event.request, response.clone());\r\n    } else if(response.status === 304) { // possible fix for 304 in Safari\r\n      const url = event.request.url.replace(/\\?.+$/, '') + '?' + (Math.random() * 100000 | 0);\r\n      response = await fetch(url, {headers});\r\n      if(isCorrectResponse(response)) {\r\n        cache.put(event.request, response.clone());\r\n      }\r\n    }\r\n  \r\n    return response;\r\n  } catch(err) {\r\n    return fetch(event.request);\r\n  }\r\n}\r\n","export const pause = (ms: number) => new Promise<void>((resolve) => {\r\n  setTimeout(resolve, ms);\r\n});\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport readBlobAsArrayBuffer from \"./readBlobAsArrayBuffer\";\n\nexport default function readBlobAsUint8Array(blob: Blob) {\n  return readBlobAsArrayBuffer(blob).then(buffer => new Uint8Array(buffer));\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport readBlobAs from \"./readBlobAs\";\n\nexport default function readBlobAsArrayBuffer(blob: Blob) {\n  return readBlobAs(blob, 'readAsArrayBuffer');\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n// import { IS_WEB_WORKER } from \"../context\";\n\n// const id = IS_WEB_WORKER ? Math.random() * 0x1000 | 0 : 0;\nexport default function readBlobAs(blob: Blob, method: 'readAsText'): Promise<string>;\nexport default function readBlobAs(blob: Blob, method: 'readAsDataURL'): Promise<string>;\nexport default function readBlobAs(blob: Blob, method: 'readAsArrayBuffer'): Promise<ArrayBuffer>;\nexport default function readBlobAs(blob: Blob, method: 'readAsArrayBuffer' | 'readAsText' | 'readAsDataURL'): Promise<any> {\n  // const perf = performance.now();\n  return new Promise<any>((resolve) => {\n    const reader = new FileReader();\n    reader.addEventListener('loadend', (e) => {\n      // console.log(`readBlobAs [${id}] ${method} time ${performance.now() - perf}`);\n      resolve(e.target.result);\n    });\n    reader[method](blob);\n  });\n}\n","export default function noop() {}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport blobSafeMimeType from \"./blobSafeMimeType\";\n\nexport default function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\n  let blob;\n  const safeMimeType = blobSafeMimeType(mimeType);\n  try {\n    blob = new Blob(blobParts, {type: safeMimeType});\n  } catch(e) {\n    // @ts-ignore\n    let bb = new BlobBuilder;\n    blobParts.forEach((blobPart: any) => {\n      bb.append(blobPart);\n    });\n    blob = bb.getBlob(safeMimeType);\n  }\n  return blob;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n// https://www.iana.org/assignments/media-types/media-types.xhtml\nexport default function blobSafeMimeType(mimeType: string) {\n  if([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n    'application/json',\n    'application/pdf'\n  ].indexOf(mimeType) === -1) {\n    return 'application/octet-stream';\n  }\n\n  return mimeType;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport blobConstruct from \"../helpers/blob/blobConstruct\";\r\nimport readBlobAsUint8Array from \"../helpers/blob/readBlobAsUint8Array\";\r\n\r\nexport class FileManager {\r\n  private blobSupported = true;\r\n  \r\n  constructor() {\r\n    try {\r\n      blobConstruct([], '');\r\n    } catch(e) {\r\n      this.blobSupported = false;\r\n    }\r\n  }\r\n  \r\n  public isAvailable() {\r\n    return this.blobSupported;\r\n  }\r\n  \r\n  public write(fileWriter: ReturnType<FileManager['getFakeFileWriter']>, bytes: Uint8Array | Blob | string): Promise<void> {\r\n    if(bytes instanceof Blob) { // is file bytes\r\n      return readBlobAsUint8Array(bytes).then(arr => {\r\n        return fileWriter.write(arr);\r\n      });\r\n    } else {\r\n      return fileWriter.write(bytes);\r\n    }\r\n  }\r\n\r\n  public getFakeFileWriter(mimeType: string, saveFileCallback?: (blob: Blob) => Promise<Blob>) {\r\n    const blobParts: Array<Uint8Array | string> = [];\r\n    const fakeFileWriter = {\r\n      write: async(part: Uint8Array | string) => {\r\n        if(!this.blobSupported) {\r\n          throw false;\r\n        }\r\n        \r\n        blobParts.push(part);\r\n      },\r\n      truncate: () => {\r\n        blobParts.length = 0;\r\n      },\r\n      finalize: (saveToStorage = true) => {\r\n        const blob = blobConstruct(blobParts, mimeType);\r\n\r\n        if(saveToStorage && saveFileCallback) {\r\n          saveFileCallback(blob);\r\n        }\r\n        \r\n        return blob;\r\n      }\r\n    };\r\n    \r\n    return fakeFileWriter;\r\n  }\r\n}\r\n\r\nexport default new FileManager();\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport blobConstruct from '../helpers/blob/blobConstruct';\r\nimport FileManager from './fileManager';\r\n//import { MOUNT_CLASS_TO } from './mtproto/mtproto_config';\r\n//import { logger } from './polyfill';\r\n\r\nexport type CacheStorageDbName = 'cachedFiles' | 'cachedStreamChunks' | 'cachedAssets';\r\n\r\nexport default class CacheStorageController {\r\n  private static STORAGES: CacheStorageController[] = [];\r\n  private openDbPromise: Promise<Cache>;\r\n\r\n  private useStorage = true;\r\n\r\n  //private log: ReturnType<typeof logger> = logger('CS');\r\n\r\n  constructor(private dbName: CacheStorageDbName) {\r\n    if(Modes.test) {\r\n      this.dbName += '_test';\r\n    }\r\n\r\n    if(CacheStorageController.STORAGES.length) {\r\n      this.useStorage = CacheStorageController.STORAGES[0].useStorage;\r\n    }\r\n    \r\n    this.openDatabase();\r\n    CacheStorageController.STORAGES.push(this);\r\n  }\r\n\r\n  private openDatabase(): Promise<Cache> {\r\n    return this.openDbPromise ?? (this.openDbPromise = caches.open(this.dbName));\r\n  }\r\n\r\n  public delete(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.delete('/' + entryName));\r\n  }\r\n\r\n  public deleteAll() {\r\n    return caches.delete(this.dbName);\r\n  }\r\n\r\n  public get(entryName: string) {\r\n    return this.timeoutOperation((cache) => cache.match('/' + entryName));\r\n  }\r\n\r\n  public save(entryName: string, response: Response) {\r\n    // return new Promise((resolve) => {}); // DEBUG\r\n    return this.timeoutOperation((cache) => cache.put('/' + entryName, response));\r\n  }\r\n\r\n  public getFile(fileName: string, method: 'blob' | 'json' | 'text' = 'blob'): Promise<any> {\r\n    /* if(method === 'blob') {\r\n      return Promise.reject();\r\n    } */\r\n\r\n    // const str = `get fileName: ${fileName}`;\r\n    // console.time(str);\r\n    return this.get(fileName).then((response) => {\r\n      if(!response) {\r\n        //console.warn('getFile:', response, fileName);\r\n        throw 'NO_ENTRY_FOUND';\r\n      }\r\n\r\n      const promise = response[method]();\r\n      // promise.then(() => {\r\n      //   console.timeEnd(str);\r\n      // });\r\n      return promise;\r\n    });\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct(blob) as Blob;\r\n    }\r\n\r\n    const response = new Response(blob, {\r\n      headers: {\r\n        'Content-Length': '' + blob.size\r\n      }\r\n    });\r\n    \r\n    return this.save(fileName, response).then(() => blob as Blob);\r\n  }\r\n\r\n  public timeoutOperation<T>(callback: (cache: Cache) => Promise<T>) {\r\n    if(!this.useStorage) {\r\n      return Promise.reject('STORAGE_OFFLINE');\r\n    }\r\n\r\n    return new Promise<T>(async(resolve, reject) => {\r\n      let rejected = false;\r\n      const timeout = setTimeout(() => {\r\n        reject();\r\n        //console.warn('CACHESTORAGE TIMEOUT');\r\n        rejected = true;\r\n      }, 15e3);\r\n\r\n      try {\r\n        const cache = await this.openDatabase();\r\n        if(!cache) {\r\n          this.useStorage = false;\r\n          this.openDbPromise = undefined;\r\n          throw 'no cache?';\r\n        }\r\n\r\n        const res = await callback(cache);\r\n\r\n        if(rejected) return;\r\n        resolve(res);\r\n      } catch(err) {\r\n        reject(err);\r\n      }\r\n\r\n      clearTimeout(timeout);\r\n    });\r\n  }\r\n\r\n  public getFileWriter(fileName: string, mimeType: string) {\r\n    const fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob).catch(() => blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        return storage.deleteAll();\r\n      }\r\n    }));\r\n  }\r\n}\r\n\r\n//const cacheStorage = new CacheStorageController(); \r\n//MOUNT_CLASS_TO.cacheStorage = cacheStorage;\r\n//export default cacheStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport readBlobAsUint8Array from \"../../helpers/blob/readBlobAsUint8Array\";\r\nimport { CancellablePromise, deferredPromise } from \"../../helpers/cancellablePromise\";\r\nimport { getWindowClients } from \"../../helpers/context\";\r\nimport debounce from \"../../helpers/schedulers/debounce\";\r\nimport { InputFileLocation, UploadFile } from \"../../layer\";\r\nimport CacheStorageController from \"../cacheStorage\";\r\nimport { DownloadOptions } from \"../mtproto/apiFileManager\";\r\nimport { RequestFilePartTask, deferredPromises, log } from \"./index.service\";\r\nimport timeout from \"./timeout\";\r\n\r\nconst cacheStorage = new CacheStorageController('cachedStreamChunks');\r\nconst CHUNK_TTL = 86400;\r\nconst CHUNK_CACHED_TIME_HEADER = 'Time-Cached';\r\n\r\nconst clearOldChunks = () => {\r\n  return cacheStorage.timeoutOperation((cache) => {\r\n    return cache.keys().then(requests => {\r\n      const filtered: Map<StreamId, Request> = new Map();\r\n      const timestamp = Date.now() / 1000 | 0;\r\n      for(const request of requests) {\r\n        const match = request.url.match(/\\/(\\d+?)\\?/);\r\n        if(match && !filtered.has(match[1])) {\r\n          filtered.set(match[1], request);\r\n        }\r\n      }\r\n\r\n      const promises: Promise<any>[] = [];\r\n      for(const [id, request] of filtered) {\r\n        const promise = cache.match(request).then((response) => {\r\n          if((+response.headers.get(CHUNK_CACHED_TIME_HEADER) + CHUNK_TTL) <= timestamp) {\r\n            log('will delete stream chunk:', id);\r\n            return cache.delete(request, {ignoreSearch: true, ignoreVary: true});\r\n          }\r\n        });\r\n\r\n        promises.push(promise);\r\n      }\r\n\r\n      return Promise.all(promises);\r\n    });\r\n  });\r\n};\r\n\r\nsetInterval(clearOldChunks, 1800e3);\r\nsetInterval(() => {\r\n  getWindowClients().then((clients) => {\r\n    for(const [clientId, promises] of deferredPromises) {\r\n      if(!clients.find(client => client.id === clientId)) {\r\n        for(const taskId in promises) {\r\n          const promise = promises[taskId];\r\n          promise.reject();\r\n        }\r\n\r\n        deferredPromises.delete(clientId);\r\n      }\r\n    }\r\n  });\r\n}, 120e3);\r\n\r\ntype StreamRange = [number, number];\r\ntype StreamId = DocId;\r\nconst streams: Map<StreamId, Stream> = new Map();\r\nclass Stream {\r\n  private destroyDebounced: () => void;\r\n  private id: StreamId;\r\n  private limitPart: number;\r\n  private loadedOffsets: Set<number> = new Set();\r\n\r\n  constructor(private info: DownloadOptions) {\r\n    this.id = Stream.getId(info);\r\n    streams.set(this.id, this);\r\n\r\n    // ! если грузить очень большое видео чанками по 512Кб в мобильном Safari, то стрим не запустится\r\n    this.limitPart = info.size > (75 * 1024 * 1024) ? STREAM_CHUNK_UPPER_LIMIT : STREAM_CHUNK_MIDDLE_LIMIT;\r\n    this.destroyDebounced = debounce(this.destroy, 150000, false, true);\r\n  }\r\n\r\n  private destroy = () => {\r\n    streams.delete(this.id);\r\n  };\r\n\r\n  private async requestFilePartFromWorker(alignedOffset: number, limit: number, fromPreload = false) {\r\n    const task: Omit<RequestFilePartTask, 'id'> = {\r\n      type: 'requestFilePart',\r\n      payload: [this.info.dcId, this.info.location, alignedOffset, limit]\r\n    };\r\n\r\n    const taskId = JSON.stringify(task);\r\n    (task as RequestFilePartTask).id = taskId;\r\n\r\n    const windowClient = await getWindowClients().then((clients) => {\r\n      if(!clients.length) {\r\n        return;\r\n      }\r\n\r\n      return clients.find(client => deferredPromises.has(client.id)) || clients[0];\r\n    });\r\n\r\n    if(!windowClient) {\r\n      throw new Error('no window');\r\n    }\r\n\r\n    let promises = deferredPromises.get(windowClient.id);\r\n    if(!promises) {\r\n      deferredPromises.set(windowClient.id, promises = {});\r\n    }\r\n    \r\n    let deferred = promises[taskId] as CancellablePromise<UploadFile.uploadFile>;\r\n    if(deferred) {\r\n      return deferred.then(uploadFile => uploadFile.bytes);\r\n    }\r\n    \r\n    windowClient.postMessage(task);\r\n    this.loadedOffsets.add(alignedOffset);\r\n    \r\n    deferred = promises[taskId] = deferredPromise<UploadFile.uploadFile>();\r\n    const bytesPromise = deferred.then(uploadFile => uploadFile.bytes);\r\n\r\n    this.saveChunkToCache(bytesPromise, alignedOffset, limit);\r\n    !fromPreload && this.preloadChunks(alignedOffset, alignedOffset + (this.limitPart * 15));\r\n\r\n    return bytesPromise;\r\n  }\r\n\r\n  private requestFilePartFromCache(alignedOffset: number, limit: number, fromPreload?: boolean) {\r\n    const key = this.getChunkKey(alignedOffset, limit);\r\n    return cacheStorage.getFile(key).then((blob: Blob) => {\r\n      return fromPreload ? new Uint8Array() : readBlobAsUint8Array(blob);\r\n    }, (error) => {\r\n      if(error === 'NO_ENTRY_FOUND') {\r\n        return;\r\n      }\r\n    });\r\n  }\r\n\r\n  private requestFilePart(alignedOffset: number, limit: number, fromPreload?: boolean) {\r\n    return this.requestFilePartFromCache(alignedOffset, limit, fromPreload).then(bytes => {\r\n      return bytes || this.requestFilePartFromWorker(alignedOffset, limit, fromPreload);\r\n    });\r\n  }\r\n\r\n  private saveChunkToCache(deferred: Promise<Uint8Array>, alignedOffset: number, limit: number) {\r\n    return deferred.then(bytes => {\r\n      const key = this.getChunkKey(alignedOffset, limit);\r\n      const response = new Response(bytes, {\r\n        headers: {\r\n          'Content-Length': '' + bytes.length,\r\n          'Content-Type': 'application/octet-stream',\r\n          [CHUNK_CACHED_TIME_HEADER]: '' + (Date.now() / 1000 | 0)\r\n        }\r\n      });\r\n\r\n      return cacheStorage.save(key, response);\r\n    });\r\n  }\r\n\r\n  private preloadChunk(offset: number) {\r\n    if(this.loadedOffsets.has(offset)) {\r\n      return;\r\n    }\r\n\r\n    this.loadedOffsets.add(offset);\r\n    this.requestFilePart(offset, this.limitPart, true);\r\n  }\r\n\r\n  private preloadChunks(offset: number, end: number) {\r\n    if(end > this.info.size) {\r\n      end = this.info.size;\r\n    }\r\n\r\n    if(!offset) { // load last chunk for bounds\r\n      this.preloadChunk(alignOffset(offset, this.limitPart));\r\n    } else { // don't preload next chunks before the start\r\n      for(; offset < end; offset += this.limitPart) {\r\n        this.preloadChunk(offset);\r\n      }\r\n    }\r\n  }\r\n\r\n  public requestRange(range: StreamRange) {\r\n    this.destroyDebounced();\r\n\r\n    const possibleResponse = responseForSafariFirstRange(range, this.info.mimeType, this.info.size);\r\n    if(possibleResponse) {\r\n      return possibleResponse;\r\n    }\r\n\r\n    let [offset, end] = range;\r\n\r\n    /* if(info.size > limitPart && isSafari && offset === limitPart) {\r\n      //end = info.size - 1;\r\n      //offset = info.size - 1 - limitPart;\r\n      offset = info.size - (info.size % limitPart);\r\n    } */\r\n\r\n    const limit = end && end < this.limitPart ? alignLimit(end - offset + 1) : this.limitPart;\r\n    const alignedOffset = alignOffset(offset, limit);\r\n\r\n    if(!end) {\r\n      end = Math.min(offset + limit, this.info.size - 1);\r\n    }\r\n\r\n    return this.requestFilePart(alignedOffset, limit).then(ab => {\r\n      //log.debug('[stream] requestFilePart result:', result);\r\n\r\n      // if(isSafari) {\r\n      if(offset !== alignedOffset || end !== (alignedOffset + limit)) {\r\n        ab = ab.slice(offset - alignedOffset, end - alignedOffset + 1);\r\n      }\r\n      \r\n      const headers: Record<string, string> = {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes ${offset}-${offset + ab.byteLength - 1}/${this.info.size || '*'}`,\r\n        'Content-Length': `${ab.byteLength}`\r\n      };\r\n\r\n      if(this.info.mimeType) {\r\n        headers['Content-Type'] = this.info.mimeType;\r\n      }\r\n\r\n      // simulate slow connection\r\n      //setTimeout(() => {\r\n        return new Response(ab, {\r\n          status: 206,\r\n          statusText: 'Partial Content',\r\n          headers,\r\n        });\r\n      //}, 2.5e3);\r\n    });\r\n  }\r\n\r\n  private getChunkKey(alignedOffset: number, limit: number) {\r\n    return this.id + '?offset=' + alignedOffset + '&limit=' + limit;\r\n  }\r\n\r\n  public static get(info: DownloadOptions) {\r\n    return streams.get(this.getId(info)) ?? new Stream(info);\r\n  }\r\n\r\n  private static getId(info: DownloadOptions) {\r\n    return (info.location as InputFileLocation.inputDocumentFileLocation).id;\r\n  }\r\n}\r\n\r\nexport default function onStreamFetch(event: FetchEvent, params: string) {\r\n  const range = parseRange(event.request.headers.get('Range'));\r\n  const info: DownloadOptions = JSON.parse(decodeURIComponent(params));\r\n  const stream = Stream.get(info);\r\n\r\n  //log.debug('[stream]', url, offset, end);\r\n\r\n  event.respondWith(Promise.race([\r\n    timeout(45 * 1000),\r\n    stream.requestRange(range)\r\n  ]));\r\n}\r\n\r\nfunction responseForSafariFirstRange(range: StreamRange, mimeType: string, size: number): Response {\r\n  if(range[0] === 0 && range[1] === 1) {\r\n    return new Response(new Uint8Array(2).buffer, {\r\n      status: 206,\r\n      statusText: 'Partial Content',\r\n      headers: {\r\n        'Accept-Ranges': 'bytes',\r\n        'Content-Range': `bytes 0-1/${size || '*'}`,\r\n        'Content-Length': '2',\r\n        'Content-Type': mimeType || 'video/mp4',\r\n      },\r\n    });\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 256 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 256 * 4; */\r\n/* const STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 1024 * 4; */\r\nconst STREAM_CHUNK_MIDDLE_LIMIT = 512 * 1024;\r\nconst STREAM_CHUNK_UPPER_LIMIT = 1024 * 1024;\r\nconst SMALLEST_CHUNK_LIMIT = 512 * 4;\r\n\r\nfunction parseRange(header: string): StreamRange {\r\n  if(!header) return [0, 0];\r\n  const [, chunks] = header.split('=');\r\n  const ranges = chunks.split(', ');\r\n  const [offset, end] = ranges[0].split('-');\r\n\r\n  return [+offset, +end || 0];\r\n}\r\n\r\nfunction alignOffset(offset: number, base = SMALLEST_CHUNK_LIMIT) {\r\n  return offset - (offset % base);\r\n}\r\n\r\nfunction alignLimit(limit: number) {\r\n  return 2 ** Math.ceil(Math.log(limit) / Math.log(2));\r\n}\r\n","// * Jolly Cobra's schedulers\r\n\r\nimport { AnyFunction, Awaited } from \"../../types\";\r\n\r\nexport default function debounce<F extends AnyFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n  shouldRunLast = true,\r\n) {\r\n  let waitingTimeout: number;\r\n  let waitingPromise: Promise<Awaited<ReturnType<F>>>, resolve: (result: any) => void, reject: () => void;\r\n  let hadNewCall = false;\r\n\r\n  return (...args: Parameters<F>): typeof waitingPromise => {\r\n    if(!waitingPromise) waitingPromise = new Promise((_resolve, _reject) => (resolve = _resolve, reject = _reject));\r\n\r\n    if(waitingTimeout) {\r\n      clearTimeout(waitingTimeout);\r\n      hadNewCall = true;\r\n      reject();\r\n      waitingPromise = new Promise((_resolve, _reject) => (resolve = _resolve, reject = _reject));\r\n    } else if(shouldRunFirst) {\r\n      // @ts-ignore\r\n      resolve(fn(...args));\r\n      hadNewCall = false;\r\n    }\r\n\r\n    waitingTimeout = setTimeout(() => {\r\n      // will run if should run last or first but with new call\r\n      if(shouldRunLast && (!shouldRunFirst || hadNewCall)) {\r\n        // @ts-ignore\r\n        resolve(fn(...args));\r\n      }\r\n\r\n      waitingTimeout = waitingPromise = resolve = reject = undefined;\r\n      hadNewCall = false;\r\n    }, ms) as any;\r\n\r\n    waitingPromise.catch(() => {});\r\n    return waitingPromise;\r\n  };\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport noop from \"./noop\";\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (value: T) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: () => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport function deferredPromise<T>() {\r\n  let deferredHelper: any = {\r\n    isFulfilled: false, \r\n    isRejected: false,\r\n\r\n    notify: () => {}, \r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    }, \r\n\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled || deferred.isRejected) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n    \r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected || deferred.isFulfilled) return;\r\n      \r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n    \r\n  }; */\r\n\r\n  deferred.catch(noop).finally(() => {\r\n    deferred.notify = deferred.notifyAll = deferred.lastNotify = null;\r\n    deferred.listeners.length = 0;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = () => {};\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '../config/databases';\r\nimport Modes from '../config/modes';\r\nimport blobConstruct from '../helpers/blob/blobConstruct';\r\nimport safeAssign from '../helpers/object/safeAssign';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage<T extends Database<any>> {\r\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private db: IDBDatabase;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string;\r\n  private version: number;\r\n  private stores: IDBStore[];\r\n  private storeName: T['stores'][0]['name'];\r\n\r\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\r\n    safeAssign(this, db);\r\n\r\n    if(Modes.test) {\r\n      this.name += '_test';\r\n    }\r\n\r\n    this.storeName = storeName;\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public static closeDatabases(preserve?: IDBStorage<Database<any>>) {\r\n    this.STORAGES.forEach(storage => {\r\n      if(preserve && preserve === storage) {\r\n        return;\r\n      }\r\n\r\n      const db = storage.db;\r\n      if(db) {\r\n        db.onclose = () => {};\r\n        db.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ! WARNING ! function requires at least one opened connection\r\n   */\r\n  /* public static clearObjectStores() {\r\n    const storage = this.STORAGES[0];\r\n    this.closeDatabases(storage);\r\n\r\n    const names = Array.from(storage.db.objectStoreNames);\r\n    const promises = names.map(name => storage.clear(name));\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  /* public static deleteDatabase() {\r\n    this.closeDatabases();\r\n\r\n    const storages = this.STORAGES;\r\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\r\n    const promises = dbNames.map(dbName => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n  \r\n        deleteRequest.onerror = () => {\r\n          reject();\r\n        };\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        return Promise.reject();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', (error as Error).message);\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(this.db = db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public clear(storeName?: IDBStorage<T>['storeName']) {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string, storeName = this.storeName) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        /* if(mode === 'readwrite') {\r\n          return;\r\n        } */\r\n\r\n        const transaction = db.transaction([storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","export default function safeAssign<T>(object: T, fromObject: any) {\n  if(fromObject) {\n    for(let i in fromObject) {\n      if(fromObject[i] !== undefined) {\n        // @ts-ignore\n        object[i] = fromObject[i];\n      }\n    }\n  }\n\n  return object;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from \"../../config/databases\";\r\nimport DATABASE_STATE from \"../../config/databases/state\";\r\nimport { IS_FIREFOX } from \"../../environment/userAgent\";\r\nimport IDBStorage from \"../idb\";\r\nimport { log, ServiceWorkerPingTask, ServiceWorkerPushClickTask } from \"./index.service\";\r\n\r\nconst ctx = self as any as ServiceWorkerGlobalScope;\r\nconst defaultBaseUrl = location.protocol + '//' + location.hostname + location.pathname.split('/').slice(0, -1).join('/') + '/';\r\n\r\nexport type PushNotificationObject = {\r\n  loc_key: string,\r\n  loc_args: string[],\r\n  //user_id: number, // should be number\r\n  custom: {\r\n    channel_id?: string, // should be number\r\n    chat_id?: string, // should be number\r\n    from_id?: string, // should be number\r\n    msg_id: string,\r\n    peerId?: string // should be number\r\n  },\r\n  sound?: string,\r\n  random_id: number,\r\n  badge?: string, // should be number\r\n  description: string,\r\n  mute: string, // should be number\r\n  title: string,\r\n\r\n  action?: 'mute1d' | 'push_settings', // will be set before postMessage to main thread\r\n};\r\n\r\nclass SomethingGetter<T extends Database<any>, Storage extends Record<string, any>> {\r\n  private cache: Partial<Storage> = {};\r\n  private storage: IDBStorage<T>;\r\n\r\n  constructor(\r\n    db: T, \r\n    storeName: typeof db['stores'][number]['name'], \r\n    private defaults: {\r\n      [Property in keyof Storage]: ((value: Storage[Property]) => Storage[Property]) | Storage[Property]\r\n    }\r\n  ) {\r\n    this.storage = new IDBStorage<T>(db, storeName);\r\n  }\r\n\r\n  public async get<T extends keyof Storage>(key: T) {\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    let value: Storage[T];\r\n    try {\r\n      value = await this.storage.get(key as string);\r\n    } catch(err) {\r\n\r\n    }\r\n\r\n    if(this.cache[key] !== undefined) {\r\n      return this.cache[key];\r\n    }\r\n\r\n    if(value === undefined) {\r\n      const callback = this.defaults[key];\r\n      value = typeof(callback) === 'function' ? callback() : callback;\r\n    }\r\n\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async set<T extends keyof Storage>(key: T, value: Storage[T]) {\r\n    this.cache[key] = value;\r\n\r\n    try {\r\n      this.storage.save(key as string, value);\r\n    } catch(err) {\r\n\r\n    }\r\n  }\r\n}\r\n\r\ntype PushStorage = {\r\n  push_mute_until: number,\r\n  push_last_alive: number,\r\n  push_lang: Partial<ServiceWorkerPingTask['payload']['lang']>\r\n  push_settings: Partial<ServiceWorkerPingTask['payload']['settings']>\r\n};\r\n\r\nconst getter = new SomethingGetter<typeof DATABASE_STATE, PushStorage>(DATABASE_STATE, 'session', {\r\n  push_mute_until: 0,\r\n  push_last_alive: 0,\r\n  push_lang: {},\r\n  push_settings: {}\r\n});\r\n\r\nctx.addEventListener('push', (event) => {\r\n  const obj: PushNotificationObject = event.data.json();\r\n  log('push', obj);\r\n\r\n  let hasActiveWindows = false;\r\n  const checksPromise = Promise.all([\r\n    getter.get('push_mute_until'), \r\n    getter.get('push_last_alive'), \r\n    ctx.clients.matchAll({type: 'window'})\r\n  ]).then((result) => {\r\n    const [muteUntil, lastAliveTime, clientList] = result;\r\n    \r\n    log('matched clients', clientList);\r\n    hasActiveWindows = clientList.length > 0;\r\n    if(hasActiveWindows) {\r\n      throw 'Supress notification because some instance is alive';\r\n    }\r\n    \r\n    const nowTime = Date.now();\r\n    if(userInvisibleIsSupported() &&\r\n        muteUntil &&\r\n        nowTime < muteUntil) {\r\n      throw `Supress notification because mute for ${Math.ceil((muteUntil - nowTime) / 60000)} min`;\r\n    }\r\n\r\n    if(!obj.badge) {\r\n      throw 'No badge?';\r\n    }\r\n  });\r\n\r\n  checksPromise.catch(reason => {\r\n    log(reason);\r\n  });\r\n\r\n  const notificationPromise = checksPromise.then(() => {\r\n    return Promise.all([getter.get('push_settings'), getter.get('push_lang')])\r\n  }).then((result) => {\r\n    return fireNotification(obj, result[0], result[1]);\r\n  });\r\n\r\n  const closePromise = notificationPromise.catch(() => {\r\n    log('Closing all notifications on push', hasActiveWindows);\r\n    if(userInvisibleIsSupported() || hasActiveWindows) {\r\n      return closeAllNotifications();\r\n    }\r\n\r\n    return ctx.registration.showNotification('Telegram', {\r\n      tag: 'unknown_peer'\r\n    }).then(() => {\r\n      if(hasActiveWindows) {\r\n        return closeAllNotifications();\r\n      }\r\n\r\n      setTimeout(() => closeAllNotifications(), hasActiveWindows ? 0 : 100);\r\n    }).catch((error) => {\r\n      log.error('Show notification error', error);\r\n    });\r\n  });\r\n\r\n  event.waitUntil(closePromise);\r\n});\r\n\r\nctx.addEventListener('notificationclick', (event) => {\r\n  const notification = event.notification;\r\n  log('On notification click: ', notification.tag);\r\n  notification.close();\r\n\r\n  const action = event.action as PushNotificationObject['action'];\r\n  if(action === 'mute1d' && userInvisibleIsSupported()) {\r\n    log('[SW] mute for 1d');\r\n    getter.set('push_mute_until', Date.now() + 86400e3);\r\n    return;\r\n  }\r\n\r\n  const data: PushNotificationObject = notification.data;\r\n  if(!data) {\r\n    return;\r\n  }\r\n\r\n  const promise = ctx.clients.matchAll({\r\n    type: 'window'\r\n  }).then((clientList) => {\r\n    data.action = action;\r\n    pendingNotification = {type: 'push_click', payload: data};\r\n    for(let i = 0; i < clientList.length; i++) {\r\n      const client = clientList[i];\r\n      if('focus' in client) {\r\n        client.focus();\r\n        client.postMessage(pendingNotification);\r\n        pendingNotification = undefined;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(ctx.clients.openWindow) {\r\n      return getter.get('push_settings').then((settings) => {\r\n        return ctx.clients.openWindow(settings.baseUrl || defaultBaseUrl);\r\n      });\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Clients.matchAll error', error);\r\n  })\r\n\r\n  event.waitUntil(promise);\r\n});\r\n\r\nctx.addEventListener('notificationclose', onCloseNotification);\r\n\r\nlet notifications: Set<Notification> = new Set();\r\nlet pendingNotification: ServiceWorkerPushClickTask;\r\nfunction pushToNotifications(notification: Notification) {\r\n  if(!notifications.has(notification)) {\r\n    notifications.add(notification);\r\n    // @ts-ignore\r\n    notification.onclose = onCloseNotification;\r\n  }\r\n}\r\n\r\nfunction onCloseNotification(event: NotificationEvent) {\r\n  removeFromNotifications(event.notification)\r\n}\r\n\r\nfunction removeFromNotifications(notification: Notification) {\r\n  notifications.delete(notification);\r\n}\r\n\r\nexport function closeAllNotifications() {\r\n  for(const notification of notifications) {\r\n    try {\r\n      notification.close();\r\n    } catch(e) {}\r\n  }\r\n\r\n  let promise: Promise<void>;\r\n  if('getNotifications' in ctx.registration) {\r\n    promise = ctx.registration.getNotifications({}).then((notifications) => {\r\n      for(let i = 0, len = notifications.length; i < len; ++i) {\r\n        try {\r\n          notifications[i].close();\r\n        } catch(e) {}\r\n      }\r\n    }).catch((error) => {\r\n      log.error('Offline register SW error', error);\r\n    });\r\n  } else {\r\n    promise = Promise.resolve();\r\n  }\r\n\r\n  notifications.clear();\r\n\r\n  return promise;\r\n}\r\n\r\nfunction userInvisibleIsSupported() {\r\n  return IS_FIREFOX;\r\n}\r\n\r\nfunction fireNotification(obj: PushNotificationObject, settings: PushStorage['push_settings'], lang: PushStorage['push_lang']) {\r\n  const icon = 'assets/img/logo_filled_rounded.png';\r\n  let title = obj.title || 'Telegram';\r\n  let body = obj.description || '';\r\n  let peerId: string;\r\n\r\n  if(obj.custom) {\r\n    if(obj.custom.channel_id) {\r\n      peerId = '' + -obj.custom.channel_id;\r\n    } else if(obj.custom.chat_id) {\r\n      peerId = '' + -obj.custom.chat_id;\r\n    } else {\r\n      peerId = obj.custom.from_id || '';\r\n    }\r\n  }\r\n\r\n  obj.custom.peerId = '' + peerId;\r\n  let tag = 'peer' + peerId;\r\n\r\n  if(settings && settings.nopreview) {\r\n    title = 'Telegram';\r\n    body = lang.push_message_nopreview || 'You have a new message';\r\n    tag = 'unknown_peer';\r\n  }\r\n\r\n  log('show notify', title, body, icon, obj);\r\n\r\n  const actions: (Omit<NotificationAction, 'action'> & {action: PushNotificationObject['action']})[] = [{\r\n    action: 'mute1d',\r\n    title: lang.push_action_mute1d || 'Mute for 24H'\r\n  }/* , {\r\n    action: 'push_settings',\r\n    title: lang.push_action_settings || 'Settings'\r\n  } */];\r\n\r\n  const notificationPromise = ctx.registration.showNotification(title, {\r\n    body,\r\n    icon,\r\n    tag,\r\n    data: obj,\r\n    actions\r\n  });\r\n\r\n  return notificationPromise.then((event) => {\r\n    // @ts-ignore\r\n    if(event && event.notification) {\r\n      // @ts-ignore\r\n      pushToNotifications(event.notification);\r\n    }\r\n  }).catch((error) => {\r\n    log.error('Show notification promise', error);\r\n  });\r\n}\r\n\r\nexport function onPing(task: ServiceWorkerPingTask, event: ExtendableMessageEvent) {\r\n  const client = event.ports && event.ports[0] || event.source;\r\n  const payload = task.payload;\r\n\r\n  if(payload.localNotifications) {\r\n    getter.set('push_last_alive', Date.now());\r\n  }\r\n\r\n  if(pendingNotification &&\r\n      client &&\r\n      'postMessage' in client) {\r\n    client.postMessage(pendingNotification, []);\r\n    pendingNotification = undefined;\r\n  }\r\n\r\n  if(payload.lang) {\r\n    getter.set('push_lang', payload.lang);\r\n  }\r\n\r\n  if(payload.settings) {\r\n    getter.set('push_settings', payload.settings);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '.';\r\n\r\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\r\n  name: 'tweb',\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }]\r\n};\r\n\r\nexport default DATABASE_STATE;\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\n                  \n                                   \n          \n//import CacheStorageController from '../cacheStorage';\nimport type { Modify, WorkerTaskTemplate, WorkerTaskVoidTemplate } from '../../types';\nimport type { InputFileLocation, InputWebFileLocation, UploadFile } from '../../layer';\nimport type { WebPushApiManager } from '../mtproto/webPushApiManager';\nimport type { PushNotificationObject } from './push';\nimport type { ToggleStorageTask } from '../mtproto/mtprotoworker';\nimport type { MyUploadFile } from '../mtproto/apiFileManager';\nimport { logger, LogTypes } from '../logger';\nimport { CancellablePromise } from '../../helpers/cancellablePromise';\nimport { CACHE_ASSETS_NAME, requestCache } from './cache';\nimport onStreamFetch from './stream';\nimport { closeAllNotifications, onPing } from './push';\nimport CacheStorageController from '../cacheStorage';\n\nexport const log = logger('SW', LogTypes.Error | LogTypes.Debug | LogTypes.Log | LogTypes.Warn);\nconst ctx = self as any as ServiceWorkerGlobalScope;\nexport const deferredPromises: Map<WindowClient['id'], {[taskId: string]: CancellablePromise<any>}> = new Map();\n\nexport interface RequestFilePartTask extends Modify<WorkerTaskTemplate, {id: string}> {\n  type: 'requestFilePart',\n  payload: [number, InputFileLocation | InputWebFileLocation, number, number]\n};\n\nexport interface RequestFilePartTaskResponse extends Modify<WorkerTaskTemplate, {id: string}> {\n  type: 'requestFilePart',\n  payload?: MyUploadFile,\n  originalPayload?: RequestFilePartTask['payload']\n};\n\nexport interface ServiceWorkerPingTask extends WorkerTaskVoidTemplate {\n  type: 'ping',\n  payload: {\n    localNotifications: boolean,\n    lang: {\n      push_action_mute1d: string\n      push_action_settings: string\n      push_message_nopreview: string\n    },\n    settings: WebPushApiManager['settings']\n  }\n};\n\nexport interface ServiceWorkerNotificationsClearTask extends WorkerTaskVoidTemplate {\n  type: 'notifications_clear'\n};\n\nexport interface ServiceWorkerPushClickTask extends WorkerTaskVoidTemplate {\n  type: 'push_click',\n  payload: PushNotificationObject\n};\n\nexport type ServiceWorkerTask = RequestFilePartTaskResponse | ServiceWorkerPingTask | ServiceWorkerNotificationsClearTask | ToggleStorageTask;\n\n                   \nconst taskListeners: {\n  [type in ServiceWorkerTask['type']]: (task: any, event: ExtendableMessageEvent) => void\n} = {\n  notifications_clear: () => {\n    closeAllNotifications();\n  },\n  ping: (task: ServiceWorkerPingTask, event) => {\n    onPing(task, event);\n  },\n  requestFilePart: (task: RequestFilePartTaskResponse, e: ExtendableMessageEvent) => {\n    const windowClient = e.source as WindowClient;\n    const promises = deferredPromises.get(windowClient.id);\n    if(!promises) {\n      return;\n    }\n\n    const promise = promises[task.id];\n    if(promise) {\n      if(task.error) {\n        promise.reject(task.error);\n      } else {\n        promise.resolve(task.payload);\n      }\n  \n      delete promises[task.id];\n    }\n  },\n  toggleStorage: (task: ToggleStorageTask) => {\n    CacheStorageController.toggleStorage(task.payload);\n  }\n};\nctx.addEventListener('message', (e) => {\n  const task = e.data as ServiceWorkerTask;\n  const callback = taskListeners[task.type];\n  if(callback) {\n    callback(task, e);\n  }\n});\n          \n\n//const cacheStorage = new CacheStorageController('cachedAssets');\n/* let taskId = 0;\n\nexport function getTaskId() {\n  return taskId;\n}\n\nexport function incrementTaskId() {\n  return taskId++;\n} */\n\nconst onFetch = (event: FetchEvent): void => {\n  if(event.request.url.indexOf(location.origin + '/') === 0 && event.request.url.match(/\\.(js|css|jpe?g|json|wasm|png|mp3|svg|tgs|ico|woff2?|ttf|webmanifest?)(?:\\?.*)?$/)) {\n    return event.respondWith(requestCache(event));\n  }\n\n  try {\n    const [, url, scope, params] = /http[:s]+\\/\\/.*?(\\/(.*?)(?:$|\\/(.*)$))/.exec(event.request.url) || [];\n\n    //log.debug('[fetch]:', event);\n  \n    switch(scope) {\n      case 'stream': {\n        onStreamFetch(event, params);\n        break;\n      }\n    }\n  } catch(err) {\n    event.respondWith(new Response('', {\n      status: 500,\n      statusText: 'Internal Server Error',\n    }));\n  }\n};\n\nconst onChangeState = () => {\n  ctx.onfetch = onFetch;\n};\n\nctx.addEventListener('install', (event) => {\n  log('installing');\n  event.waitUntil(ctx.skipWaiting()); // Activate worker immediately\n});\n\nctx.addEventListener('activate', (event) => {\n  log('activating', ctx);\n  event.waitUntil(ctx.caches.delete(CACHE_ASSETS_NAME));\n  event.waitUntil(ctx.clients.claim());\n});\n\nctx.onerror = (error) => {\n  log.error('error:', error);\n};\n\nctx.onunhandledrejection = (error) => {\n  log.error('onunhandledrejection:', error);\n};\n\nctx.onoffline = ctx.ononline = onChangeState;\n\nonChangeState();\n","export default function timeout(delay: number): Promise<Response> {\r\n  return new Promise(((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(new Response('', {\r\n        status: 408,\r\n        statusText: 'Request timed out.',\r\n      }));\r\n    }, delay);\r\n  }));\r\n}\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","oldGetScript","u","oldLoadScript","e","queryMap","Map","countMap","chunkId","has","catch","error","retries","realSrc","message","request","Promise","resolve","setTimeout","cacheBust","Date","now","set","Modes","test","location","search","indexOf","debug","http","ssl","multipleConnections","asServiceWorker","transport","DEBUG","window","self","USER_AGENT","navigator","userAgent","IS_SAFARI","toLowerCase","vendor","platform","maxTouchPoints","match","IS_FIREFOX","IS_SERVICE_WORKER","ServiceWorkerGlobalScope","IS_WEB_WORKER","WorkerGlobalScope","getWindowClients","clients","matchAll","includeUncontrolled","type","notifyServiceWorker","all","args","then","listeners","length","slice","forEach","listener","postMessage","LogTypes","bind","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","dT","toFixed","getCallerFunctionNameFromLine","IS_WEBKIT","line","split","splitted","trim","lastIndexOf","STYLES_SUPPORTED","LINE_INDEX","getCallerFunctionName","lines","stack","LOGGER_STYLES","methods","logger","prefix","ignoreDebugReset","style","originalPrefix","originalStyle","log","console","method","logType","setPrefix","newPrefix","setLevel","level","reduce","acc","v","bindPrefix","CACHE_ASSETS_NAME","isCorrectResponse","response","ok","status","timeoutRace","promise","race","reject","readBlobAsUint8Array","blob","reader","FileReader","addEventListener","target","result","readBlobAs","readBlobAsArrayBuffer","buffer","Uint8Array","blobConstruct","blobParts","mimeType","safeMimeType","blobSafeMimeType","Blob","bb","BlobBuilder","blobPart","append","getBlob","constructor","blobSupported","this","isAvailable","write","fileWriter","bytes","arr","getFakeFileWriter","saveFileCallback","part","push","truncate","finalize","saveToStorage","CacheStorageController","dbName","useStorage","STORAGES","openDatabase","openDbPromise","caches","open","delete","entryName","timeoutOperation","cache","deleteAll","save","put","getFile","fileName","saveFile","Response","headers","size","callback","rejected","timeout","undefined","res","err","clearTimeout","getFileWriter","fakeWriter","static","enabled","map","storage","cacheStorage","CHUNK_CACHED_TIME_HEADER","setInterval","keys","requests","filtered","timestamp","url","promises","id","ignoreSearch","ignoreVary","clientId","deferredPromises","find","client","taskId","streams","Stream","info","loadedOffsets","Set","destroy","getId","limitPart","STREAM_CHUNK_UPPER_LIMIT","STREAM_CHUNK_MIDDLE_LIMIT","destroyDebounced","fn","ms","shouldRunFirst","shouldRunLast","waitingTimeout","waitingPromise","hadNewCall","_resolve","_reject","debounce","requestFilePartFromWorker","alignedOffset","limit","fromPreload","task","payload","dcId","JSON","stringify","windowClient","deferred","uploadFile","add","deferredHelper","isFulfilled","isRejected","notify","notifyAll","lastNotify","addNotifyListener","value","finally","cancel","assign","deferredPromise","bytesPromise","saveChunkToCache","preloadChunks","requestFilePartFromCache","getChunkKey","requestFilePart","preloadChunk","offset","end","alignOffset","requestRange","range","possibleResponse","statusText","responseForSafariFirstRange","Math","ceil","alignLimit","min","ab","byteLength","base","IDBStorage","db","storeName","storageIsAvailable","object","fromObject","i","safeAssign","name","preserve","onclose","close","createNew","indexedDB","version","finished","onerror","onsuccess","event","calledNew","onabort","transaction","onversionchange","onupgradeneeded","warn","oldVersion","newVersion","stores","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","Array","isArray","concat","getObjectStore","objectStore","clear","idx","mode","perf","performance","oncomplete","results","r","getAll","defaultBaseUrl","protocol","hostname","pathname","join","getter","defaults","push_mute_until","push_last_alive","push_lang","push_settings","data","json","hasActiveWindows","checksPromise","muteUntil","lastAliveTime","clientList","nowTime","userInvisibleIsSupported","badge","reason","notificationPromise","settings","lang","icon","peerId","title","body","description","custom","channel_id","chat_id","from_id","tag","nopreview","push_message_nopreview","actions","action","push_action_mute1d","registration","showNotification","notification","notifications","onCloseNotification","fireNotification","closePromise","closeAllNotifications","waitUntil","pendingNotification","focus","openWindow","baseUrl","getNotifications","len","taskListeners","notifications_clear","ping","ports","source","localNotifications","onPing","toggleStorage","onFetch","origin","respondWith","file","fetch","clone","replace","random","requestCache","scope","params","exec","header","chunks","ranges","parseRange","parse","decodeURIComponent","stream","onStreamFetch","onChangeState","onfetch","skipWaiting","claim","onunhandledrejection","onoffline","ononline"],"sourceRoot":""}