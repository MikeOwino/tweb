{"version":3,"file":"690.8669226af7b8cc74abde.chunk.js","mappings":"2FAAe,SAASA,KAAiBC,GACvC,MAAMC,EAASD,EAAKE,QAAO,CAACC,EAAKC,IAAMD,GAAQC,EAAkBC,YAAeD,EAAiBH,SAAS,GAEpGK,EAAM,IAAIC,WAAWN,GAE3B,IAAIO,EAAa,EAMjB,OALAR,EAAKS,SAAQC,IACXJ,EAAIK,IAAID,aAAaE,YAAc,IAAIL,WAAWG,GAAKA,EAAGF,GAC1DA,GAAeE,EAAkBL,YAAeK,EAAiBT,UAG5DK,E,iCCXM,SAASO,EAAaC,GACnC,MAAMC,EAAMD,EAAUb,OAChBe,EAAQ,IAAIT,WAAWU,KAAKC,KAAKH,EAAM,IAC7C,IAAII,EAAQ,EAETJ,EAAM,IACPC,EAAMG,KAAWC,SAASN,EAAUO,OAAO,GAAI,KAGjD,IAAI,IAAIC,EAAIH,EAAOG,EAAIP,EAAKO,GAAK,EAC/BN,EAAMG,KAAWC,SAASN,EAAUS,OAAOD,EAAG,GAAI,IAGpD,OAAON,E,iCCbM,SAASQ,EAAWR,GACjC,MAAMf,EAASe,EAAMf,OACfwB,EAAgB,IAAIC,MAAMzB,GAChC,IAAI,IAAIqB,EAAI,EAAGA,EAAIrB,IAAUqB,EAC3BG,EAAIH,IAAMN,EAAMM,GAAK,GAAK,IAAM,KAAON,EAAMM,IAAM,GAAGK,SAAS,IAEjE,OAAOF,EAAIG,KAAK,I,yECIlBC,OAAOC,eAAevB,WAAWwB,UAAW,MAAO,CACjDC,IAAK,WACH,OAAO,OAAWC,OAGpBtB,IAAK,SAASuB,GACZD,KAAKtB,KAAI,OAAauB,KAExBC,YAAY,EACZC,cAAc,IAGhB7B,WAAWwB,UAAUM,UAAY,WAC/B,IAAGC,UAAU,oBAAqBA,QAGhC,MAAM,IAAIC,MAAM,oBAGlB,OALED,OAAOE,gBAAgBP,MAKlBA,MAGT1B,WAAWwB,UAAUU,OAAS,YAAYzC,GACxC,OAAO,OAAciC,QAASjC,IAOhCO,WAAWwB,UAAUW,OAAS,WAC5B,MAAO,IAAIT,OAIbP,MAAMK,UAAUY,cAAgB,SAAYC,GAC1C,IAAIC,EAAQZ,KAAKa,UAAUF,GAC3B,OAAkB,IAAXC,EAAeZ,KAAKc,OAAOF,EAAO,GAAG,QAAKG,GAGnDC,OAAOlB,UAAUmB,SAAW,SAASC,GAAW,GAC9C,MAAMC,EAAUhC,SAASa,KAAO,GAAI,IAC9BoB,EAAQpC,KAAKqC,MAAMF,EAAU,MACnC,IAAIG,EAAetC,KAAKqC,OAAOF,EAAmB,KAARC,GAAiB,IACvDG,EAAeJ,EAAmB,KAARC,EAA2B,GAAVE,EAK/C,OAHGF,IAAOF,GAAW,GAClBI,EAAU,KAAIA,EAAUJ,EAAW,IAAMI,EAAUA,GACnDC,EAAU,KAAIA,EAAU,IAAMA,IACzBH,EAAqCA,EAAQ,IAAM,IAAME,EAAU,IAAMC,GAYnFC,QAAQ1B,UAAU2B,QAAUD,QAAQ1B,UAAU2B,SAAW,SAA8BC,GACrF,MAAMC,EAAaC,GAAwBJ,QAAQK,QAAQH,KAAMI,KAAKF,GACtE,OAAO5B,KAAK8B,MACVC,GAAUJ,GAAU,IAAMI,MAC1BC,GAAUL,GAAU,IAAMH,QAAQS,OAAOD,QAI7CR,QAAQ1B,UAAUoC,YAAc,SAA8BR,GAC5D,OAAO1B,KAAKmC,OAAM,SAAUV,QAAQC","sources":["webpack://tweb/./src/helpers/bytes/bufferConcats.ts","webpack://tweb/./src/helpers/bytes/bytesFromHex.ts","webpack://tweb/./src/helpers/bytes/bytesToHex.ts","webpack://tweb/./src/lib/polyfill.ts"],"sourcesContent":["export default function bufferConcats(...args: (ArrayBuffer | Uint8Array | number[])[]) {\n  const length = args.reduce((acc, v) => acc + ((v as ArrayBuffer).byteLength || (v as Uint8Array).length), 0);\n\n  const tmp = new Uint8Array(length);\n  \n  let lastLength = 0;\n  args.forEach(b => {\n    tmp.set(b instanceof ArrayBuffer ? new Uint8Array(b) : b, lastLength);\n    lastLength += (b as ArrayBuffer).byteLength || (b as Uint8Array).length;\n  });\n\n  return tmp/* .buffer */;\n}\n","export default function bytesFromHex(hexString: string) {\n  const len = hexString.length;\n  const bytes = new Uint8Array(Math.ceil(len / 2));\n  let start = 0;\n\n  if(len % 2) { // read 0x581 as 0x0581\n    bytes[start++] = parseInt(hexString.charAt(0), 16);\n  }\n\n  for(let i = start; i < len; i += 2) {\n    bytes[start++] = parseInt(hexString.substr(i, 2), 16);\n  }\n\n  return bytes;\n}\n","export default function bytesToHex(bytes: ArrayLike<number>) {\n  const length = bytes.length;\n  const arr: string[] = new Array(length);\n  for(let i = 0; i < length; ++i) {\n    arr[i] = (bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16);\n  }\n  return arr.join('');\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport bufferConcats from \"../helpers/bytes/bufferConcats\";\nimport bytesFromHex from \"../helpers/bytes/bytesFromHex\";\nimport bytesToHex from \"../helpers/bytes/bytesToHex\";\n\nObject.defineProperty(Uint8Array.prototype, 'hex', {\n  get: function(): string {\n    return bytesToHex(this);\n  },\n  \n  set: function(str: string) {\n    this.set(bytesFromHex(str));\n  },\n  enumerable: true,\n  configurable: true\n});\n\nUint8Array.prototype.randomize = function() {\n  if(crypto && 'getRandomValues' in crypto) {\n    crypto.getRandomValues(this);\n  } else {\n    throw new Error('NO_SECURE_RANDOM');\n  }\n  \n  return this;\n};\n\nUint8Array.prototype.concat = function(...args: Array<Uint8Array | ArrayBuffer | number[]>) {\n  return bufferConcats(this, ...args);\n};\n\n/* Uint8Array.prototype.toString = function() {\n  return String.fromCharCode.apply(null, [...this]);\n}; */\n\nUint8Array.prototype.toJSON = function() {\n  return [...this];\n  //return {type: 'bytes', value: [...this]};\n};\n\nArray.prototype.findAndSplice = function<T>(verify: (value: T, index?: number, array?: Array<T>) => boolean) {\n  let index = this.findIndex(verify);\n  return index !== -1 ? this.splice(index, 1)[0] : undefined;\n};\n\nString.prototype.toHHMMSS = function(leadZero = false) {\n  const sec_num = parseInt(this + '', 10);\n  const hours = Math.floor(sec_num / 3600);\n  let minutes: any = Math.floor((sec_num - (hours * 3600)) / 60);\n  let seconds: any = sec_num - (hours * 3600) - (minutes * 60);\n  \n  if(hours) leadZero = true;\n  if(minutes < 10) minutes = leadZero ? \"0\" + minutes : minutes;\n  if(seconds < 10) seconds = \"0\" + seconds;\n  return (hours ? /* ('0' + hours).slice(-2) */hours + ':' : '') + minutes + ':' + seconds;\n};\n\n/* Promise.prototype.finally = Promise.prototype.finally || {\n  finally(fn: () => any) {\n    const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);\n    return this.then(\n      result => onFinally(() => result),\n      reason => onFinally(() => Promise.reject(reason))\n    );\n  }\n}.finally; */\nPromise.prototype.finally = Promise.prototype.finally || function<T>(this: Promise<T>, fn: () => any) {\n  const onFinally = (callback: typeof fn) => Promise.resolve(fn()).then(callback);\n  return this.then(\n    result => onFinally(() => result),\n    reason => onFinally(() => Promise.reject(reason))\n  );\n};\n\nPromise.prototype.safeFinally = function<T>(this: Promise<T>, fn: () => any) {\n  return this.catch(() => {}).finally(fn);\n};\n\ndeclare global {\n  interface Uint8Array {\n    hex: string;\n    randomize: () => Uint8Array,\n    concat: (...args: Array<Uint8Array | ArrayBuffer | number[]>) => Uint8Array,\n    //toString: () => string,\n    toJSON: () => number[],\n    //toJSON: () => {type: 'bytes', value: number[]},\n  }\n  \n  interface Array<T> {\n    findAndSplice(verify: (value: T, index?: number, array?: Array<T>) => boolean): T;\n  }\n  \n  interface String {\n    toHHMMSS(leadZero?: boolean): string;\n  }\n\n  interface Promise<T> {\n    finally: (onfinally?: () => void) => Promise<T>;\n    safeFinally: (onfinally?: () => void) => Promise<T>;\n  }\n}\n"],"names":["bufferConcats","args","length","reduce","acc","v","byteLength","tmp","Uint8Array","lastLength","forEach","b","set","ArrayBuffer","bytesFromHex","hexString","len","bytes","Math","ceil","start","parseInt","charAt","i","substr","bytesToHex","arr","Array","toString","join","Object","defineProperty","prototype","get","this","str","enumerable","configurable","randomize","crypto","Error","getRandomValues","concat","toJSON","findAndSplice","verify","index","findIndex","splice","undefined","String","toHHMMSS","leadZero","sec_num","hours","floor","minutes","seconds","Promise","finally","fn","onFinally","callback","resolve","then","result","reason","reject","safeFinally","catch"],"sourceRoot":""}