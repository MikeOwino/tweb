{"version":3,"file":"141.f006cd3b8bcd5e635657.chunk.js","mappings":"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","sources":["webpack://tweb/./src/config/databases/state.ts","webpack://tweb/./src/config/debug.ts","webpack://tweb/./src/config/modes.ts","webpack://tweb/./src/helpers/blob/blobConstruct.ts","webpack://tweb/./src/helpers/blob/blobSafeMimeType.ts","webpack://tweb/./src/helpers/cancellablePromise.ts","webpack://tweb/./src/helpers/context.ts","webpack://tweb/./src/helpers/eventListenerBase.ts","webpack://tweb/./src/helpers/noop.ts","webpack://tweb/./src/helpers/object/copy.ts","webpack://tweb/./src/helpers/object/isObject.ts","webpack://tweb/./src/helpers/object/safeAssign.ts","webpack://tweb/./src/helpers/random.ts","webpack://tweb/./src/helpers/schedulers/throttle.ts","webpack://tweb/./src/lib/logger.ts","webpack://tweb/./src/lib/mtproto/mtproto_config.ts","webpack://tweb/./src/lib/rootScope.ts","webpack://tweb/./src/lib/localStorage.ts","webpack://tweb/./src/lib/sessionStorage.ts","webpack://tweb/./src/lib/stateStorage.ts","webpack://tweb/./src/lib/idb.ts","webpack://tweb/./src/lib/storage.ts"],"sourcesContent":["/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '.';\r\n\r\nconst DATABASE_STATE: Database<'session' | 'stickerSets' | 'users' | 'chats' | 'messages' | 'dialogs'> = {\r\n  name: 'tweb',\r\n  version: 7,\r\n  stores: [{\r\n    name: 'session'\r\n  }, {\r\n    name: 'stickerSets'\r\n  }, {\r\n    name: 'users'\r\n  }, {\r\n    name: 'chats'\r\n  }, {\r\n    name: 'dialogs'\r\n  }, {\r\n    name: 'messages'\r\n  }]\r\n};\r\n\r\nexport default DATABASE_STATE;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from \"./modes\";\r\n\r\nexport const DEBUG = process.env.NODE_ENV !== 'production' || Modes.debug;\r\nconst ctx: any = typeof(window) !== 'undefined' ? window : self;\r\nexport const MOUNT_CLASS_TO: any = DEBUG || true/*  && false */ ? ctx : {};\r\nexport default DEBUG;\r\n\r\n//let m = DEBUG;\r\n/* if(!DEBUG) {\r\n  ctx.sandpitTurtle = () => {\r\n    //if(!m) {\r\n      for(let i in MOUNT_CLASS_TO) {\r\n        ctx[i] = MOUNT_CLASS_TO[i];\r\n      }\r\n      //m = true;\r\n    //}\r\n  \r\n    //DEBUG = !DEBUG;\r\n  };\r\n} */\r\n\r\n/* export const superDebug = (object: any, key: string) => {\r\n  var d = object[key];\r\n  var beforeStr = '', afterStr = '';\r\n  for(var r of d) {\r\n    beforeStr += r.before.hex + '\\n';\r\n    afterStr += r.after.hex + '\\n';\r\n  }\r\n\r\n  beforeStr = beforeStr.trim();\r\n  afterStr = afterStr.trim();\r\n  //var beforeStr = d.map(r => r.before.hex).join('\\n');\r\n  //var afterStr = d.map(r => r.after.hex).join('\\n');\r\n\r\n  var dada = (name: string, str: string) => {\r\n    var a = document.createElement('a');\r\n    a.target = '_blank';\r\n    a.download = name + '.txt';\r\n    a.href = URL.createObjectURL(new Blob([str], {\r\n      type: 'text/plain'\r\n    }));\r\n    document.body.append(a);\r\n    a.click();\r\n  };\r\n\r\n  dada(key + '_' + 'before', beforeStr);\r\n  dada(key + '_' + 'after', afterStr);\r\n}\r\n\r\nMOUNT_CLASS_TO.superDebug = superDebug; */\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport type { TransportType } from \"../lib/mtproto/dcConfigurator\";\n\nconst Modes = {\n  test: location.search.indexOf('test=1') > 0/*  || true */,\n  debug: location.search.indexOf('debug=1') > 0,\n  http: false,\n  ssl: true, // location.search.indexOf('ssl=1') > 0 || location.protocol === 'https:' && location.search.indexOf('ssl=0') === -1,\n  multipleConnections: true,\n  asServiceWorker: false,\n  transport: 'websocket' as TransportType\n};\n\n                        \nModes.http = location.search.indexOf('http=1') > 0;\n          \n\n                                       \n                  \n          \n\nif(Modes.http) {\n  Modes.transport = 'https';\n}\n\n                  \n                             \n          \n\nexport default Modes;\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\nimport blobSafeMimeType from \"./blobSafeMimeType\";\n\nexport default function blobConstruct(blobParts: any, mimeType: string = ''): Blob {\n  let blob;\n  const safeMimeType = blobSafeMimeType(mimeType);\n  try {\n    blob = new Blob(blobParts, {type: safeMimeType});\n  } catch(e) {\n    // @ts-ignore\n    let bb = new BlobBuilder;\n    blobParts.forEach((blobPart: any) => {\n      bb.append(blobPart);\n    });\n    blob = bb.getBlob(safeMimeType);\n  }\n  return blob;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n * \n * Originally from:\n * https://github.com/zhukov/webogram\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\n * https://github.com/zhukov/webogram/blob/master/LICENSE\n */\n\n// https://www.iana.org/assignments/media-types/media-types.xhtml\nexport default function blobSafeMimeType(mimeType: string) {\n  if([\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp',\n    'image/bmp',\n    'video/mp4',\n    'video/webm',\n    'video/quicktime',\n    'audio/ogg',\n    'audio/mpeg',\n    'audio/mp4',\n    'application/json',\n    'application/pdf'\n  ].indexOf(mimeType) === -1) {\n    return 'application/octet-stream';\n  }\n\n  return mimeType;\n}\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport noop from \"./noop\";\r\n\r\nexport interface CancellablePromise<T> extends Promise<T> {\r\n  resolve?: (value: T) => void,\r\n  reject?: (...args: any[]) => void,\r\n  cancel?: () => void,\r\n\r\n  notify?: (...args: any[]) => void,\r\n  notifyAll?: (...args: any[]) => void,\r\n  lastNotify?: any,\r\n  listeners?: Array<(...args: any[]) => void>,\r\n  addNotifyListener?: (callback: (...args: any[]) => void) => void,\r\n\r\n  isFulfilled?: boolean,\r\n  isRejected?: boolean\r\n}\r\n\r\nexport function deferredPromise<T>() {\r\n  let deferredHelper: any = {\r\n    isFulfilled: false, \r\n    isRejected: false,\r\n\r\n    notify: () => {}, \r\n    notifyAll: (...args: any[]) => {\r\n      deferredHelper.lastNotify = args;\r\n      deferredHelper.listeners.forEach((callback: any) => callback(...args));\r\n    }, \r\n\r\n    listeners: [],\r\n    addNotifyListener: (callback: (...args: any[]) => void) => {\r\n      if(deferredHelper.lastNotify) {\r\n        callback(...deferredHelper.lastNotify);\r\n      }\r\n\r\n      deferredHelper.listeners.push(callback);\r\n    }\r\n  };\r\n\r\n  let deferred: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\r\n    deferredHelper.resolve = (value: T) => {\r\n      if(deferred.isFulfilled || deferred.isRejected) return;\r\n\r\n      deferred.isFulfilled = true;\r\n      resolve(value);\r\n    };\r\n    \r\n    deferredHelper.reject = (...args: any[]) => {\r\n      if(deferred.isRejected || deferred.isFulfilled) return;\r\n      \r\n      deferred.isRejected = true;\r\n      reject(...args);\r\n    };\r\n  });\r\n\r\n  // @ts-ignore\r\n  /* deferred.then = (resolve: (value: T) => any, reject: (...args: any[]) => any) => {\r\n    const n = deferredPromise<ReturnType<typeof resolve>>();\r\n    \r\n  }; */\r\n\r\n  deferred.catch(noop).finally(() => {\r\n    deferred.notify = deferred.notifyAll = deferred.lastNotify = null;\r\n    deferred.listeners.length = 0;\r\n\r\n    if(deferred.cancel) {\r\n      deferred.cancel = () => {};\r\n    }\r\n  });\r\n\r\n  Object.assign(deferred, deferredHelper);\r\n\r\n  return deferred;\r\n}","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n// в SW может быть сразу две переменных TRUE\r\nexport const IS_SERVICE_WORKER = typeof ServiceWorkerGlobalScope !== 'undefined' && self instanceof ServiceWorkerGlobalScope;\r\nexport const IS_WEB_WORKER = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && !IS_SERVICE_WORKER;\r\nexport const IS_WORKER = IS_WEB_WORKER || IS_SERVICE_WORKER;\r\n\r\nexport const getWindowClients = () => {\r\n  return (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' });\r\n};\r\n\r\nconst notifyServiceWorker = (all: boolean, ...args: any[]) => {\r\n  (self as any as ServiceWorkerGlobalScope)\r\n  .clients\r\n  .matchAll({ includeUncontrolled: false, type: 'window' })\r\n  .then((listeners) => {\r\n    if(!listeners.length) {\r\n      //console.trace('no listeners?', self, listeners);\r\n      return;\r\n    }\r\n\r\n    listeners.slice(all ? 0 : -1).forEach(listener => {\r\n      // @ts-ignore\r\n      listener.postMessage(...args);\r\n    });\r\n  });\r\n};\r\n\r\nconst notifyWorker = (...args: any[]) => {\r\n  // @ts-ignore\r\n  (self as any as DedicatedWorkerGlobalScope).postMessage(...args);\r\n};\r\n\r\nconst noop = () => {};\r\n\r\nexport const notifySomeone = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, false) : (IS_WEB_WORKER ? notifyWorker : noop);\r\nexport const notifyAll = IS_SERVICE_WORKER ? notifyServiceWorker.bind(null, true) : (IS_WEB_WORKER ? notifyWorker : noop);\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n//import { MOUNT_CLASS_TO } from \"../config/debug\";\r\nimport type { ArgumentTypes, SuperReturnType } from \"../types\";\r\n\r\n// class EventSystem {\r\n//   wm: WeakMap<any, Record<any, Set<any>>> = new WeakMap();\r\n\r\n//   add(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (listeners === undefined) {\r\n//         listeners = {};\r\n//     }\r\n//     let listenersForEvent = listeners[event];\r\n//     if (listenersForEvent === undefined) {\r\n//         listenersForEvent = new Set();\r\n//     }\r\n//     listenersForEvent.add(listener);\r\n//     listeners[event] = listenersForEvent;\r\n//     //target.addEventListener(event, listener);\r\n//     this.wm.set(target, listeners);\r\n//   };\r\n\r\n//   remove(target: any, event: any, listener: any) {\r\n//     let listeners = this.wm.get(target);\r\n//     if (!listeners) return;\r\n//     let listenersForEvent = listeners[event];\r\n//     if (!listenersForEvent) return;\r\n//     listenersForEvent.delete(listener);\r\n//   };\r\n  \r\n//   /* fire(target, event) {\r\n//      let listeners = this.wm.get(target);\r\n//      if (!listeners) return;\r\n//      let listenersForEvent = listeners[event];\r\n//      if (!listenersForEvent) return;\r\n//      for (let handler of handlers) {\r\n//          setTimeout(handler, 0, event, target); // we use a setTimeout here because we want event triggering to be asynchronous. \r\n//      }\r\n//   }; */\r\n// }\r\n\r\n// console.log = () => {};\r\n\r\n// const e = new EventSystem();\r\n// MOUNT_CLASS_TO.e = e;\r\n\r\nexport type EventListenerListeners = Record<string, Function>;\r\n// export type EventListenerListeners = Record<string, (...args: any[]) => any>;\r\n// export type EventListenerListeners = {[name in string]: Function};\r\n\r\n/**\r\n * Better not to remove listeners during setting\r\n * Should add listener callback only once\r\n */\r\n\r\n// type EventLitenerCallback<T> = (data: T) => \r\n// export default class EventListenerBase<Listeners extends {[name: string]: Function}> {\r\nexport default class EventListenerBase<Listeners extends EventListenerListeners> {\r\n  protected listeners: Partial<{\r\n    [k in keyof Listeners]: Array<{callback: Listeners[k], options: boolean | AddEventListenerOptions}>\r\n  }>;\r\n  protected listenerResults: Partial<{\r\n    [k in keyof Listeners]: ArgumentTypes<Listeners[k]>\r\n  }>;\r\n\r\n  private reuseResults: boolean;\r\n\r\n  constructor(reuseResults?: boolean) {\r\n    this._constructor(reuseResults);\r\n  }\r\n\r\n  public _constructor(reuseResults = false): any {\r\n    this.reuseResults = reuseResults;\r\n    this.listeners = {};\r\n    this.listenerResults = {};\r\n  }\r\n\r\n  public addEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], options?: boolean | AddEventListenerOptions) {\r\n    (this.listeners[name] ?? (this.listeners[name] = [])).push({callback, options}); // ! add before because if you don't, you won't be able to delete it from callback\r\n\r\n    if(this.listenerResults.hasOwnProperty(name)) {\r\n      callback(...this.listenerResults[name]);\r\n      \r\n      if((options as AddEventListenerOptions)?.once) {\r\n        this.listeners[name].pop();\r\n        return;\r\n      }\r\n    }\r\n    \r\n    //e.add(this, name, {callback, once});\r\n  }\r\n\r\n  public addMultipleEventsListeners(obj: {\r\n    [name in keyof Listeners]?: Listeners[name]\r\n  }) {\r\n    for(const i in obj) {\r\n      this.addEventListener(i, obj[i]);\r\n    }\r\n  }\r\n\r\n  public removeEventListener<T extends keyof Listeners>(name: T, callback: Listeners[T], options?: boolean | AddEventListenerOptions) {\r\n    if(this.listeners[name]) {\r\n      this.listeners[name].findAndSplice(l => l.callback === callback);\r\n    }\r\n    //e.remove(this, name, callback);\r\n  }\r\n\r\n  // * must be protected, but who cares\r\n  private _dispatchEvent<T extends keyof Listeners>(name: T, collectResults: boolean, ...args: ArgumentTypes<Listeners[T]>) {\r\n    if(this.reuseResults) {\r\n      this.listenerResults[name] = args;\r\n    }\r\n\r\n    const arr: Array<SuperReturnType<Listeners[typeof name]>> = collectResults && [];\r\n\r\n    const listeners = this.listeners[name];\r\n    if(listeners) {\r\n      // ! this one will guarantee execution even if delete another listener during setting\r\n      const left = listeners.slice();\r\n      left.forEach((listener) => {\r\n        const index = listeners.findIndex((l) => l.callback === listener.callback);\r\n        if(index === -1) {\r\n          return;\r\n        }\r\n\r\n        let result: any;\r\n        try {\r\n          result = listener.callback(...args);\r\n        } catch(err) {\r\n          console.error(err);\r\n        }\r\n\r\n        if(arr) {\r\n          arr.push(result);\r\n        }\r\n\r\n        if((listener.options as AddEventListenerOptions)?.once) {\r\n          this.removeEventListener(name, listener.callback);\r\n        }\r\n      });\r\n    }\r\n\r\n    return arr;\r\n  }\r\n\r\n  public dispatchResultableEvent<T extends keyof Listeners>(name: T, ...args: ArgumentTypes<Listeners[T]>) {\r\n    return this._dispatchEvent(name, true, ...args);\r\n  }\r\n\r\n  // * must be protected, but who cares\r\n  public dispatchEvent<L extends EventListenerListeners = Listeners, T extends keyof L = keyof L>(name: T, ...args: ArgumentTypes<L[T]>) {\r\n    // @ts-ignore\r\n    this._dispatchEvent(name, false, ...args);\r\n  }\r\n\r\n  public cleanup() {\r\n    this.listeners = {}; \r\n    this.listenerResults = {};\r\n  }\r\n}\r\n","export default function noop() {}\r\n","export default function copy<T>(obj: T): T {\n  //in case of premitives\n  if(obj === null || typeof(obj) !== \"object\") {\n    return obj;\n  }\n \n  //date objects should be \n  if(obj instanceof Date) {\n    return new Date(obj.getTime()) as any;\n  }\n \n  //handle Array\n  if(Array.isArray(obj)) {\n    // @ts-ignore\n    const clonedArr: T = obj.map(el => copy(el)) as any as T;\n    return clonedArr;\n  }\n \n  //lastly, handle objects\n  // @ts-ignore\n  let clonedObj = new obj.constructor();\n  for(var prop in obj){\n    if(obj.hasOwnProperty(prop)) {\n      clonedObj[prop] = copy(obj[prop]);\n    }\n  }\n  return clonedObj;\n}\n","export default function isObject<T extends Record<any, any>>(object: any): object is T {\n  return typeof(object) === 'object' && object !== null;\n}\n","export default function safeAssign<T>(object: T, fromObject: any) {\n  if(fromObject) {\n    for(let i in fromObject) {\n      if(fromObject[i] !== undefined) {\n        // @ts-ignore\n        object[i] = fromObject[i];\n      }\n    }\n  }\n\n  return object;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nconst arrays = {\n  8: new Uint8Array(1),\n  16: new Uint16Array(1),\n  32: new Uint32Array(1),\n};\nexport function nextRandomUint(bits: 8 | 16 | 32) {\n  const array = arrays[bits];\n  crypto.getRandomValues(array);\n  return array[0];\n}\n\nexport function randomLong() {\n  return '' + nextRandomUint(32) + nextRandomUint(32) % 0xFFFFFF;\n}\n","// * Jolly Cobra's schedulers\r\n\r\nimport { AnyToVoidFunction } from \"../../types\";\r\n\r\nexport default function throttle<F extends AnyToVoidFunction>(\r\n  fn: F,\r\n  ms: number,\r\n  shouldRunFirst = true,\r\n) {\r\n  let interval: number | null = null;\r\n  let isPending: boolean;\r\n  let args: Parameters<F>;\r\n\r\n  return (..._args: Parameters<F>) => {\r\n    isPending = true;\r\n    args = _args;\r\n\r\n    if(!interval) {\r\n      if(shouldRunFirst) {\r\n        isPending = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }\r\n\r\n      interval = setInterval(() => {\r\n        if (!isPending) {\r\n          clearInterval(interval!);\r\n          interval = null;\r\n          return;\r\n        }\r\n\r\n        isPending = false;\r\n        // @ts-ignore\r\n        fn(...args);\r\n      }, ms) as any;\r\n    }\r\n  };\r\n}\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport DEBUG from \"../config/debug\";\nimport { IS_FIREFOX, IS_SAFARI } from \"../environment/userAgent\";\nimport { IS_SERVICE_WORKER, IS_WEB_WORKER } from \"../helpers/context\";\n\nexport enum LogTypes {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Log = 4,\n  Debug = 8\n};\n\nexport const LOG_LEVELS = [LogTypes.None, LogTypes.Error, LogTypes.Warn, LogTypes.Log, LogTypes.Debug];\n\nconst _logTimer = Date.now();\nfunction dT() {\n  return '[' + ((Date.now() - _logTimer) / 1000).toFixed(3) + ']';\n}\n\nlet getCallerFunctionNameFromLine: (line: string) => string;\n\nconst IS_WEBKIT = IS_SAFARI || IS_FIREFOX;\n\nif(IS_WEBKIT) {\n  getCallerFunctionNameFromLine = (line) => {\n    const splitted = line.split('@');\n    return splitted[0];\n  };\n} else {\n  getCallerFunctionNameFromLine = (line: string) => {\n    const splitted = line.trim().split(' ');\n    if(splitted.length === 3) {\n      return splitted[1].slice(splitted[1].lastIndexOf('.') + 1);\n    }\n  };\n}\n\nconst STYLES_SUPPORTED = !IS_WEBKIT;\nconst LINE_INDEX = IS_WEBKIT ? 2 : 3;\n\nfunction getCallerFunctionName() {\n  const stack = new Error().stack;\n  const lines = stack.split('\\n');\n  const line = lines[LINE_INDEX] || lines[lines.length - 1];\n  // const match = line.match(/\\.([^\\.]+?)\\s/);\n  // line = match ? match[1] : line.trim();\n  const caller = getCallerFunctionNameFromLine(line) || '<anonymous>';\n  return '[' + caller + ']';\n}\n\nexport const LOGGER_STYLES = {\n  reset: \"\\x1b[0m\",\n  bright: \"\\x1b[1m\",\n  dim: \"\\x1b[2m\",\n  underscore: \"\\x1b[4m\",\n  blink: \"\\x1b[5m\",\n  reverse: \"\\x1b[7m\",\n  hidden: \"\\x1b[8m\",\n  // Foreground (text) colors\n  fg: {\n    black: \"\\x1b[30m\",\n    red: \"\\x1b[31m\",\n    green: \"\\x1b[32m\",\n    yellow: \"\\x1b[33m\",\n    blue: \"\\x1b[34m\",\n    magenta: \"\\x1b[35m\",\n    cyan: \"\\x1b[36m\",\n    white: \"\\x1b[37m\"\n  },\n  // Background colors\n  bg: {\n    black: \"\\x1b[40m\",\n    red: \"\\x1b[41m\",\n    green: \"\\x1b[42m\",\n    yellow: \"\\x1b[43m\",\n    blue: \"\\x1b[44m\",\n    magenta: \"\\x1b[45m\",\n    cyan: \"\\x1b[46m\",\n    white: \"\\x1b[47m\"\n  }\n};\n\nexport type Logger = {\n  (...args: any[]): void;\n  warn(...args: any[]): void;\n  info(...args: any[]): void;\n  error(...args: any[]): void;\n  trace(...args: any[]): void;\n  debug(...args: any[]): void;\n  assert(...args: any[]): void;\n  // log(...args: any[]): void;\n  setPrefix(newPrefix: string): void;\n  setLevel(level: 0 | 1 | 2 | 3 | 4): void;\n  bindPrefix(prefix: string): Logger;\n};\n\nconst methods: ['debug' | 'info' | 'warn' | 'error' | 'assert' | 'trace'/*  | 'log' */, LogTypes][] = [\n  [\"debug\", LogTypes.Debug], \n  [\"info\", LogTypes.Log], \n  [\"warn\", LogTypes.Warn], \n  [\"error\", LogTypes.Error], \n  [\"assert\", LogTypes.Error],\n  [\"trace\", LogTypes.Log],\n  // [\"log\", LogTypes.Log]\n];\n\nexport function logger(prefix: string, type: LogTypes = LogTypes.Log | LogTypes.Warn | LogTypes.Error, ignoreDebugReset = false, style = ''): Logger {\n  let originalPrefix: string;\n  if(!DEBUG && !ignoreDebugReset/*  || true */) {\n    type = LogTypes.Error;\n  }\n\n  if(!STYLES_SUPPORTED) {\n    style = '';\n  } else if(!style) {\n    if(IS_SERVICE_WORKER) style = LOGGER_STYLES.fg.yellow;\n    else if(IS_WEB_WORKER) style = LOGGER_STYLES.fg.cyan;\n  }\n\n  let originalStyle = style;\n  if(style) style = `%s ${style}%s`;\n  else style = '%s';\n\n  //level = LogLevels.log | LogLevels.warn | LogLevels.error | LogLevels.debug\n\n  const log: Logger = function(...args: any[]) {\n    return type & LogTypes.Log && console.log(style, dT(), prefix, getCallerFunctionName(), ...args);\n  } as any;\n\n  methods.forEach(([method, logType]) => {\n    log[method] = function(...args: any[]) {\n      return type & logType && console[method](style, dT(), prefix, getCallerFunctionName(), ...args);\n    };\n  });\n\n  log.setPrefix = function(newPrefix: string) {\n    originalPrefix = newPrefix;\n    prefix = '[' + newPrefix + ']';\n  };\n\n  log.setPrefix(prefix);\n\n  log.setLevel = function(level: 0 | 1 | 2 | 3 | 4) {\n    type = LOG_LEVELS.slice(0, level + 1).reduce((acc, v) => acc | v, 0) as any;\n  };\n\n  log.bindPrefix = function(prefix: string) {\n    return logger(`${originalPrefix}] [${prefix}`, type, ignoreDebugReset, originalStyle);\n  };\n\n  return log;\n};\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\n\r\n/**\r\n * Legacy Webogram's format, don't change dcID to camelCase. date is timestamp\r\n */\r\nexport type UserAuth = {dcID: number | string, date: number, id: PeerId};\r\n\r\nexport const NULL_PEER_ID: PeerId = 0;\r\nexport const REPLIES_PEER_ID: PeerId = 1271266957;\r\nexport const SERVICE_PEER_ID: PeerId = 777000;\r\nexport const MUTE_UNTIL = 0x7FFFFFFF;\r\nexport const BOT_START_PARAM = '';\r\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Message, StickerSet, Update, NotifyPeer, PeerNotifySettings, ConstructorDeclMap, Config, PollResults, Poll, WebPage, GroupCall, GroupCallParticipant, PhoneCall, MethodDeclMap, MessageReactions, ReactionCount } from \"../layer\";\nimport type { MyDocument } from \"./appManagers/appDocsManager\";\nimport type { AppMessagesManager, Dialog, MessagesStorage, MyMessage } from \"./appManagers/appMessagesManager\";\nimport type { MyDialogFilter } from \"./storages/filters\";\nimport type { Folder } from \"./storages/dialogs\";\nimport type { UserTyping } from \"./appManagers/appProfileManager\";\nimport type { State, Theme } from \"./appManagers/appStateManager\";\nimport type { MyDraftMessage } from \"./appManagers/appDraftsManager\";\nimport type { PushSubscriptionNotify } from \"./mtproto/webPushApiManager\";\nimport type { PushNotificationObject } from \"./serviceWorker/push\";\nimport type { ConnectionStatusChange } from \"./mtproto/connectionStatus\";\nimport type { GroupCallId } from \"./appManagers/appGroupCallsManager\";\nimport type GroupCallInstance from \"./calls/groupCallInstance\";\nimport type CallInstance from \"./calls/callInstance\";\nimport type { StreamAmplitude } from \"./calls/streamManager\";\nimport type Chat from \"../components/chat/chat\";\nimport { NULL_PEER_ID, UserAuth } from \"./mtproto/mtproto_config\";\nimport EventListenerBase from \"../helpers/eventListenerBase\";\nimport { MOUNT_CLASS_TO } from \"../config/debug\";\nimport { MTAppConfig } from \"./mtproto/appConfig\";\n\nexport type BroadcastEvents = {\n  'chat_full_update': ChatId,\n  'chat_update': ChatId,\n\n  'channel_update': ChatId,\n  \n  'user_update': UserId,\n  'user_auth': UserAuth,\n  'user_full_update': UserId,\n\n  'chat_changing': {from: Chat, to: Chat},\n\n  'peer_changed': PeerId,\n  'peer_changing': Chat,\n  'peer_pinned_messages': {peerId: PeerId, mids?: number[], pinned?: boolean, unpinAll?: true},\n  'peer_pinned_hidden': {peerId: PeerId, maxId: number},\n  'peer_typings': {peerId: PeerId, typings: UserTyping[]},\n  'peer_block': {peerId: PeerId, blocked: boolean},\n  'peer_title_edit': PeerId,\n  'peer_bio_edit': PeerId,\n  'peer_deleted': PeerId, // left chat, deleted user dialog, left channel\n  'peer_full_update': PeerId,\n\n  'filter_delete': MyDialogFilter,\n  'filter_update': MyDialogFilter,\n  'filter_new': MyDialogFilter,\n  'filter_order': number[],\n\n  'folder_unread': Folder,\n  \n  'dialog_draft': {peerId: PeerId, dialog: Dialog, drop: boolean, draft: MyDraftMessage | undefined, index: number},\n  'dialog_unread': {peerId: PeerId},\n  'dialog_flush': {peerId: PeerId},\n  'dialog_drop': {peerId: PeerId, dialog?: Dialog},\n  'dialog_migrate': {migrateFrom: PeerId, migrateTo: PeerId},\n  //'dialog_top': Dialog,\n  'dialog_notify_settings': Dialog,\n  // 'dialog_order': {dialog: Dialog, pos: number},\n  'dialogs_multiupdate': {[peerId: PeerId]: Dialog},\n  \n  'history_append': {storage: MessagesStorage, peerId: PeerId, mid: number},\n  'history_update': {storage: MessagesStorage, peerId: PeerId, mid: number},\n  'history_reply_markup': {peerId: PeerId},\n  'history_multiappend': AppMessagesManager['newMessagesToHandle'],\n  'history_delete': {peerId: PeerId, msgs: Set<number>},\n  'history_forbidden': PeerId,\n  'history_reload': PeerId,\n  'history_focus': {peerId: PeerId, threadId?: number, mid?: number, startParam?: string},\n  //'history_request': void,\n  \n  'message_edit': {storage: MessagesStorage, peerId: PeerId, mid: number},\n  'message_views': {peerId: PeerId, mid: number, views: number},\n  'message_sent': {storage: MessagesStorage, tempId: number, tempMessage: any, mid: number, message: MyMessage},\n  'message_reactions': {message: Message.message, changedResults: ReactionCount[]},\n  'messages_pending': void,\n  'messages_read': void,\n  'messages_downloaded': {peerId: PeerId, mids: number[]},\n  'messages_media_read': {peerId: PeerId, mids: number[]},\n\n  'replies_updated': Message.message,\n\n  'scheduled_new': {peerId: PeerId, mid: number},\n  'scheduled_delete': {peerId: PeerId, mids: number[]},\n\n  'album_edit': {peerId: PeerId, groupId: string, deletedMids: number[]},\n\n  'stickers_installed': StickerSet.stickerSet,\n  'stickers_deleted': StickerSet.stickerSet,\n\n  'media_play': {doc: MyDocument, message: Message.message, media: HTMLMediaElement},\n  'media_pause': void,\n  'media_playback_params': {volume: number, muted: boolean, playbackRate: number},\n  'media_stop': void,\n  \n  'state_cleared': void,\n  'state_synchronized': ChatId | void,\n  'state_synchronizing': ChatId | void,\n  \n  'contacts_update': UserId,\n  'avatar_update': PeerId,\n  'poll_update': {poll: Poll, results: PollResults},\n  'invalidate_participants': ChatId,\n  //'channel_settings': {channelId: number},\n  'webpage_updated': {id: WebPage.webPage['id'], msgs: {peerId: PeerId, mid: number, isScheduled: boolean}[]},\n\n  'connection_status_change': ConnectionStatusChange,\n  'settings_updated': {key: string, value: any},\n  'draft_updated': {peerId: PeerId, threadId: number, draft: MyDraftMessage | undefined, force?: boolean},\n  \n  'event-heavy-animation-start': void,\n  'event-heavy-animation-end': void,\n  \n  'im_mount': void,\n  'im_tab_change': number,\n  \n  'idle': boolean,\n  \n  'overlay_toggle': boolean,\n  \n  'background_change': void,\n  \n  'privacy_update': Update.updatePrivacy,\n  \n  'notify_settings': Update.updateNotifySettings,\n  'notify_peer_type_settings': {key: Exclude<NotifyPeer['_'], 'notifyPeer'>, settings: PeerNotifySettings},\n  \n  'language_change': string,\n  \n  'theme_change': void,\n  \n  'instance_activated': void,\n  'instance_deactivated': void,\n  \n  'push_notification_click': PushNotificationObject,\n  'push_init': PushSubscriptionNotify,\n  'push_subscribe': PushSubscriptionNotify,\n  'push_unsubscribe': PushSubscriptionNotify,\n  \n  'emoji_recent': string,\n  \n  'download_start': DocId,\n  'download_progress': any,\n  'document_downloaded': MyDocument,\n\n  'context_menu_toggle': boolean,\n  'choosing_sticker': boolean\n\n  'group_call_instance': GroupCallInstance,\n  'group_call_update': GroupCall,\n  'group_call_amplitude': {amplitudes: StreamAmplitude[], type: 'all' | 'input'},\n  'group_call_participant': {groupCallId: GroupCallId, participant: GroupCallParticipant},\n  // 'group_call_video_track_added': {instance: GroupCallInstance}\n\n  'call_instance': {hasCurrent: boolean, instance: CallInstance},\n  'call_accepting': CallInstance, // это костыль. используется при параллельном вызове, чтобы заменить звонок в topbarCall\n\n  'quick_reaction': string,\n\n  'missed_reactions_element': {message: Message.message, changedResults: ReactionCount[]}\n};\n\nexport class RootScope extends EventListenerBase<{\n  [name in Update['_']]: (update: ConstructorDeclMap[name]) => void\n} & {\n  [name in keyof BroadcastEvents]: (e: BroadcastEvents[name]) => void\n}> {\n  public overlaysActive = 0;\n  public myId: PeerId;\n  public idle = {\n    isIDLE: true,\n    deactivated: false,\n    focusPromise: Promise.resolve(),\n    focusResolve: () => {}\n  };\n  public connectionStatus: {[name: string]: ConnectionStatusChange} = {};\n  public settings: State['settings'];\n  public peerId: PeerId;\n  public filterId = 0;\n  public systemTheme: Theme['name'];\n  public config: Partial<Config.config> = {\n    forwarded_count_max: 100,\n    edit_time_limit: 86400 * 2,\n    pinned_dialogs_count_max: 5,\n    pinned_infolder_count_max: 100,\n    message_length_max: 4096,\n    caption_length_max: 1024,\n  };\n  public appConfig: MTAppConfig;\n\n  public themeColor: string;\n  private _themeColorElem: Element;\n\n  constructor() {\n    super();\n\n    this.addEventListener('peer_changed', (peerId) => {\n      this.peerId = peerId;\n      document.body.classList.toggle('has-chat', !!peerId);\n    });\n\n    this.addEventListener('user_auth', ({id}) => {\n      // @ts-ignore\n      this.myId = typeof(NULL_PEER_ID) === 'number' ? +id : '' + id;\n    });\n\n    this.addEventListener('connection_status_change', (status) => {\n      this.connectionStatus[status.name] = status;\n    });\n\n    this.addEventListener('idle', (isIDLE) => {\n      if(isIDLE) {\n        this.idle.focusPromise = new Promise((resolve) => {\n          this.idle.focusResolve = resolve;\n        });\n      } else {\n        this.idle.focusResolve();\n      }\n    });\n  }\n\n  get themeColorElem() {\n    if(this._themeColorElem !== undefined) {\n      return this._themeColorElem;\n    }\n\n    return this._themeColorElem = document.head.querySelector('[name=\"theme-color\"]') as Element || null;\n  }\n\n  public setThemeColor(color = this.themeColor) {\n    if(!color) {\n      color = this.isNight() ? '#212121' : '#ffffff';\n    }\n\n    const themeColorElem = this.themeColorElem;\n    if(themeColorElem) {\n      themeColorElem.setAttribute('content', color);\n    }\n  }\n\n  public setThemeListener() {\n    try {\n      const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const checkDarkMode = () => {\n        //const theme = this.getTheme();\n        this.systemTheme = darkModeMediaQuery.matches ? 'night' : 'day';\n        //const newTheme = this.getTheme();\n\n        if(this.myId) {\n          this.dispatchEvent('theme_change');\n        } else {\n          this.setTheme();\n        }\n      };\n\n      if('addEventListener' in darkModeMediaQuery) {\n        darkModeMediaQuery.addEventListener('change', checkDarkMode);\n      } else if('addListener' in darkModeMediaQuery) {\n        (darkModeMediaQuery as any).addListener(checkDarkMode);\n      }\n\n      checkDarkMode();\n    } catch(err) {\n\n    }\n  }\n\n  public setTheme() {\n    const isNight = this.isNight();\n    const colorScheme = document.head.querySelector('[name=\"color-scheme\"]');\n    if(colorScheme) {\n      colorScheme.setAttribute('content', isNight ? 'dark' : 'light');\n    }\n\n    document.documentElement.classList.toggle('night', isNight);\n    this.setThemeColor();\n  }\n\n  get isOverlayActive() {\n    return this.overlaysActive > 0;\n  }\n\n  set isOverlayActive(value: boolean) {\n    this.overlaysActive += value ? 1 : -1;\n    this.dispatchEvent('overlay_toggle', this.isOverlayActive);\n  }\n\n  public isNight() {\n    return this.getTheme().name === 'night';\n  }\n\n  public getTheme(name: Theme['name'] = this.settings.theme === 'system' ? this.systemTheme : this.settings.theme) {\n    return this.settings.themes.find(t => t.name === name);\n  }\n}\n\nconst rootScope = new RootScope();\nMOUNT_CLASS_TO.rootScope = rootScope;\nexport default rootScope;\n\n/* rootScope.addEventListener('album_edit', (e) => {\n  \n});\n\nrootScope.addEventListener<'album_edit'>('album_edit', (e) => {\n  \n}); */\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport Modes from '../config/modes';\r\nimport { notifySomeone, IS_WORKER } from '../helpers/context';\r\nimport { WorkerTaskTemplate } from '../types';\r\n//import { stringify } from '../helpers/json';\r\n\r\nclass LocalStorage<Storage extends Record<string, any>> {\r\n  private prefix = '';\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage = true;\r\n\r\n  constructor(/* private preserveKeys: (keyof Storage)[] */) {\r\n    if(Modes.test) {\r\n      this.prefix = 't_';\r\n    }\r\n  }\r\n\r\n  public get<T extends keyof Storage>(key: T, useCache = true): Storage[T] {\r\n    if(this.cache.hasOwnProperty(key) && useCache) {\r\n      return this.cache[key];\r\n    } else if(this.useStorage) {\r\n      let value: Storage[T];\r\n      try {\r\n        value = localStorage.getItem(this.prefix + key as string) as any;\r\n      } catch(err) {\r\n        this.useStorage = false;\r\n      }\r\n\r\n      if(value !== null) {\r\n        try {\r\n          value = JSON.parse(value);\r\n        } catch(err) {\r\n          //console.error(err);\r\n        }\r\n      } else {\r\n        value = undefined;\r\n      }\r\n\r\n      return value;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal = false) {\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.cache[key] = value;\r\n\r\n        if(this.useStorage && !onlyLocal) {\r\n          try {\r\n            const stringified = JSON.stringify(value);\r\n            localStorage.setItem(this.prefix + key, stringified);\r\n          } catch(err) {\r\n            this.useStorage = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public delete(key: keyof Storage, saveLocal = false) {\r\n    // ! it is needed here\r\n    key = '' + key;\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    //if(this.useStorage) {\r\n      try {\r\n        localStorage.removeItem(this.prefix + key);\r\n      } catch(err) {\r\n        \r\n      }\r\n    //}\r\n  }\r\n\r\n  /* public clear(preserveKeys: (keyof Storage)[] = this.preserveKeys) {\r\n    // if(this.useStorage) {\r\n      try {\r\n        let obj: Partial<Storage> = {};\r\n        if(preserveKeys) {\r\n          preserveKeys.forEach(key => {\r\n            const value = this.get(key);\r\n            if(value !== undefined) {\r\n              obj[key] = value;\r\n            }\r\n          });\r\n        }\r\n        \r\n        localStorage.clear();\r\n\r\n        if(preserveKeys) {\r\n          this.set(obj);\r\n        }\r\n      } catch(err) {\r\n\r\n      }\r\n    // }\r\n  } */\r\n\r\n  public clear() {\r\n    const keys: string[] = ['dc', 'server_time_offset', 'xt_instance', 'user_auth', 'state_id'];\r\n    for(let i = 1; i <= 5; ++i) {\r\n      keys.push(`dc${i}_server_salt`);\r\n      keys.push(`dc${i}_auth_key`);\r\n    }\r\n\r\n    for(let key of keys) {\r\n      this.delete(key, true);\r\n    }\r\n  }\r\n\r\n  public toggleStorage(enabled: boolean) {\r\n    this.useStorage = enabled;\r\n\r\n    if(!enabled) {\r\n      this.clear();\r\n    } else {\r\n      return this.set(this.cache);\r\n    }\r\n  }\r\n}\r\n\r\nexport interface LocalStorageProxyTask extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: {\r\n    type: 'set' | 'get' | 'delete' | 'clear' | 'toggleStorage',\r\n    args: any[]\r\n  }\r\n};\r\n\r\nexport interface LocalStorageProxyTaskResponse extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: any\r\n};\r\n\r\nexport default class LocalStorageController<Storage extends Record<string, any>> {\r\n  private static STORAGES: LocalStorageController<any>[] = [];\r\n  private taskId = 0;\r\n  private tasks: {[taskID: number]: (result: any) => void} = {};\r\n  //private log = (...args: any[]) => console.log('[SW LS]', ...args);\r\n  //private log = (...args: any[]) => {};\r\n\r\n  private storage: LocalStorage<Storage>;\r\n\r\n  constructor(/* private preserveKeys: (keyof Storage)[] = [] */) {\r\n    LocalStorageController.STORAGES.push(this);\r\n\r\n    if(!IS_WORKER) {\r\n      this.storage = new LocalStorage(/* preserveKeys */);\r\n    }\r\n  }\r\n\r\n  public finishTask(taskId: number, result: any) {\r\n    //this.log('finishTask:', taskID, result, Object.keys(this.tasks));\r\n\r\n    if(!this.tasks.hasOwnProperty(taskId)) {\r\n      //this.log('no such task:', taskID, result);\r\n      return;\r\n    }\r\n\r\n    this.tasks[taskId](result);\r\n    delete this.tasks[taskId];\r\n  }\r\n\r\n  private proxy<T>(type: LocalStorageProxyTask['payload']['type'], ...args: LocalStorageProxyTask['payload']['args']) {\r\n    return new Promise<T>((resolve, reject) => {\r\n      if(IS_WORKER) {\r\n        const taskId = this.taskId++;\r\n\r\n        this.tasks[taskId] = resolve;\r\n        const task: LocalStorageProxyTask = {\r\n          type: 'localStorageProxy', \r\n          id: taskId,\r\n          payload: {\r\n            type,\r\n            args\r\n          }\r\n        };\r\n\r\n        notifySomeone(task);\r\n      } else {\r\n        args = Array.prototype.slice.call(args);\r\n\r\n        // @ts-ignore\r\n        const result: any = this.storage[type].apply(this.storage, args as any);\r\n        resolve(result);\r\n      }\r\n    });\r\n  }\r\n\r\n  public get<T extends keyof Storage>(key: T, useCache?: boolean) {\r\n    return this.proxy<Storage[T]>('get', key, useCache);\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal?: boolean) {\r\n    return this.proxy<void>('set', obj, onlyLocal);\r\n  }\r\n\r\n  public delete(key: keyof Storage, saveLocal?: boolean) {\r\n    return this.proxy<void>('delete', key, saveLocal);\r\n  }\r\n\r\n  public clear(/* preserveKeys?: (keyof Storage)[] */) {\r\n    return this.proxy<void>('clear'/* , preserveKeys */);\r\n  }\r\n\r\n  public toggleStorage(enabled: boolean) {\r\n    return this.proxy<void>('toggleStorage', enabled);\r\n  }\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { AppInstance } from './mtproto/singleInstance';\r\nimport type { UserAuth } from './mtproto/mtproto_config';\r\nimport type { DcId } from '../types';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport LocalStorageController from './localStorage';\r\n\r\nconst sessionStorage = new LocalStorageController<{\r\n  dc: DcId,\r\n  user_auth: UserAuth,\r\n  state_id: number,\r\n  dc1_auth_key: string,\r\n  dc2_auth_key: string,\r\n  dc3_auth_key: string,\r\n  dc4_auth_key: string,\r\n  dc5_auth_key: string,\r\n  dc1_server_salt: string,\r\n  dc2_server_salt: string,\r\n  dc3_server_salt: string,\r\n  dc4_server_salt: string,\r\n  dc5_server_salt: string,\r\n  server_time_offset: number,\r\n  xt_instance: AppInstance,\r\n  kz_version: 'K' | 'Z',\r\n  tgme_sync: {\r\n    canRedirect: boolean,\r\n    ts: number\r\n  }\r\n}>(/* ['kz_version'] */);\r\nMOUNT_CLASS_TO.appStorage = sessionStorage;\r\nexport default sessionStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n */\r\n\r\nimport type { ChatSavedPosition } from './appManagers/appImManager';\r\nimport type { State } from './appManagers/appStateManager';\r\nimport type { AppDraftsManager } from './appManagers/appDraftsManager';\r\nimport { MOUNT_CLASS_TO } from '../config/debug';\r\nimport { LangPackDifference } from '../layer';\r\nimport AppStorage from './storage';\r\nimport DATABASE_STATE from '../config/databases/state';\r\n\r\nconst stateStorage = new AppStorage<{\r\n  chatPositions: {\r\n    [peerId_threadId: string]: ChatSavedPosition\r\n  },\r\n  langPack: LangPackDifference,\r\n  drafts: AppDraftsManager['drafts'],\r\n  user_auth: any, // support old webk format\r\n} & State, typeof DATABASE_STATE>(DATABASE_STATE, 'session');\r\nMOUNT_CLASS_TO.stateStorage = stateStorage;\r\nexport default stateStorage;\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from '../config/databases';\r\nimport Modes from '../config/modes';\r\nimport blobConstruct from '../helpers/blob/blobConstruct';\r\nimport safeAssign from '../helpers/object/safeAssign';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex\r\n */\r\nexport type IDBIndex = {\r\n  indexName: string,\r\n  keyPath: string,\r\n  objectParameters: IDBIndexParameters\r\n};\r\n\r\nexport type IDBStore = {\r\n  name: string, \r\n  indexes?: IDBIndex[]\r\n};\r\n\r\nexport type IDBOptions = {\r\n  name?: string,\r\n  storeName: string,\r\n  stores?: IDBStore[],\r\n  version?: number\r\n};\r\n\r\nconst DEBUG = false;\r\n\r\nexport default class IDBStorage<T extends Database<any>> {\r\n  private static STORAGES: IDBStorage<Database<any>>[] = [];\r\n  private openDbPromise: Promise<IDBDatabase>;\r\n  private db: IDBDatabase;\r\n  private storageIsAvailable = true;\r\n\r\n  private log: ReturnType<typeof logger>;\r\n  \r\n  private name: string;\r\n  private version: number;\r\n  private stores: IDBStore[];\r\n  private storeName: T['stores'][0]['name'];\r\n\r\n  constructor(db: T, storeName: typeof db['stores'][0]['name']) {\r\n    safeAssign(this, db);\r\n\r\n    if(Modes.test) {\r\n      this.name += '_test';\r\n    }\r\n\r\n    this.storeName = storeName;\r\n\r\n    this.log = logger('IDB-' + this.storeName);\r\n\r\n    this.openDatabase(true);\r\n\r\n    IDBStorage.STORAGES.push(this);\r\n  }\r\n\r\n  public static closeDatabases(preserve?: IDBStorage<Database<any>>) {\r\n    this.STORAGES.forEach(storage => {\r\n      if(preserve && preserve === storage) {\r\n        return;\r\n      }\r\n\r\n      const db = storage.db;\r\n      if(db) {\r\n        db.onclose = () => {};\r\n        db.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ! WARNING ! function requires at least one opened connection\r\n   */\r\n  /* public static clearObjectStores() {\r\n    const storage = this.STORAGES[0];\r\n    this.closeDatabases(storage);\r\n\r\n    const names = Array.from(storage.db.objectStoreNames);\r\n    const promises = names.map(name => storage.clear(name));\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  /* public static deleteDatabase() {\r\n    this.closeDatabases();\r\n\r\n    const storages = this.STORAGES;\r\n    const dbNames = Array.from(new Set(storages.map(storage => storage.name)));\r\n    const promises = dbNames.map(dbName => {\r\n      return new Promise<void>((resolve, reject) => {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n  \r\n        deleteRequest.onerror = () => {\r\n          reject();\r\n        };\r\n  \r\n        deleteRequest.onsuccess = () => {\r\n          resolve();\r\n        };\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  } */\r\n\r\n  public isAvailable() {\r\n    return this.storageIsAvailable;\r\n  }\r\n\r\n  public openDatabase(createNew = false): Promise<IDBDatabase> {\r\n    if(this.openDbPromise && !createNew) {\r\n      return this.openDbPromise;\r\n    }\r\n\r\n    const createObjectStore = (db: IDBDatabase, store: IDBStore) => {\r\n      const os = db.createObjectStore(store.name);\r\n\r\n      if(store.indexes?.length) {\r\n        for(const index of store.indexes) {\r\n          os.createIndex(index.indexName, index.keyPath, index.objectParameters);\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      var request = indexedDB.open(this.name, this.version);\r\n\r\n      if(!request) {\r\n        return Promise.reject();\r\n      }\r\n    } catch(error) {\r\n      this.log.error('error opening db', (error as Error).message);\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let finished = false;\r\n    setTimeout(() => {\r\n      if(!finished) {\r\n        request.onerror({type: 'IDB_CREATE_TIMEOUT'} as Event);\r\n      }\r\n    }, 3000);\r\n\r\n    return this.openDbPromise = new Promise<IDBDatabase>((resolve, reject) => {\r\n      request.onsuccess = (event) => {\r\n        finished = true;\r\n        const db = request.result;\r\n        let calledNew = false;\r\n\r\n        this.log('Opened');\r\n  \r\n        db.onerror = (error) => {\r\n          this.storageIsAvailable = false;\r\n          this.log.error('Error creating/accessing IndexedDB database', error);\r\n          reject(error);\r\n        };\r\n\r\n        db.onclose = (e) => {\r\n          this.log.error('closed:', e);\r\n          !calledNew && this.openDatabase();\r\n        };\r\n\r\n        db.onabort = (e) => {\r\n          this.log.error('abort:', e);\r\n          const transaction = e.target as IDBTransaction;\r\n          \r\n          this.openDatabase(calledNew = true);\r\n\r\n          if(transaction.onerror) {\r\n            transaction.onerror(e);\r\n          }\r\n\r\n          db.close();\r\n        };\r\n\r\n        db.onversionchange = (e) => {\r\n          this.log.error('onversionchange, lol?');\r\n        };\r\n\r\n        resolve(this.db = db);\r\n      };\r\n  \r\n      request.onerror = (event) => {\r\n        finished = true;\r\n        this.storageIsAvailable = false;\r\n        this.log.error('Error creating/accessing IndexedDB database', event);\r\n        reject(event);\r\n      };\r\n  \r\n      request.onupgradeneeded = (event) => {\r\n        finished = true;\r\n        this.log.warn('performing idb upgrade from', event.oldVersion, 'to', event.newVersion);\r\n\r\n        // @ts-ignore\r\n        var db = event.target.result as IDBDatabase;\r\n        this.stores.forEach((store) => {\r\n          /* if(db.objectStoreNames.contains(store.name)) {\r\n            //if(event.oldVersion === 1) {\r\n              db.deleteObjectStore(store.name);\r\n            //}\r\n          } */\r\n    \r\n          if(!db.objectStoreNames.contains(store.name)) {\r\n            createObjectStore(db, store);\r\n          }\r\n        });\r\n      };\r\n    });\r\n  }\r\n\r\n  public delete(entryName: string | string[]): Promise<void> {\r\n    //return Promise.resolve();\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.delete(entryName));\r\n    }, DEBUG ? 'delete: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public clear(storeName?: IDBStorage<T>['storeName']) {\r\n    return this.getObjectStore('readwrite', (objectStore) => objectStore.clear(), DEBUG ? 'clear' : '', storeName);\r\n  }\r\n\r\n  public save(entryName: string | string[], value: any | any[]) {\r\n    // const handleError = (error: Error) => {\r\n    //   this.log.error('save: transaction error:', entryName, value, db, error, error && error.name);\r\n    //   if((!error || error.name === 'InvalidStateError')/*  && false */) {\r\n    //     setTimeout(() => {\r\n    //       this.save(entryName, value);\r\n    //     }, 2e3);\r\n    //   } else {\r\n    //     //console.error('IndexedDB saveFile transaction error:', error, error && error.name);\r\n    //   }\r\n    // };\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n      value = [].concat(value);\r\n    }\r\n    \r\n    return this.getObjectStore('readwrite', (objectStore) => {\r\n      return (entryName as string[]).map((entryName, idx) => objectStore.put(value[idx], entryName));\r\n    }, DEBUG ? 'save: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  public saveFile(fileName: string, blob: Blob | Uint8Array) {\r\n    //return Promise.resolve(blobConstruct([blob]));\r\n    if(!(blob instanceof Blob)) {\r\n      blob = blobConstruct([blob]) as Blob;\r\n    }\r\n\r\n    return this.save(fileName, blob);\r\n  }\r\n\r\n  /* public saveFileBase64(db: IDBDatabase, fileName: string, blob: Blob | any): Promise<Blob> {\r\n    if(this.getBlobSize(blob) > 10 * 1024 * 1024) {\r\n      return Promise.reject();\r\n    }\r\n\r\n    if(!(blob instanceof Blob)) {\r\n      var safeMimeType = blobSafeMimeType(blob.type || 'image/jpeg');\r\n      var address = 'data:' + safeMimeType + ';base64,' + bytesToBase64(blob);\r\n      return this.storagePutB64String(db, fileName, address).then(() => {\r\n        return blob;\r\n      });\r\n    }\r\n\r\n    try {\r\n      var reader = new FileReader();\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    let promise = new Promise<Blob>((resolve, reject) => {\r\n      reader.onloadend = () => {\r\n        this.storagePutB64String(db, fileName, reader.result as string).then(() => {\r\n          resolve(blob);\r\n        }, reject);\r\n      }\r\n  \r\n      reader.onerror = reject;\r\n    });\r\n    \r\n\r\n    try {\r\n      reader.readAsDataURL(blob);\r\n    } catch (e) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject();\r\n    }\r\n\r\n    return promise;\r\n  }\r\n\r\n  public storagePutB64String(db: IDBDatabase, fileName: string, b64string: string) {\r\n    try {\r\n      var objectStore = db.transaction([this.storeName], 'readwrite')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.put(b64string, fileName);\r\n    } catch(error) {\r\n      this.storageIsAvailable = false;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      request.onsuccess = function(event) {\r\n        resolve();\r\n      };\r\n  \r\n      request.onerror = reject;\r\n    });\r\n  }\r\n\r\n  public getBlobSize(blob: any) {\r\n    return blob.size || blob.byteLength || blob.length;\r\n  } */\r\n\r\n  public get<T>(entryName: string[]): Promise<T[]>;\r\n  public get<T>(entryName: string): Promise<T>;\r\n  public get<T>(entryName: string | string[]): Promise<T> | Promise<T[]> {\r\n    //return Promise.reject();\r\n\r\n    if(!Array.isArray(entryName)) {\r\n      entryName = [].concat(entryName);\r\n    }\r\n\r\n    return this.getObjectStore<T>('readonly', (objectStore) => {\r\n      return (entryName as string[]).map((entryName) => objectStore.get(entryName));\r\n    }, DEBUG ? 'get: ' + entryName.join(', ') : '');\r\n  }\r\n\r\n  private getObjectStore<T>(mode: IDBTransactionMode, objectStore: (objectStore: IDBObjectStore) => IDBRequest | IDBRequest[], log?: string, storeName = this.storeName) {\r\n    let perf: number;\r\n\r\n    if(log) {\r\n      perf = performance.now();\r\n      this.log(log + ': start');\r\n    }\r\n\r\n    return this.openDatabase().then((db) => {\r\n      return new Promise<T>((resolve, reject) => {\r\n        /* if(mode === 'readwrite') {\r\n          return;\r\n        } */\r\n\r\n        const transaction = db.transaction([storeName], mode);\r\n\r\n        transaction.onerror = (e) => {\r\n          clearTimeout(timeout);\r\n          reject(transaction.error);\r\n        };\r\n  \r\n        transaction.oncomplete = (e) => {\r\n          clearTimeout(timeout);\r\n\r\n          if(log) {\r\n            this.log(log + ': end', performance.now() - perf);\r\n          }\r\n\r\n          const results = r.map(r => r.result);\r\n          resolve(isArray ? results : results[0]);\r\n        };\r\n  \r\n        const timeout = setTimeout(() => {\r\n          this.log.error('transaction not finished', transaction);\r\n        }, 10000);\r\n  \r\n        /* transaction.addEventListener('abort', (e) => {\r\n          //handleError();\r\n          this.log.error('IndexedDB: transaction abort!', transaction.error);\r\n        }); */\r\n  \r\n        const requests = objectStore(transaction.objectStore(storeName));\r\n\r\n        const isArray = Array.isArray(requests);\r\n        const r: IDBRequest[] = isArray ? requests : [].concat(requests) as any;\r\n\r\n        // const length = r.length;\r\n        // /* let left = length;\r\n\r\n        // const onRequestFinished = (error?: Error) => {\r\n        //   if(!--left) {\r\n        //     resolve(result);\r\n        //     clearTimeout(timeout);\r\n        //   }\r\n        // }; */\r\n\r\n        // for(let i = 0; i < length; ++i) {\r\n        //   const request = r[i];\r\n        //   request.onsuccess = () => {\r\n        //     onRequestFinished();\r\n        //   };\r\n\r\n        //   request.onerror = (e) => {\r\n        //     onRequestFinished(transaction.error);\r\n        //   };\r\n        // }\r\n      });\r\n    });\r\n  }\r\n\r\n  public getAll<T>(): Promise<T[]> {\r\n    return this.getObjectStore<T[]>('readonly', (objectStore) => objectStore.getAll(), DEBUG ? 'getAll' : '');\r\n  }\r\n\r\n  /* public getAllKeys(): Promise<Array<string>> {\r\n    console.time('getAllEntries');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.getAllKeys();\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var result = event.target.result;\r\n          resolve(result);\r\n          console.timeEnd('getAllEntries');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public isFileExists(fileName: string): Promise<boolean> {\r\n    console.time('isFileExists');\r\n    return this.openDatabase().then((db) => {\r\n      var objectStore = db.transaction([this.storeName], 'readonly')\r\n        .objectStore(this.storeName);\r\n      var request = objectStore.openCursor(fileName);\r\n\r\n      return new Promise((resolve, reject) => {\r\n        request.onsuccess = function(event) {\r\n          // @ts-ignore\r\n          var cursor = event.target.result;\r\n          resolve(!!cursor);\r\n          console.timeEnd('isFileExists');\r\n        }\r\n  \r\n        request.onerror = reject;\r\n      });\r\n    });\r\n  } */\r\n\r\n  /* public getFileWriter(fileName: string, mimeType: string) {\r\n    var fakeWriter = FileManager.getFakeFileWriter(mimeType, (blob) => {\r\n      return this.saveFile(fileName, blob);\r\n    });\r\n\r\n    return Promise.resolve(fakeWriter);\r\n  } */\r\n}\r\n","/*\r\n * https://github.com/morethanwords/tweb\r\n * Copyright (C) 2019-2021 Eduard Kuzmenko\r\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\r\n * \r\n * Originally from:\r\n * https://github.com/zhukov/webogram\r\n * Copyright (C) 2014 Igor Zhukov <igor.beatle@gmail.com>\r\n * https://github.com/zhukov/webogram/blob/master/LICENSE\r\n */\r\n\r\nimport { Database } from \"../config/databases\";\r\n//import DATABASE_SESSION from \"../config/databases/session\";\r\nimport { CancellablePromise, deferredPromise } from \"../helpers/cancellablePromise\";\r\nimport throttle from \"../helpers/schedulers/throttle\";\r\n//import { WorkerTaskTemplate } from \"../types\";\r\nimport IDBStorage from \"./idb\";\r\n\r\nfunction noop() {}\r\n\r\n/* export interface LocalStorageProxySetTask extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: {\r\n    type: 'set',\r\n    keys: string[],\r\n    values: any[]\r\n  }\r\n};\r\n\r\nexport interface LocalStorageProxyDeleteTask extends WorkerTaskTemplate {\r\n  type: 'localStorageProxy',\r\n  payload: {\r\n    type: 'delete',\r\n    keys: string[]\r\n  }\r\n}; */\r\n\r\nexport default class AppStorage<Storage extends Record<string, any>, T extends Database<any>/* Storage extends {[name: string]: any} *//* Storage extends Record<string, any> */> {\r\n  private static STORAGES: AppStorage<any, Database<any>>[] = [];\r\n  private storage: IDBStorage<T>;//new CacheStorageController('session');\r\n\r\n  //private cache: Partial<{[key: string]: Storage[typeof key]}> = {};\r\n  private cache: Partial<Storage> = {};\r\n  private useStorage: boolean;\r\n  private savingFreezed: boolean;\r\n\r\n  private getPromises: Map<keyof Storage, CancellablePromise<Storage[keyof Storage]>> = new Map();\r\n  private getThrottled: () => void;\r\n\r\n  private keysToSet: Set<keyof Storage> = new Set();\r\n  private saveThrottled: () => void;\r\n  private saveDeferred = deferredPromise<void>();\r\n\r\n  private keysToDelete: Set<keyof Storage> = new Set();\r\n  private deleteThrottled: () => void;\r\n  private deleteDeferred = deferredPromise<void>();\r\n\r\n  constructor(private db: T, private storeName: typeof db['stores'][number]['name']) {\r\n    this.storage = new IDBStorage<T>(db, storeName);\r\n\r\n    if(AppStorage.STORAGES.length) {\r\n      this.useStorage = AppStorage.STORAGES[0].useStorage;\r\n    } else {\r\n      this.useStorage = true;\r\n    }\r\n\r\n    this.savingFreezed = false;\r\n\r\n    AppStorage.STORAGES.push(this);\r\n\r\n    this.saveThrottled = throttle(async() => {\r\n      const deferred = this.saveDeferred;\r\n      this.saveDeferred = deferredPromise<void>();\r\n\r\n      const set = this.keysToSet;\r\n      if(set.size) {\r\n        const keys = Array.from(set.values()) as string[];\r\n        set.clear();\r\n\r\n        try {\r\n          //console.log('setItem: will set', key/* , value */);\r\n          //await this.cacheStorage.delete(key); // * try to prevent memory leak in Chrome leading to 'Unexpected internal error.'\r\n          //await this.storage.save(key, new Response(value, {headers: {'Content-Type': 'application/json'}}));\r\n\r\n          const values = keys.map(key => this.cache[key]);\r\n          /* if(db === DATABASE_SESSION && !('localStorage' in self)) { // * support legacy Webogram's localStorage\r\n            self.postMessage({\r\n              type: 'localStorageProxy', \r\n              payload: {\r\n                type: 'set',\r\n                keys,\r\n                values\r\n              }\r\n            } as LocalStorageProxySetTask);\r\n          } */\r\n\r\n          await this.storage.save(keys, values);\r\n          //console.log('setItem: have set', key/* , value */);\r\n        } catch(e) {\r\n          //this.useCS = false;\r\n          console.error('[AS]: set error:', e, keys/* , value */);\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n\r\n      if(set.size) {\r\n        this.saveThrottled();\r\n      }\r\n    }, 16, false);\r\n\r\n    this.deleteThrottled = throttle(async() => {\r\n      const deferred = this.deleteDeferred;\r\n      this.deleteDeferred = deferredPromise<void>();\r\n\r\n      const set = this.keysToDelete;\r\n      if(set.size) {\r\n        const keys = Array.from(set.values()) as string[];\r\n        set.clear();\r\n\r\n        try {\r\n          /* if(db === DATABASE_SESSION && !('localStorage' in self)) { // * support legacy Webogram's localStorage\r\n            self.postMessage({\r\n              type: 'localStorageProxy', \r\n              payload: {\r\n                type: 'delete',\r\n                keys\r\n              }\r\n            } as LocalStorageProxyDeleteTask);\r\n          } */\r\n\r\n          await this.storage.delete(keys);\r\n        } catch(e) {\r\n          console.error('[AS]: delete error:', e, keys);\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n\r\n      if(set.size) {\r\n        this.deleteThrottled();\r\n      }\r\n    }, 16, false);\r\n\r\n    this.getThrottled = throttle(async() => {\r\n      const keys = Array.from(this.getPromises.keys());\r\n\r\n      // const perf = performance.now();\r\n      this.storage.get(keys as string[]).then(values => {\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            // @ts-ignore\r\n            deferred.resolve(this.cache[key] = values[i]);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n\r\n        // console.log('[AS]: get time', keys, performance.now() - perf);\r\n      }, (error) => {\r\n        if(!['NO_ENTRY_FOUND', 'STORAGE_OFFLINE'].includes(error)) {\r\n          this.useStorage = false;\r\n          console.error('[AS]: get error:', error, keys, storeName);\r\n        }\r\n\r\n        for(let i = 0, length = keys.length; i < length; ++i) {\r\n          const key = keys[i];\r\n          const deferred = this.getPromises.get(key);\r\n          if(deferred) {\r\n            //deferred.reject(error);\r\n            deferred.resolve(undefined);\r\n            this.getPromises.delete(key);\r\n          }\r\n        }\r\n      }).finally(() => {\r\n        if(this.getPromises.size) {\r\n          this.getThrottled();\r\n        }\r\n      });\r\n    }, 16, false);\r\n  }\r\n\r\n  public isAvailable() {\r\n    return this.useStorage;\r\n  }\r\n\r\n  public getCache() {\r\n    return this.cache;\r\n  }\r\n\r\n  public getFromCache<T extends keyof Storage>(key: T) {\r\n    return this.cache[key];\r\n  }\r\n\r\n  public setToCache(key: keyof Storage, value: Storage[typeof key]) {\r\n    return this.cache[key] = value;\r\n  }\r\n\r\n  public async get<T extends keyof Storage>(key: T, useCache = true): Promise<Storage[T]> {\r\n    if(this.cache.hasOwnProperty(key) && useCache) {\r\n      return this.getFromCache(key);\r\n    } else if(this.useStorage) {\r\n      const r = this.getPromises.get(key);\r\n      if(r) return r as any;\r\n\r\n      const p = deferredPromise<Storage[T]>();\r\n      this.getPromises.set(key, p as any);\r\n\r\n      this.getThrottled();\r\n\r\n      return p;\r\n    }/*  else {\r\n      throw 'something went wrong';\r\n    } */\r\n  }\r\n\r\n  public getAll() {\r\n    return this.storage.getAll().catch(() => []);\r\n  }\r\n\r\n  public set(obj: Partial<Storage>, onlyLocal = false) {\r\n    //console.log('storageSetValue', obj, callback, arguments);\r\n\r\n    const canUseStorage = this.useStorage && !onlyLocal && !this.savingFreezed;\r\n    for(const key in obj) {\r\n      if(obj.hasOwnProperty(key)) {\r\n        const value = obj[key];\r\n        this.setToCache(key, value);\r\n\r\n        // let perf = /* DEBUG */false ? performance.now() : 0;\r\n        // value = JSON.stringify(value);\r\n\r\n        // if(perf) {\r\n        //   let elapsedTime = performance.now() - perf;\r\n        //   if(elapsedTime > 10) {\r\n        //     console.warn('LocalStorage set: stringify time by JSON.stringify:', elapsedTime, key);\r\n        //   }\r\n        // }\r\n        \r\n        /* perf = performance.now();\r\n        value = stringify(value);\r\n        console.log('LocalStorage set: stringify time by own stringify:', performance.now() - perf); */\r\n\r\n        if(canUseStorage) {\r\n          this.keysToSet.add(key);\r\n          this.keysToDelete.delete(key);\r\n          this.saveThrottled();\r\n        }\r\n      }\r\n    }\r\n\r\n    return canUseStorage ? this.saveDeferred : Promise.resolve();\r\n  }\r\n\r\n  public delete(key: keyof Storage, saveLocal = false) {\r\n    /* if(!this.cache.hasOwnProperty(key)) {\r\n      return;\r\n    } */\r\n\r\n    // ! it is needed here\r\n    key = '' + key;\r\n\r\n    if(!saveLocal) {\r\n      delete this.cache[key];\r\n    }\r\n    \r\n    if(this.useStorage) {\r\n      this.keysToSet.delete(key);\r\n      this.keysToDelete.add(key);\r\n      this.deleteThrottled();\r\n    }\r\n\r\n    return this.useStorage ? this.deleteDeferred : Promise.resolve();\r\n  }\r\n\r\n  public clear(saveLocal = false) {\r\n    if(!saveLocal) {\r\n      for(const i in this.cache) {\r\n        delete this.cache[i];\r\n      }\r\n    }\r\n\r\n    return this.storage.clear().catch(noop);\r\n  }\r\n\r\n  public static toggleStorage(enabled: boolean) {\r\n    return Promise.all(this.STORAGES.map(storage => {\r\n      storage.useStorage = enabled;\r\n      \r\n      if(!enabled) {\r\n        storage.keysToSet.clear();\r\n        storage.keysToDelete.clear();\r\n        storage.getPromises.forEach((deferred) => deferred.resolve(undefined));\r\n        storage.getPromises.clear();\r\n        return storage.clear(true);\r\n      } else {\r\n        return storage.set(storage.cache);\r\n      }\r\n    })).catch(noop);\r\n  }\r\n\r\n  public static freezeSaving<T extends Database<any>>(callback: () => any, names: T['stores'][number]['name'][]) {\r\n    this.STORAGES.forEach(storage => storage.savingFreezed = true);\r\n    try {\r\n      callback();\r\n    } catch(err) {}\r\n    this.STORAGES.forEach(storage => storage.savingFreezed = false);\r\n  }\r\n\r\n  /* public deleteDatabase() {\r\n    return IDBStorage.deleteDatabase().catch(noop);\r\n  } */\r\n}\r\n"],"names":["name","version","stores","DEBUG","MOUNT_CLASS_TO","window","self","Modes","test","location","search","indexOf","debug","http","ssl","multipleConnections","asServiceWorker","transport","blobConstruct","blobParts","mimeType","blob","safeMimeType","Blob","type","e","bb","BlobBuilder","forEach","blobPart","append","getBlob","blobSafeMimeType","deferredPromise","deferredHelper","isFulfilled","isRejected","notify","notifyAll","args","lastNotify","listeners","callback","addNotifyListener","push","deferred","Promise","resolve","reject","value","catch","finally","length","cancel","Object","assign","IS_SERVICE_WORKER","ServiceWorkerGlobalScope","IS_WEB_WORKER","WorkerGlobalScope","IS_WORKER","notifyServiceWorker","all","clients","matchAll","includeUncontrolled","then","slice","listener","postMessage","notifySomeone","bind","EventListenerBase","constructor","reuseResults","this","_constructor","listenerResults","addEventListener","options","hasOwnProperty","once","pop","addMultipleEventsListeners","obj","i","removeEventListener","findAndSplice","l","_dispatchEvent","collectResults","arr","findIndex","result","err","console","error","dispatchResultableEvent","dispatchEvent","cleanup","noop","copy","Date","getTime","Array","isArray","map","el","clonedObj","prop","isObject","object","safeAssign","fromObject","undefined","arrays","Uint8Array","Uint16Array","Uint32Array","nextRandomUint","bits","array","crypto","getRandomValues","randomLong","throttle","fn","ms","shouldRunFirst","isPending","interval","_args","setInterval","clearInterval","LogTypes","LOG_LEVELS","None","Error","Warn","Log","Debug","_logTimer","now","dT","toFixed","getCallerFunctionNameFromLine","IS_WEBKIT","IS_SAFARI","IS_FIREFOX","line","split","splitted","trim","lastIndexOf","STYLES_SUPPORTED","LINE_INDEX","getCallerFunctionName","lines","stack","LOGGER_STYLES","methods","logger","prefix","ignoreDebugReset","style","originalPrefix","originalStyle","log","method","logType","setPrefix","newPrefix","setLevel","level","reduce","acc","v","bindPrefix","NULL_PEER_ID","REPLIES_PEER_ID","SERVICE_PEER_ID","MUTE_UNTIL","BOT_START_PARAM","RootScope","super","overlaysActive","idle","isIDLE","deactivated","focusPromise","focusResolve","connectionStatus","filterId","config","forwarded_count_max","edit_time_limit","pinned_dialogs_count_max","pinned_infolder_count_max","message_length_max","caption_length_max","peerId","document","body","classList","toggle","id","myId","status","themeColorElem","_themeColorElem","head","querySelector","setThemeColor","color","themeColor","isNight","setAttribute","setThemeListener","darkModeMediaQuery","matchMedia","checkDarkMode","systemTheme","matches","setTheme","addListener","colorScheme","documentElement","isOverlayActive","getTheme","settings","theme","themes","find","t","rootScope","LocalStorage","cache","useStorage","get","key","useCache","localStorage","getItem","JSON","parse","set","onlyLocal","stringified","stringify","setItem","delete","saveLocal","removeItem","clear","keys","toggleStorage","enabled","LocalStorageController","taskId","tasks","STORAGES","storage","finishTask","proxy","task","payload","prototype","call","apply","sessionStorage","stateStorage","IDBStorage","db","storeName","storageIsAvailable","openDatabase","static","preserve","onclose","close","isAvailable","createNew","openDbPromise","request","indexedDB","open","message","finished","setTimeout","onerror","onsuccess","event","calledNew","onabort","transaction","target","onversionchange","onupgradeneeded","warn","oldVersion","newVersion","store","objectStoreNames","contains","os","createObjectStore","indexes","index","createIndex","indexName","keyPath","objectParameters","entryName","concat","getObjectStore","objectStore","save","idx","put","saveFile","fileName","mode","perf","performance","clearTimeout","timeout","oncomplete","results","r","requests","getAll","AppStorage","getPromises","Map","keysToSet","Set","saveDeferred","keysToDelete","deleteDeferred","savingFreezed","saveThrottled","size","from","values","deleteThrottled","getThrottled","includes","getCache","getFromCache","setToCache","p","canUseStorage","add","names"],"sourceRoot":""}